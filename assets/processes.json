{"links":[],"processes":[{"categories":["math"],"deprecated":false,"description":"Computes the absolute value of a real number `x`, which is the \"unsigned\" portion of x and often denoted as *|x|*.\n\nThe no-data value `null` is passed through and therefore gets propagated.","examples":[{"arguments":{"x":0},"returns":0},{"arguments":{"x":3.5},"returns":3.5},{"arguments":{"x":-0.4},"returns":0.4},{"arguments":{"x":-3.5},"returns":3.5}],"exceptions":{},"experimental":false,"id":"absolute","links":[{"href":"http://mathworld.wolfram.com/AbsoluteValue.html","rel":"about","title":"Absolute value explained by Wolfram MathWorld"}],"parameters":[{"deprecated":false,"description":"A number.","experimental":false,"name":"x","optional":false,"schema":{"type":["number","null"]}}],"process_graph":{"if":{"arguments":{"accept":{"from_node":"multiply"},"reject":{"from_parameter":"x"},"value":{"from_node":"lt"}},"process_id":"if","result":true},"lt":{"arguments":{"x":{"from_parameter":"x"},"y":0},"process_id":"lt"},"multiply":{"arguments":{"x":{"from_parameter":"x"},"y":-1},"process_id":"multiply"}},"returns":{"description":"The computed absolute value.","schema":{"minimum":0.0,"type":["number","null"]}},"summary":"Absolute value"},{"categories":["math"],"deprecated":false,"description":"Sums up the two numbers `x` and `y` (*`x + y`*) and returns the computed sum.\n\nNo-data values are taken into account so that `null` is returned if any element is such a value.\n\nThe computations follow [IEEE Standard 754](https://ieeexplore.ieee.org/document/8766229) whenever the processing environment supports it.","examples":[{"arguments":{"x":5,"y":2.5},"returns":7.5},{"arguments":{"x":-2,"y":-4},"returns":-6},{"arguments":{"x":1,"y":null},"returns":null}],"exceptions":{},"experimental":false,"id":"add","links":[{"href":"http://mathworld.wolfram.com/Sum.html","rel":"about","title":"Sum explained by Wolfram MathWorld"},{"href":"https://ieeexplore.ieee.org/document/8766229","rel":"about","title":"IEEE Standard 754-2019 for Floating-Point Arithmetic"}],"parameters":[{"deprecated":false,"description":"The first summand.","experimental":false,"name":"x","optional":false,"schema":{"type":["number","null"]}},{"deprecated":false,"description":"The second summand.","experimental":false,"name":"y","optional":false,"schema":{"type":["number","null"]}}],"process_graph":{"sum":{"arguments":{"data":[{"from_parameter":"x"},{"from_parameter":"y"}],"ignore_nodata":false},"process_id":"sum","result":true}},"returns":{"description":"The computed sum of the two numbers.","schema":{"type":["number","null"]}},"summary":"Addition of two numbers"},{"categories":["cubes"],"deprecated":false,"description":"Adds a new named dimension to the data cube.\n\nAfterwards, the dimension can be referred to with the specified `name`. If a dimension with the specified name exists, the process fails with a `DimensionExists` exception. The dimension label of the dimension is set to the specified `label`.","exceptions":{"DimensionExists":{"http":400,"message":"A dimension with the specified name already exists."}},"experimental":false,"id":"add_dimension","parameters":[{"deprecated":false,"description":"A data cube to add the dimension to.","experimental":false,"name":"data","optional":false,"schema":{"subtype":"raster-cube","type":"object"}},{"deprecated":false,"description":"Name for the dimension.","experimental":false,"name":"name","optional":false,"schema":{"type":"string"}},{"deprecated":false,"description":"A dimension label.","experimental":false,"name":"label","optional":false,"schema":[{"type":"number"},{"type":"string"}]},{"default":"other","deprecated":false,"description":"The type of dimension, defaults to `other`.","experimental":false,"name":"type","optional":true,"schema":{"enum":["spatial","temporal","bands","other"],"type":"string"}}],"process_graph":{},"returns":{"description":"The data cube with a newly added dimension. The new dimension has exactly one dimension label. All other dimensions remain unchanged.","schema":{"subtype":"raster-cube","type":"object"}},"summary":"Add a new dimension"},{"categories":["logic","reducer"],"deprecated":false,"description":"Checks if **all** of the values in `data` are true. If no value is given (i.e. the array is empty) the process returns `null`.\n\nBy default all no-data values are ignored so that the process returns `null` if all values are no-data, `true` if all values are true and `false` otherwise. Setting the `ignore_nodata` flag to `false` takes no-data values into account and the array values are reduced pairwise according to the following truth table:\n\n```\n      || null  | false | true\n----- || ----- | ----- | -----\nnull  || null  | false | null\nfalse || false | false | false\ntrue  || null  | false | true\n```\n\n**Remark:** The process evaluates all values from the first to the last element and stops once the outcome is unambiguous. A result is ambiguous unless a value is `false` or all values have been taken into account.","examples":[{"arguments":{"data":[false,null]},"returns":false},{"arguments":{"data":[true,null]},"returns":true},{"arguments":{"data":[false,null],"ignore_nodata":false},"returns":false},{"arguments":{"data":[true,null],"ignore_nodata":false},"returns":null},{"arguments":{"data":[true,false,true,false]},"returns":false},{"arguments":{"data":[true,false]},"returns":false},{"arguments":{"data":[true,true]},"returns":true},{"arguments":{"data":[true]},"returns":true},{"arguments":{"data":[null],"ignore_nodata":false},"returns":null},{"arguments":{"data":[]},"returns":null}],"exceptions":{},"experimental":false,"id":"all","parameters":[{"deprecated":false,"description":"A set of boolean values.","experimental":false,"name":"data","optional":false,"schema":{"items":{"type":["boolean","null"]},"type":"array"}},{"default":true,"deprecated":false,"description":"Indicates whether no-data values are ignored or not and ignores them by default.","experimental":false,"name":"ignore_nodata","optional":true,"schema":{"type":"boolean"}}],"process_graph":{},"returns":{"description":"Boolean result of the logical operation.","schema":{"type":["boolean","null"]}},"summary":"Are all of the values true?"},{"categories":["logic"],"deprecated":false,"description":"Checks if **both** values are true.\n\nEvaluates parameter `x` before `y` and stops once the outcome is unambiguous. If any argument is `null`, the result will be `null` if the outcome is ambiguous.\n\n**Truth table:**\n\n```\na \\ b || null  | false | true\n----- || ----- | ----- | -----\nnull  || null  | false | null\nfalse || false | false | false\ntrue  || null  | false | true\n```","examples":[{"arguments":{"x":true,"y":true},"returns":true},{"arguments":{"x":true,"y":false},"returns":false},{"arguments":{"x":false,"y":false},"returns":false},{"arguments":{"x":false,"y":null},"returns":false},{"arguments":{"x":true,"y":null},"returns":null}],"exceptions":{},"experimental":false,"id":"and","parameters":[{"deprecated":false,"description":"A boolean value.","experimental":false,"name":"x","optional":false,"schema":{"type":["boolean","null"]}},{"deprecated":false,"description":"A boolean value.","experimental":false,"name":"y","optional":false,"schema":{"type":["boolean","null"]}}],"process_graph":{"all":{"arguments":{"data":[{"from_parameter":"x"},{"from_parameter":"y"}],"ignore_nodata":false},"process_id":"all","result":true}},"returns":{"description":"Boolean result of the logical AND.","schema":{"type":["boolean","null"]}},"summary":"Logical AND"},{"categories":["logic","reducer"],"deprecated":false,"description":"Checks if **any** (i.e. at least one) value in `data` is `true`. If no value is given (i.e. the array is empty) the process returns `null`.\n\nBy default all no-data values are ignored so that the process returns `null` if all values are no-data, `true` if at least one value is true and `false` otherwise. Setting the `ignore_nodata` flag to `false` takes no-data values into account and the array values are reduced pairwise according to the following truth table:\n\n```\n      || null | false | true\n----- || ---- | ----- | ----\nnull  || null | null  | true\nfalse || null | false | true\ntrue  || true | true  | true\n```\n\n**Remark:** The process evaluates all values from the first to the last element and stops once the outcome is unambiguous. A result is ambiguous unless a value is `true`.","examples":[{"arguments":{"data":[false,null]},"returns":false},{"arguments":{"data":[true,null]},"returns":true},{"arguments":{"data":[false,null],"ignore_nodata":false},"returns":null},{"arguments":{"data":[true,null],"ignore_nodata":false},"returns":true},{"arguments":{"data":[true,false,true,false]},"returns":true},{"arguments":{"data":[true,false]},"returns":true},{"arguments":{"data":[false,false]},"returns":false},{"arguments":{"data":[true]},"returns":true},{"arguments":{"data":[null],"ignore_nodata":false},"returns":null},{"arguments":{"data":[]},"returns":null}],"exceptions":{},"experimental":false,"id":"any","parameters":[{"deprecated":false,"description":"A set of boolean values.","experimental":false,"name":"data","optional":false,"schema":{"items":{"type":["boolean","null"]},"type":"array"}},{"default":true,"deprecated":false,"description":"Indicates whether no-data values are ignored or not and ignores them by default.","experimental":false,"name":"ignore_nodata","optional":true,"schema":{"type":"boolean"}}],"process_graph":{},"returns":{"description":"Boolean result of the logical operation.","schema":{"type":["boolean","null"]}},"summary":"Is at least one value true?"},{"categories":["cubes"],"deprecated":false,"description":"Applies a process to each pixel value in the data cube (i.e. a local operation). In contrast, the process ``apply_dimension()`` applies a process to all pixel values along a particular dimension.","exceptions":{},"experimental":false,"id":"apply","links":[{"href":"https://openeo.org/documentation/1.0/datacubes.html#apply","rel":"about","title":"Apply explained in the openEO documentation"}],"parameters":[{"deprecated":false,"description":"A data cube.","experimental":false,"name":"data","optional":false,"schema":{"subtype":"raster-cube","type":"object"}},{"deprecated":false,"description":"A process that accepts and returns a single value and is applied on each individual value in the data cube. The process may consist of multiple sub-processes and could, for example, consist of processes such as ``abs()`` or ``linear_scale_range()``.","experimental":false,"name":"process","optional":false,"schema":{"parameters":[{"deprecated":false,"description":"The value to process.","experimental":false,"name":"x","optional":false,"schema":{"description":"Any data type."}},{"deprecated":false,"description":"Additional data passed by the user.","experimental":false,"name":"context","optional":true,"schema":{"description":"Any data type."}}],"returns":{"description":"The value to be set in the new data cube.","schema":{"description":"Any data type."}},"subtype":"process-graph","type":"object"}},{"deprecated":false,"description":"Additional data to be passed to the process.","experimental":false,"name":"context","optional":true,"schema":{"description":"Any data type."}}],"process_graph":{},"returns":{"description":"A data cube with the newly computed values and the same dimensions. The dimension properties (name, type, labels, reference system and resolution) remain unchanged.","schema":{"subtype":"raster-cube","type":"object"}},"summary":"Apply a process to each pixel"},{"categories":["math > trigonometric"],"deprecated":false,"description":"Computes the arc cosine of `x`. The arc cosine is the inverse function of the cosine so that *`arccos(cos(x)) = x`*.\n\nWorks on radians only.\nThe no-data value `null` is passed through and therefore gets propagated.","examples":[{"arguments":{"x":1},"returns":0}],"exceptions":{},"experimental":false,"id":"arccos","links":[{"href":"http://mathworld.wolfram.com/InverseCosine.html","rel":"about","title":"Inverse cosine explained by Wolfram MathWorld"}],"parameters":[{"deprecated":false,"description":"A number.","experimental":false,"name":"x","optional":false,"schema":{"type":["number","null"]}}],"process_graph":{},"returns":{"description":"The computed angle in radians.","schema":{"type":["number","null"]}},"summary":"Inverse cosine"},{"categories":["math > trigonometric"],"deprecated":false,"description":"Computes the inverse hyperbolic cosine of `x`. It is the inverse function of the hyperbolic cosine so that *`arcosh(cosh(x)) = x`*.\n\nWorks on radians only.\nThe no-data value `null` is passed through and therefore gets propagated.","examples":[{"arguments":{"x":1},"returns":0}],"exceptions":{},"experimental":false,"id":"arcosh","links":[{"href":"http://mathworld.wolfram.com/InverseHyperbolicCosine.html","rel":"about","title":"Inverse hyperbolic cosine explained by Wolfram MathWorld"}],"parameters":[{"deprecated":false,"description":"A number.","experimental":false,"name":"x","optional":false,"schema":{"type":["number","null"]}}],"process_graph":{},"returns":{"description":"The computed angle in radians.","schema":{"type":["number","null"]}},"summary":"Inverse hyperbolic cosine"},{"categories":["math > trigonometric"],"deprecated":false,"description":"Computes the arc sine of `x`. The arc sine is the inverse function of the sine so that *`arcsin(sin(x)) = x`*.\n\nWorks on radians only.\nThe no-data value `null` is passed through and therefore gets propagated.","examples":[{"arguments":{"x":0},"returns":0}],"exceptions":{},"experimental":false,"id":"arcsin","links":[{"href":"http://mathworld.wolfram.com/InverseSine.html","rel":"about","title":"Inverse sine explained by Wolfram MathWorld"}],"parameters":[{"deprecated":false,"description":"A number.","experimental":false,"name":"x","optional":false,"schema":{"type":["number","null"]}}],"process_graph":{},"returns":{"description":"The computed angle in radians.","schema":{"type":["number","null"]}},"summary":"Inverse sine"},{"categories":["math > trigonometric"],"deprecated":false,"description":"Computes the arc tangent of `x`. The arc tangent is the inverse function of the tangent so that *`arctan(tan(x)) = x`*.\n\nWorks on radians only.\nThe no-data value `null` is passed through and therefore gets propagated.","examples":[{"arguments":{"x":0},"returns":0}],"exceptions":{},"experimental":false,"id":"arctan","links":[{"href":"http://mathworld.wolfram.com/InverseTangent.html","rel":"about","title":"Inverse tangent explained by Wolfram MathWorld"}],"parameters":[{"deprecated":false,"description":"A number.","experimental":false,"name":"x","optional":false,"schema":{"type":["number","null"]}}],"process_graph":{},"returns":{"description":"The computed angle in radians.","schema":{"type":["number","null"]}},"summary":"Inverse tangent"},{"categories":["math > trigonometric"],"deprecated":false,"description":"Computes the arc tangent of two numbers `x` and `y`. It is similar to calculating the arc tangent of *`y / x`*, except that the signs of both arguments are used to determine the quadrant of the result.\n\nWorks on radians only.\nThe no-data value `null` is passed through and therefore gets propagated if any of the arguments is `null`.","examples":[{"arguments":{"x":0,"y":0},"returns":0},{"arguments":{"x":1.5,"y":null},"returns":null}],"exceptions":{},"experimental":false,"id":"arctan2","links":[{"href":"https://en.wikipedia.org/wiki/Atan2","rel":"about","title":"Two-argument inverse tangent explained by Wikipedia"}],"parameters":[{"deprecated":false,"description":"A number to be used as the dividend.","experimental":false,"name":"y","optional":false,"schema":{"type":["number","null"]}},{"deprecated":false,"description":"A number to be used as the divisor.","experimental":false,"name":"x","optional":false,"schema":{"type":["number","null"]}}],"process_graph":{},"returns":{"description":"The computed angle in radians.","schema":{"type":["number","null"]}},"summary":"Inverse tangent of two numbers"},{"categories":["arrays"],"deprecated":false,"description":"Applies a process to each individual value in the array. This is basically what other languages call either a `for each` loop or a `map` function.","exceptions":{},"experimental":false,"id":"array_apply","links":[{"href":"https://processes.openeo.org/1.1.0/examples/array_find_nodata.json","rel":"example","title":"Find no-data values in arrays","type":"application/json"},{"href":"https://processes.openeo.org/1.1.0/examples/array_contains_nodata.json","rel":"example","title":"Check for no-data values in arrays","type":"application/json"}],"parameters":[{"deprecated":false,"description":"An array.","experimental":false,"name":"data","optional":false,"schema":{"items":{"description":"Any data type is allowed."},"type":"array"}},{"deprecated":false,"description":"A process that accepts and returns a single value and is applied on each individual value in the array. The process may consist of multiple sub-processes and could, for example, consist of processes such as ``abs()`` or ``linear_scale_range()``.","experimental":false,"name":"process","optional":false,"schema":{"parameters":[{"deprecated":false,"description":"The value of the current element being processed.","experimental":false,"name":"x","optional":false,"schema":{"description":"Any data type."}},{"deprecated":false,"description":"The zero-based index of the current element being processed.","experimental":false,"name":"index","optional":false,"schema":{"minimum":0.0,"type":"integer"}},{"deprecated":false,"description":"The label of the current element being processed. Only populated for labeled arrays.","experimental":false,"name":"label","optional":true,"schema":[{"type":"number"},{"type":"string"},{"type":"null"}]},{"deprecated":false,"description":"Additional data passed by the user.","experimental":false,"name":"context","optional":true,"schema":{"description":"Any data type."}}],"returns":{"description":"The value to be set in the new array.","schema":{"description":"Any data type."}},"subtype":"process-graph","type":"object"}},{"deprecated":false,"description":"Additional data to be passed to the process.","experimental":false,"name":"context","optional":true,"schema":{"description":"Any data type."}}],"process_graph":{},"returns":{"description":"An array with the newly computed values. The number of elements are the same as for the original array.","schema":{"items":{"description":"Any data type is allowed."},"type":"array"}},"summary":"Apply a process to each array element"},{"categories":["arrays","comparison","reducer"],"deprecated":false,"description":"Checks whether the array specified for `data` contains the value specified in `value`. Returns `true` if there's a match, otherwise `false`.\n\n**Remarks:**\n\n* To get the index or the label of the value found, use ``array_find()``.\n* All definitions for the process ``eq()`` regarding the comparison of values apply here as well. A `null` return value from ``eq()`` is handled exactly as `false` (no match).\n* Data types MUST be checked strictly. For example, a string with the content *1* is not equal to the number *1*.\n* An integer *1* is equal to a floating-point number *1.0* as `integer` is a sub-type of `number`. Still, this process may return unexpectedly `false` when comparing floating-point numbers due to floating-point inaccuracy in machine-based computation.\n* Temporal strings are treated as normal strings and MUST NOT be interpreted.\n* If the specified value is an array, object or null, the process always returns `false`. See the examples for one to check for `null` values.","examples":[{"arguments":{"data":[1,2,3],"value":2},"returns":true},{"arguments":{"data":["A","B","C"],"value":"b"},"returns":false},{"arguments":{"data":[1,2,3],"value":"2"},"returns":false},{"arguments":{"data":[1,2,null],"value":null},"returns":true},{"arguments":{"data":[[1,2],[3,4]],"value":[1,2]},"returns":false},{"arguments":{"data":[[1,2],[3,4]],"value":2},"returns":false},{"arguments":{"data":[{"a":"b"},{"c":"d"}],"value":{"a":"b"}},"returns":false}],"exceptions":{},"experimental":false,"id":"array_contains","links":[{"href":"https://processes.openeo.org/1.1.0/examples/array_contains_nodata.json","rel":"example","title":"Check for no-data values in arrays","type":"application/json"}],"parameters":[{"deprecated":false,"description":"List to find the value in.","experimental":false,"name":"data","optional":false,"schema":{"items":{"description":"Any data type is allowed."},"type":"array"}},{"deprecated":false,"description":"Value to find in `data`.","experimental":false,"name":"value","optional":false,"schema":{"description":"Any data type is allowed."}}],"process_graph":{"find":{"arguments":{"data":{"from_parameter":"data"},"value":{"from_parameter":"value"}},"process_id":"array_find"},"is_nodata":{"arguments":{"x":{"from_node":"find"}},"process_id":"is_nodata"},"not":{"arguments":{"x":{"from_node":"is_nodata"}},"process_id":"not","result":true}},"returns":{"description":"`true` if the list contains the value, false` otherwise.","schema":{"type":"boolean"}},"summary":"Check whether the array contains a given value"},{"categories":["arrays","reducer"],"deprecated":false,"description":"Gives the element with the specified index or label from the array.\n\nEither the parameter `index` or `label` must be specified, otherwise the `ArrayElementParameterMissing` exception is thrown. If both parameters are set the `ArrayElementParameterConflict` exception is thrown.","examples":[{"arguments":{"data":[9,8,7,6,5],"index":2},"returns":7},{"arguments":{"data":["A","B","C"],"index":0},"returns":"A"},{"arguments":{"data":[],"index":0,"return_nodata":true},"returns":null}],"exceptions":{"ArrayElementNotAvailable":{"http":400,"message":"The array has no element with the specified index or label."},"ArrayElementParameterConflict":{"http":400,"message":"The process `array_element` only allows that either the `index` or the `labels` parameter is set."},"ArrayElementParameterMissing":{"http":400,"message":"The process `array_element` requires either the `index` or `labels` parameter to be set."},"ArrayNotLabeled":{"http":400,"message":"The array is not a labeled array, but the `label` parameter is set. Use the `index` instead."}},"experimental":false,"id":"array_element","parameters":[{"deprecated":false,"description":"An array.","experimental":false,"name":"data","optional":false,"schema":{"items":{"description":"Any data type is allowed."},"type":"array"}},{"deprecated":false,"description":"The zero-based index of the element to retrieve.","experimental":false,"name":"index","optional":true,"schema":{"minimum":0.0,"type":"integer"}},{"deprecated":false,"description":"The label of the element to retrieve. Throws an `ArrayNotLabeled` exception, if the given array is not a labeled array and this parameter is set.","experimental":false,"name":"label","optional":true,"schema":[{"type":"number"},{"type":"string"}]},{"default":false,"deprecated":false,"description":"By default this process throws an `ArrayElementNotAvailable` exception if the index or label is invalid. If you want to return `null` instead, set this flag to `true`.","experimental":false,"name":"return_nodata","optional":true,"schema":{"type":"boolean"}}],"process_graph":{},"returns":{"description":"The value of the requested element.","schema":{"description":"Any data type is allowed."}},"summary":"Get an element from an array"},{"categories":["arrays","filter"],"deprecated":false,"description":"Filters the array elements based on a logical expression so that afterwards an array is returned that only contains the values, indices and/or labels conforming to the condition.","exceptions":{},"experimental":false,"id":"array_filter","parameters":[{"deprecated":false,"description":"An array.","experimental":false,"name":"data","optional":false,"schema":{"items":{"description":"Any data type is allowed."},"type":"array"}},{"deprecated":false,"description":"A condition that is evaluated against each value, index and/or label in the array. Only the array elements for which the condition returns `true` are preserved.","experimental":false,"name":"condition","optional":false,"schema":{"parameters":[{"deprecated":false,"description":"The value of the current element being processed.","experimental":false,"name":"x","optional":false,"schema":{"description":"Any data type."}},{"deprecated":false,"description":"The zero-based index of the current element being processed.","experimental":false,"name":"index","optional":false,"schema":{"minimum":0.0,"type":"integer"}},{"deprecated":false,"description":"The label of the current element being processed. Only populated for labeled arrays.","experimental":false,"name":"label","optional":true,"schema":[{"type":"number"},{"type":"string"},{"type":"null"}]},{"deprecated":false,"description":"Additional data passed by the user.","experimental":false,"name":"context","optional":true,"schema":{"description":"Any data type."}}],"returns":{"description":"`true` if the value should be kept in the array, otherwise `false`.","schema":{"type":"boolean"}},"subtype":"process-graph","type":"object"}},{"deprecated":false,"description":"Additional data to be passed to the condition.","experimental":false,"name":"context","optional":true,"schema":{"description":"Any data type."}}],"process_graph":{},"returns":{"description":"An array filtered by the specified condition. The number of elements are less than or equal compared to the original array.","schema":{"items":{"description":"Any data type is allowed."},"type":"array"}},"summary":"Filter an array based on a condition"},{"categories":["arrays","reducer"],"deprecated":false,"description":"Checks whether the array specified for `data` contains the value specified in `value` and returns the zero-based index for the first match. If there's no match, `null` is returned.\n\n**Remarks:**\n\n* To get a boolean value returned use ``array_contains()``.\n* All definitions for the process ``eq()`` regarding the comparison of values apply here as well. A `null` return value from ``eq()`` is handled exactly as `false` (no match).\n* Data types MUST be checked strictly. For example, a string with the content *1* is not equal to the number *1*.\n* An integer *1* is equal to a floating-point number *1.0* as `integer` is a sub-type of `number`. Still, this process may return unexpectedly `false` when comparing floating-point numbers due to floating-point inaccuracy in machine-based computation.\n* Temporal strings are treated as normal strings and MUST NOT be interpreted.\n* If the specified value is an array, object or null, the process always returns `null`. See the examples for one to find `null` values.","examples":[{"arguments":{"data":[1,2,3],"value":2},"returns":1},{"arguments":{"data":["A","B","C"],"value":"b"},"returns":null},{"arguments":{"data":[1,2,3],"value":"2"},"returns":null},{"arguments":{"data":[1,null,2,null],"value":null},"returns":1},{"arguments":{"data":[[1,2],[3,4]],"value":[1,2]},"returns":null},{"arguments":{"data":[[1,2],[3,4]],"value":2},"returns":null},{"arguments":{"data":[{"a":"b"},{"c":"d"}],"value":{"a":"b"}},"returns":null}],"exceptions":{},"experimental":false,"id":"array_find","links":[{"href":"https://processes.openeo.org/1.1.0/examples/array_find_nodata.json","rel":"example","title":"Find no-data values in arrays","type":"application/json"}],"parameters":[{"deprecated":false,"description":"List to find the value in.","experimental":false,"name":"data","optional":false,"schema":{"items":{"description":"Any data type is allowed."},"type":"array"}},{"deprecated":false,"description":"Value to find in `data`.","experimental":false,"name":"value","optional":false,"schema":{"description":"Any data type is allowed."}}],"process_graph":{},"returns":{"description":"The index of the first element with the specified value. If no element was found, `null` is returned.","schema":[{"type":"null"},{"minimum":0.0,"type":"integer"}]},"summary":"Get the index for a value in an array"},{"categories":["cubes","math > image filter"],"deprecated":false,"description":"Applies a 2D convolution (i.e. a focal operation with a weighted kernel) on the horizontal spatial dimensions (axes `x` and `y`) of the data cube.\n\nEach value in the kernel is multiplied with the corresponding pixel value and all products are summed up afterwards. The sum is then multiplied with the factor.\n\nThe process can't handle non-numerical or infinite numerical values in the data cube. Boolean values are converted to integers (`false` = 0, `true` = 1), but all other non-numerical or infinite values are replaced with zeroes by default (see parameter `replace_invalid`).\n\nFor cases requiring more generic focal operations or non-numerical values, see ``apply_neighborhood()``.","exceptions":{"KernelDimensionsUneven":{"http":400,"message":"Each dimension of the kernel must have an uneven number of elements."}},"experimental":false,"id":"apply_kernel","links":[{"href":"https://openeo.org/documentation/1.0/datacubes.html#apply","rel":"about","title":"Apply explained in the openEO documentation"},{"href":"http://www.songho.ca/dsp/convolution/convolution.html","rel":"about","title":"Convolutions explained"},{"href":"http://www.songho.ca/dsp/convolution/convolution2d_example.html","rel":"about","title":"Example of 2D Convolution"}],"parameters":[{"deprecated":false,"description":"A data cube.","experimental":false,"name":"data","optional":false,"schema":{"subtype":"raster-cube","type":"object"}},{"deprecated":false,"description":"Kernel as a two-dimensional array of weights. The inner level of the nested array aligns with the `x` axis and the outer level aligns with the `y` axis. Each level of the kernel must have an uneven number of elements, otherwise the process throws a `KernelDimensionsUneven` exception.","experimental":false,"name":"kernel","optional":false,"schema":{"description":"A two-dimensional array of numbers.","items":{"items":{"type":"number"},"type":"array"},"subtype":"kernel","type":"array"}},{"default":1,"deprecated":false,"description":"A factor that is multiplied to each value after the kernel has been applied.\n\nThis is basically a shortcut for explicitly multiplying each value by a factor afterwards, which is often required for some kernel-based algorithms such as the Gaussian blur.","experimental":false,"name":"factor","optional":true,"schema":{"type":"number"}},{"default":0,"deprecated":false,"description":"Determines how the data is extended when the kernel overlaps with the borders. Defaults to fill the border with zeroes.\n\nThe following options are available:\n\n* *numeric value* - fill with a user-defined constant number `n`: `nnnnnn|abcdefgh|nnnnnn` (default, with `n` = 0)\n* `replicate` - repeat the value from the pixel at the border: `aaaaaa|abcdefgh|hhhhhh`\n* `reflect` - mirror/reflect from the border: `fedcba|abcdefgh|hgfedc`\n* `reflect_pixel` - mirror/reflect from the center of the pixel at the border: `gfedcb|abcdefgh|gfedcb`\n* `wrap` - repeat/wrap the image: `cdefgh|abcdefgh|abcdef`","experimental":false,"name":"border","optional":true,"schema":[{"enum":["replicate","reflect","reflect_pixel","wrap"],"type":"string"},{"type":"number"}]},{"default":0,"deprecated":false,"description":"This parameter specifies the value to replace non-numerical or infinite numerical values with. By default, those values are replaced with zeroes.","experimental":false,"name":"replace_invalid","optional":true,"schema":{"type":"number"}}],"process_graph":{},"returns":{"description":"A data cube with the newly computed values and the same dimensions. The dimension properties (name, type, labels, reference system and resolution) remain unchanged.","schema":{"subtype":"raster-cube","type":"object"}},"summary":"Apply a spatial convolution with a kernel"},{"categories":["arrays"],"deprecated":false,"description":"Gives all labels for a labeled array. The labels have the same order as in the array.","exceptions":{},"experimental":false,"id":"array_labels","parameters":[{"deprecated":false,"description":"An array with labels.","experimental":false,"name":"data","optional":false,"schema":{"items":{"description":"Any data type."},"subtype":"labeled-array","type":"array"}}],"process_graph":{},"returns":{"description":"The labels as an array.","schema":{"items":{"type":["number","string"]},"type":"array"}},"summary":"Get the labels for an array"},{"categories":["math > trigonometric"],"deprecated":false,"description":"Computes the inverse hyperbolic sine of `x`. It is the inverse function of the hyperbolic sine so that *`arsinh(sinh(x)) = x`*.\n\nWorks on radians only.\nThe no-data value `null` is passed through and therefore gets propagated.","examples":[{"arguments":{"x":0},"returns":0}],"exceptions":{},"experimental":false,"id":"arsinh","links":[{"href":"http://mathworld.wolfram.com/InverseHyperbolicSine.html","rel":"about","title":"Inverse hyperbolic sine explained by Wolfram MathWorld"}],"parameters":[{"deprecated":false,"description":"A number.","experimental":false,"name":"x","optional":false,"schema":{"type":["number","null"]}}],"process_graph":{},"returns":{"description":"The computed angle in radians.","schema":{"type":["number","null"]}},"summary":"Inverse hyperbolic sine"},{"categories":["math > trigonometric"],"deprecated":false,"description":"Computes the inverse hyperbolic tangent of `x`. It is the inverse function of the hyperbolic tangent so that *`artanh(tanh(x)) = x`*.\n\nWorks on radians only.\nThe no-data value `null` is passed through and therefore gets propagated.","examples":[{"arguments":{"x":0},"returns":0}],"exceptions":{},"experimental":false,"id":"artanh","links":[{"href":"http://mathworld.wolfram.com/InverseHyperbolicTangent.html","rel":"about","title":"Inverse hyperbolic tangent explained by Wolfram MathWorld"}],"parameters":[{"deprecated":false,"description":"A number.","experimental":false,"name":"x","optional":false,"schema":{"type":["number","null"]}}],"process_graph":{},"returns":{"description":"The computed angle in radians.","schema":{"type":["number","null"]}},"summary":"Inverse hyperbolic tangent"},{"categories":["comparison"],"deprecated":false,"description":"By default, this process checks whether `x` is greater than or equal to `min` and lower than or equal to `max`, which is the same as computing `and(gte(x, min), lte(x, max))`. Therefore, all definitions from ``and()``, ``gte()`` and ``lte()`` apply here as well.\n\nIf `exclude_max` is set to `true` the upper bound is excluded so that the process checks whether `x` is greater than or equal to `min` and lower than `max`. In this case, the process works the same as computing `and(gte(x, min), lt(x, max))`.\n\nLower and upper bounds are not allowed to be swapped. So `min` MUST be lower than or equal to `max` or otherwise the process always returns `false`.","examples":[{"arguments":{"max":1,"min":0,"x":null},"returns":null},{"arguments":{"max":1,"min":0,"x":1},"returns":true},{"arguments":{"exclude_max":true,"max":1,"min":0,"x":1},"returns":false},{"arguments":{"max":0,"min":1,"x":0.5},"description":"Swapped bounds (min is greater than max) MUST always return `false`.","returns":false},{"arguments":{"max":0,"min":-1,"x":-0.5},"returns":true},{"arguments":{"max":"01:00:00Z","min":"01:00:00+01:00","x":"00:59:59Z"},"returns":true},{"arguments":{"max":"2018-12-31T23:59:59Z","min":"2018-01-01T00:00:00Z","x":"2018-07-23T17:22:45Z"},"returns":true},{"arguments":{"max":"2020-01-01","min":"2018-01-01","x":"2000-01-01"},"returns":false},{"arguments":{"max":"2018-12-31","min":"2018-01-01","x":"2018-12-31T17:22:45Z"},"returns":true},{"arguments":{"exclude_max":true,"max":"2018-12-31","min":"2018-01-01","x":"2018-12-31T17:22:45Z"},"returns":false}],"exceptions":{},"experimental":false,"id":"between","parameters":[{"deprecated":false,"description":"The value to check.","experimental":false,"name":"x","optional":false,"schema":{"description":"Any data type is allowed."}},{"deprecated":false,"description":"Lower boundary (inclusive) to check against.","experimental":false,"name":"min","optional":false,"schema":[{"type":"number"},{"format":"date-time","subtype":"date-time","type":"string"},{"format":"date","subtype":"date","type":"string"},{"format":"time","subtype":"time","type":"string"}]},{"deprecated":false,"description":"Upper boundary (inclusive) to check against.","experimental":false,"name":"max","optional":false,"schema":[{"type":"number"},{"format":"date-time","subtype":"date-time","type":"string"},{"format":"date","subtype":"date","type":"string"},{"format":"time","subtype":"time","type":"string"}]},{"default":false,"deprecated":false,"description":"Exclude the upper boundary `max` if set to `true`. Defaults to `false`.","experimental":false,"name":"exclude_max","optional":true,"schema":{"type":"boolean"}}],"process_graph":{"and":{"arguments":{"x":{"from_node":"gte"},"y":{"from_node":"if"}},"process_id":"and","result":true},"gte":{"arguments":{"x":{"from_parameter":"x"},"y":{"from_parameter":"min"}},"process_id":"gte"},"if":{"arguments":{"accept":{"from_node":"lte"},"reject":{"from_node":"lt"},"value":{"from_parameter":"exclude_max"}},"process_id":"if"},"lt":{"arguments":{"x":{"from_parameter":"x"},"y":{"from_parameter":"max"}},"process_id":"lt"},"lte":{"arguments":{"x":{"from_parameter":"x"},"y":{"from_parameter":"max"}},"process_id":"lte"}},"returns":{"description":"`true` if `x` is between the specified bounds, otherwise `false`.","schema":{"type":["boolean","null"]}},"summary":"Between comparison"},{"categories":["math > rounding"],"deprecated":false,"description":"The least integer greater than or equal to the number `x`.\n\nThe no-data value `null` is passed through and therefore gets propagated.","examples":[{"arguments":{"x":0},"returns":0},{"arguments":{"x":3.5},"returns":4},{"arguments":{"x":-0.4},"returns":0},{"arguments":{"x":-3.5},"returns":-3}],"exceptions":{},"experimental":false,"id":"ceil","links":[{"href":"http://mathworld.wolfram.com/CeilingFunction.html","rel":"about","title":"Ceiling explained by Wolfram MathWorld"}],"parameters":[{"deprecated":false,"description":"A number to round up.","experimental":false,"name":"x","optional":false,"schema":{"type":["number","null"]}}],"process_graph":{},"returns":{"description":"The number rounded up.","schema":{"type":["integer","null"]}},"summary":"Round fractions up"},{"categories":["math"],"deprecated":false,"description":"Clips a number between specified minimum and maximum values. A value larger than the maximum value is set to the maximum value, a value lower than the minimum value is set to the minimum value.\n\nThe no-data value `null` is passed through and therefore gets propagated.","examples":[{"arguments":{"max":1,"min":-1,"x":-5},"returns":-1},{"arguments":{"max":10,"min":1,"x":10.001},"returns":10},{"arguments":{"max":0.02,"min":0,"x":1e-06},"returns":1e-06},{"arguments":{"max":1,"min":0,"x":null},"returns":null}],"exceptions":{},"experimental":false,"id":"clip","parameters":[{"deprecated":false,"description":"A number.","experimental":false,"name":"x","optional":false,"schema":{"type":["number","null"]}},{"deprecated":false,"description":"Minimum value. If the value is lower than this value, the process will return the value of this parameter.","experimental":false,"name":"min","optional":false,"schema":{"type":"number"}},{"deprecated":false,"description":"Maximum value. If the value is greater than this value, the process will return the value of this parameter.","experimental":false,"name":"max","optional":false,"schema":{"type":"number"}}],"process_graph":{"max":{"arguments":{"data":[{"from_parameter":"min"},{"from_node":"min"}]},"process_id":"max","result":true},"min":{"arguments":{"data":[{"from_parameter":"max"},{"from_parameter":"x"}]},"process_id":"min"}},"returns":{"description":"The value clipped to the specified range.","schema":{"type":["number","null"]}},"summary":"Clip a value between a minimum and a maximum"},{"categories":["math > trigonometric"],"deprecated":false,"description":"Computes the cosine of `x`.\n\nWorks on radians only.\nThe no-data value `null` is passed through and therefore gets propagated.","examples":[{"arguments":{"x":0},"returns":1}],"exceptions":{},"experimental":false,"id":"cos","links":[{"href":"http://mathworld.wolfram.com/Cosine.html","rel":"about","title":"Cosine explained by Wolfram MathWorld"}],"parameters":[{"deprecated":false,"description":"An angle in radians.","experimental":false,"name":"x","optional":false,"schema":{"type":["number","null"]}}],"process_graph":{},"returns":{"description":"The computed cosine of `x`.","schema":{"type":["number","null"]}},"summary":"Cosine"},{"categories":["math > trigonometric"],"deprecated":false,"description":"Computes the hyperbolic cosine of `x`.\n\nWorks on radians only.\nThe no-data value `null` is passed through and therefore gets propagated.","examples":[{"arguments":{"x":0},"returns":1}],"exceptions":{},"experimental":false,"id":"cosh","links":[{"href":"http://mathworld.wolfram.com/HyperbolicCosine.html","rel":"about","title":"Hyperbolic cosine explained by Wolfram MathWorld"}],"parameters":[{"deprecated":false,"description":"An angle in radians.","experimental":false,"name":"x","optional":false,"schema":{"type":["number","null"]}}],"process_graph":{},"returns":{"description":"The computed hyperbolic cosine of `x`.","schema":{"type":["number","null"]}},"summary":"Hyperbolic cosine"},{"categories":["arrays","reducer"],"deprecated":false,"description":"Gives the number of elements in an array that matches the specified condition.\n\n**Remarks:**\n\n* Counts the number of valid elements by default (`condition` is set to `null`). A valid element is every element for which ``is_valid()`` returns `true`.\n* To count all elements in a list set the `condition` parameter to boolean `true`.","examples":[{"arguments":{"data":[]},"returns":0},{"arguments":{"data":[1,0,3,2]},"returns":4},{"arguments":{"data":["ABC",null]},"returns":1},{"arguments":{"condition":true,"data":[false,null]},"returns":2},{"arguments":{"condition":{"gt":{"arguments":{"x":{"from_parameter":"element"},"y":2},"process_id":"gt","result":true}},"data":[0,1,2,3,4,5,null]},"returns":3}],"exceptions":{},"experimental":false,"id":"count","parameters":[{"deprecated":false,"description":"An array with elements of any data type.","experimental":false,"name":"data","optional":false,"schema":{"items":{"description":"Any data type is allowed."},"type":"array"}},{"deprecated":false,"description":"A condition consists of one or more processes, which in the end return a boolean value. It is evaluated against each element in the array. An element is counted only if the condition returns `true`. Defaults to count valid elements in a list (see ``is_valid()``). Setting this parameter to boolean `true` counts all elements in the list.","experimental":false,"name":"condition","optional":true,"schema":[{"description":"A logical expression that is evaluated against each element in the array.","parameters":[{"deprecated":false,"description":"The value of the current element being processed.","experimental":false,"name":"x","optional":false,"schema":{"description":"Any data type."}},{"deprecated":false,"description":"Additional data passed by the user.","experimental":false,"name":"context","optional":true,"schema":{"description":"Any data type."}}],"returns":{"description":"`true` if the element should increase the counter, otherwise `false`.","schema":{"type":"boolean"}},"subtype":"process-graph","title":"Condition","type":"object"},{"const":true,"description":"Boolean `true` counts all elements in the list.","title":"All elements","type":"boolean"},{"description":"`null` counts valid elements in the list.","title":"Valid elements","type":"null"}]},{"deprecated":false,"description":"Additional data to be passed to the condition.","experimental":false,"name":"context","optional":true,"schema":{"description":"Any data type."}}],"process_graph":{},"returns":{"description":"The counted number of elements.","schema":{"type":"number"}},"summary":"Count the number of elements"},{"categories":["cubes"],"deprecated":false,"description":"Creates a new raster data cube without dimensions. Dimensions can be added with ``add_dimension()``.","exceptions":{},"experimental":false,"id":"create_raster_cube","links":[{"href":"https://openeo.org/documentation/1.0/datacubes.html","rel":"about","title":"Data Cubes explained in the openEO documentation"}],"parameters":[],"process_graph":{},"returns":{"description":"An empty raster data cube with zero dimensions.","schema":{"subtype":"raster-cube","type":"object"}},"summary":"Create an empty raster data cube"},{"categories":["cubes"],"deprecated":false,"description":"Gives all labels for a dimension in the data cube. The labels have the same order as in the data cube.\n\nIf a dimension with the specified name does not exist, the process fails with a `DimensionNotAvailable` exception.","exceptions":{"DimensionNotAvailable":{"http":400,"message":"A dimension with the specified name does not exist."}},"experimental":false,"id":"dimension_labels","parameters":[{"deprecated":false,"description":"The data cube.","experimental":false,"name":"data","optional":false,"schema":{"subtype":"raster-cube","type":"object"}},{"deprecated":false,"description":"The name of the dimension to get the labels for.","experimental":false,"name":"dimension","optional":false,"schema":{"type":"string"}}],"process_graph":{},"returns":{"description":"The labels as an array.","schema":{"items":{"type":["number","string"]},"type":"array"}},"summary":"Get the dimension labels"},{"categories":["math"],"deprecated":false,"description":"Divides argument `x` by the argument `y` (*`x / y`*) and returns the computed result.\n\nNo-data values are taken into account so that `null` is returned if any element is such a value.\n\nThe computations follow [IEEE Standard 754](https://ieeexplore.ieee.org/document/8766229) whenever the processing environment supports it. Therefore, a division by zero results in \u00b1infinity if the processing environment supports it. Otherwise, a `DivisionByZero` exception must the thrown.","examples":[{"arguments":{"x":5,"y":2.5},"returns":2},{"arguments":{"x":-2,"y":4},"returns":-0.5},{"arguments":{"x":1,"y":null},"returns":null}],"exceptions":{"DivisionByZero":{"http":400,"message":"Division by zero is not supported."}},"experimental":false,"id":"divide","links":[{"href":"http://mathworld.wolfram.com/Division.html","rel":"about","title":"Division explained by Wolfram MathWorld"},{"href":"https://ieeexplore.ieee.org/document/8766229","rel":"about","title":"IEEE Standard 754-2019 for Floating-Point Arithmetic"}],"parameters":[{"deprecated":false,"description":"The dividend.","experimental":false,"name":"x","optional":false,"schema":{"type":["number","null"]}},{"deprecated":false,"description":"The divisor.","experimental":false,"name":"y","optional":false,"schema":{"type":["number","null"]}}],"process_graph":{},"returns":{"description":"The computed result.","schema":{"type":["number","null"]}},"summary":"Division of two numbers"},{"categories":["cubes"],"deprecated":false,"description":"Drops a dimension from the data cube.\n\nDropping a dimension only works on dimensions with a single dimension label left, otherwise the process fails with a `DimensionLabelCountMismatch` exception. Dimension values can be reduced to a single value with a filter such as ``filter_bands()`` or the ``reduce_dimension()`` process. If a dimension with the specified name does not exist, the process fails with a `DimensionNotAvailable` exception.","exceptions":{"DimensionLabelCountMismatch":{"http":400,"message":"The number of dimension labels exceeds one, which requires a reducer."},"DimensionNotAvailable":{"http":400,"message":"A dimension with the specified name does not exist."}},"experimental":false,"id":"drop_dimension","parameters":[{"deprecated":false,"description":"The data cube to drop a dimension from.","experimental":false,"name":"data","optional":false,"schema":{"subtype":"raster-cube","type":"object"}},{"deprecated":false,"description":"Name of the dimension to drop.","experimental":false,"name":"name","optional":false,"schema":{"type":"string"}}],"process_graph":{},"returns":{"description":"A data cube without the specified dimension. The number of dimensions decreases by one, but the dimension properties (name, type, labels, reference system and resolution) for all other dimensions remain unchanged.","schema":{"subtype":"raster-cube","type":"object"}},"summary":"Remove a dimension"},{"categories":["math > constants","math > exponential & logarithmic"],"deprecated":false,"description":"The real number *e* is a mathematical constant that is the base of the natural logarithm such that *`ln(e) = 1`*. The numerical value is approximately *2.71828*.","exceptions":{},"experimental":false,"id":"e","links":[{"href":"http://mathworld.wolfram.com/e.html","rel":"about","title":"Mathematical constant e explained by Wolfram MathWorld"}],"parameters":[],"process_graph":{},"returns":{"description":"The numerical value of Euler's number.","schema":{"type":"number"}},"summary":"Euler's number (e)"},{"categories":["texts","comparison"],"deprecated":false,"description":"Compares whether `x` is strictly equal to `y`.\n\n**Remarks:**\n\n* Data types MUST be checked strictly. For example, a string with the content *1* is not equal to the number *1*. Nevertheless, an integer *1* is equal to a floating-point number *1.0* as `integer` is a sub-type of `number`.\n* If any operand is `null`, the return value is `null`. Therefore, `eq(null, null)` returns `null` instead of `true`.\n* If any operand is an array or object, the return value is `false`.\n* Strings are expected to be encoded in UTF-8 by default.\n* Temporal strings MUST be compared differently than other strings and MUST NOT be compared based on their string representation due to different possible representations. For example, the time zone representation `Z` (for UTC) has the same meaning as `+00:00`.","examples":[{"arguments":{"x":1,"y":null},"returns":null},{"arguments":{"x":null,"y":null},"returns":null},{"arguments":{"x":1,"y":1},"returns":true},{"arguments":{"x":1,"y":"1"},"returns":false},{"arguments":{"x":0,"y":false},"returns":false},{"arguments":{"delta":0.01,"x":1.02,"y":1},"returns":false},{"arguments":{"delta":0.01,"x":-1,"y":-1.001},"returns":true},{"arguments":{"delta":10,"x":115,"y":110},"returns":true},{"arguments":{"x":"Test","y":"test"},"returns":false},{"arguments":{"case_sensitive":false,"x":"Test","y":"test"},"returns":true},{"arguments":{"case_sensitive":false,"x":"\u00c4","y":"\u00e4"},"returns":true},{"arguments":{"x":"00:00:00+00:00","y":"00:00:00Z"},"returns":true},{"arguments":{"x":"2018-01-01T12:00:00Z","y":"2018-01-01T12:00:00"},"description":"`y` is not a valid date-time representation and therefore will be treated as a string so that the provided values are not equal.","returns":false},{"arguments":{"x":"2018-01-01T00:00:00Z","y":"2018-01-01T01:00:00+01:00"},"description":"01:00 in the time zone +1 is equal to 00:00 in UTC.","returns":true},{"arguments":{"x":[1,2,3],"y":[1,2,3]},"returns":false}],"exceptions":{},"experimental":false,"id":"eq","parameters":[{"deprecated":false,"description":"First operand.","experimental":false,"name":"x","optional":false,"schema":{"description":"Any data type is allowed."}},{"deprecated":false,"description":"Second operand.","experimental":false,"name":"y","optional":false,"schema":{"description":"Any data type is allowed."}},{"deprecated":false,"description":"Only applicable for comparing two numbers. If this optional parameter is set to a positive non-zero number the equality of two numbers is checked against a delta value. This is especially useful to circumvent problems with floating-point inaccuracy in machine-based computation.\n\nThis option is basically an alias for the following computation: `lte(abs(minus([x, y]), delta)`","experimental":false,"name":"delta","optional":true,"schema":{"type":["number","null"]}},{"default":true,"deprecated":false,"description":"Only applicable for comparing two strings. Case sensitive comparison can be disabled by setting this parameter to `false`.","experimental":false,"name":"case_sensitive","optional":true,"schema":{"type":"boolean"}}],"process_graph":{},"returns":{"description":"`true` if `x` is equal to `y`, `null` if any operand is `null`, otherwise `false`.","schema":{"type":["boolean","null"]}},"summary":"Equal to comparison"},{"categories":["math > exponential & logarithmic"],"deprecated":false,"description":"Exponential function to the base *e* raised to the power of `p`.\n\nThe no-data value `null` is passed through and therefore gets propagated.","examples":[{"arguments":{"p":0},"returns":1},{"arguments":{"p":null},"returns":null}],"exceptions":{},"experimental":false,"id":"exp","links":[{"href":"http://mathworld.wolfram.com/ExponentialFunction.html","rel":"about","title":"Exponential function explained by Wolfram MathWorld"}],"parameters":[{"deprecated":false,"description":"The numerical exponent.","experimental":false,"name":"p","optional":false,"schema":{"type":["number","null"]}}],"process_graph":{"e":{"arguments":{},"process_id":"e"},"power":{"arguments":{"base":{"from_node":"e"},"p":{"from_parameter":"p"}},"process_id":"power","result":true}},"returns":{"description":"The computed value for *e* raised to the power of `p`.","schema":{"type":["number","null"]}},"summary":"Exponentiation to the base e"},{"categories":["math"],"deprecated":false,"description":"Two element array containing the minimum and the maximum values of `data`.\n\nThis process is basically an alias for calling both ``min()`` and ``max()``, but may be implemented more performant by back-ends as it only needs to iterate over the data once instead of twice.","examples":[{"arguments":{"data":[1,0,3,2]},"returns":[0,3]},{"arguments":{"data":[5,2.5,null,-0.7]},"returns":[-0.7,5.0]},{"arguments":{"data":[1,0,3,null,2],"ignore_nodata":false},"returns":[null,null]},{"arguments":{"data":[]},"description":"The input array is empty: return two `null` values.","returns":[null,null]}],"exceptions":{},"experimental":false,"id":"extrema","parameters":[{"deprecated":false,"description":"An array of numbers.","experimental":false,"name":"data","optional":false,"schema":{"items":{"type":["number","null"]},"type":"array"}},{"default":true,"deprecated":false,"description":"Indicates whether no-data values are ignored or not. Ignores them by default. Setting this flag to `false` considers no-data values so that an array with two `null` values is returned if any value is such a value.","experimental":false,"name":"ignore_nodata","optional":true,"schema":{"type":"boolean"}}],"process_graph":{},"returns":{"description":"An array containing the minimum and maximum values for the specified numbers. The first element is the minimum, the second element is the maximum. If the input array is empty both elements are set to `null`.","schema":[{"items":{"type":"number"},"maxItems":2.0,"minItems":2.0,"type":"array"},{"items":{"type":"null"},"maxItems":2.0,"minItems":2.0,"type":"array"}]},"summary":"Minimum and maximum values"},{"categories":["cubes","filter"],"deprecated":false,"description":"Filters the bands in the data cube so that bands that don't match any of the criteria are dropped from the data cube. The data cube is expected to have only one dimension of type `bands`. Fails with a `DimensionMissing` exception if no such dimension exists.\n\nThe following criteria can be used to select bands:\n\n* `bands`: band name or common band name (e.g. `B01`, `B8A`, `red` or `nir`)\n* `wavelengths`: ranges of wavelengths in micrometers (\u03bcm) (e.g. 0.5 - 0.6)\n\nAll these information are exposed in the band metadata of the collection. To keep algorithms interoperable it is recommended to prefer the common band names or the wavelengths over band names that are specific to the collection and/or back-end.\n\nIf multiple criteria are specified, any of them must match and not all of them, i.e. they are combined with an OR-operation. If no criteria are specified, the `BandFilterParameterMissing` exception must be thrown.\n\n**Important:** The order of the specified array defines the order of the bands in the data cube, which can be important for subsequent processes. If multiple bands are matched by a single criterion (e.g. a range of wavelengths), they stay in the original order.","exceptions":{"BandFilterParameterMissing":{"http":400,"message":"The process `filter_bands` requires any of the parameters `bands`, `common_names` or `wavelengths` to be set."},"DimensionMissing":{"http":400,"message":"A band dimension is missing."}},"experimental":false,"id":"filter_bands","links":[{"href":"https://github.com/radiantearth/stac-spec/tree/master/extensions/eo#common-band-names","rel":"about","title":"List of common band names as specified by the STAC specification"},{"href":"https://openeo.org/documentation/1.0/datacubes.html#filter","rel":"about","title":"Filters explained in the openEO documentation"}],"parameters":[{"deprecated":false,"description":"A data cube with bands.","experimental":false,"name":"data","optional":false,"schema":{"subtype":"raster-cube","type":"object"}},{"default":[],"deprecated":false,"description":"A list of band names. Either the unique band name (metadata field `name` in bands) or one of the common band names (metadata field `common_name` in bands). If the unique band name and the common name conflict, the unique band name has a higher priority.\n\nThe order of the specified array defines the order of the bands in the data cube. If multiple bands match a common name, all matched bands are included in the original order.","experimental":false,"name":"bands","optional":true,"schema":{"items":{"subtype":"band-name","type":"string"},"type":"array"}},{"default":[],"deprecated":false,"description":"A list of sub-lists with each sub-list consisting of two elements. The first element is the minimum wavelength and the second element is the maximum wavelength. Wavelengths are specified in micrometers (\u03bcm).\n\nThe order of the specified array defines the order of the bands in the data cube. If multiple bands match the wavelengths, all matched bands are included in the original order.","experimental":false,"name":"wavelengths","optional":true,"schema":{"items":{"examples":[[[0.45,0.5],[0.6,0.7]]],"items":{"type":"number"},"maxItems":2,"minItems":2,"type":"array"},"type":"array"}}],"process_graph":{},"returns":{"description":"A data cube limited to a subset of its original bands. The dimensions and dimension properties (name, type, labels, reference system and resolution) remain unchanged, except that the dimension of type `bands` has less (or the same) dimension labels.","schema":{"subtype":"raster-cube","type":"object"}},"summary":"Filter the bands by names"},{"categories":["cubes","filter"],"deprecated":false,"description":"Limits the data cube to the specified bounding box.\n\nThe filter retains a pixel in the data cube if the point at the pixel center intersects with the bounding box (as defined in the Simple Features standard by the OGC).","exceptions":{},"experimental":false,"id":"filter_bbox","links":[{"href":"https://openeo.org/documentation/1.0/datacubes.html#filter","rel":"about","title":"Filters explained in the openEO documentation"},{"href":"https://proj.org/usage/projections.html","rel":"about","title":"PROJ parameters for cartographic projections"},{"href":"http://www.epsg-registry.org","rel":"about","title":"Official EPSG code registry"},{"href":"http://www.epsg.io","rel":"about","title":"Unofficial EPSG code database"},{"href":"http://www.opengeospatial.org/standards/sfa","rel":"about","title":"Simple Features standard by the OGC"}],"parameters":[{"deprecated":false,"description":"A data cube.","experimental":false,"name":"data","optional":false,"schema":{"subtype":"raster-cube","type":"object"}},{"deprecated":false,"description":"A bounding box, which may include a vertical axis (see `base` and `height`).","experimental":false,"name":"extent","optional":false,"schema":{"properties":{"base":{"default":null,"description":"Base (optional, lower left corner, coordinate axis 3).","type":["number","null"]},"crs":{"anyOf":[{"examples":[3857],"minimum":1000,"subtype":"epsg-code","title":"EPSG Code","type":"integer"},{"subtype":"wkt2-definition","title":"WKT2","type":"string"},{"deprecated":true,"subtype":"proj-definition","title":"PROJ definition","type":"string"}],"default":4326,"description":"Coordinate reference system of the extent, specified as as [EPSG code](http://www.epsg-registry.org/), [WKT2 (ISO 19162) string](http://docs.opengeospatial.org/is/18-010r7/18-010r7.html) or [PROJ definition (deprecated)](https://proj.org/usage/quickstart.html). Defaults to `4326` (EPSG code 4326) unless the client explicitly requests a different coordinate reference system."},"east":{"description":"East (upper right corner, coordinate axis 1).","type":"number"},"height":{"default":null,"description":"Height (optional, upper right corner, coordinate axis 3).","type":["number","null"]},"north":{"description":"North (upper right corner, coordinate axis 2).","type":"number"},"south":{"description":"South (lower left corner, coordinate axis 2).","type":"number"},"west":{"description":"West (lower left corner, coordinate axis 1).","type":"number"}},"required":["west","south","east","north"],"subtype":"bounding-box","type":"object"}}],"process_graph":{},"returns":{"description":"A data cube restricted to the bounding box. The dimensions and dimension properties (name, type, labels, reference system and resolution) remain unchanged, except that the spatial dimensions have less (or the same) dimension labels.","schema":{"subtype":"raster-cube","type":"object"}},"summary":"Spatial filter using a bounding box"},{"categories":["arrays","reducer"],"deprecated":false,"description":"Gives the first element of an array.\n\nAn array without non-`null` elements resolves always with `null`.","examples":[{"arguments":{"data":[1,0,3,2]},"returns":1},{"arguments":{"data":[null,"A","B"]},"returns":"A"},{"arguments":{"data":[null,2,3],"ignore_nodata":false},"returns":null},{"arguments":{"data":[]},"description":"The input array is empty: return `null`.","returns":null}],"exceptions":{},"experimental":false,"id":"first","parameters":[{"deprecated":false,"description":"An array with elements of any data type.","experimental":false,"name":"data","optional":false,"schema":{"items":{"description":"Any data type is allowed."},"type":"array"}},{"default":true,"deprecated":false,"description":"Indicates whether no-data values are ignored or not. Ignores them by default. Setting this flag to `false` considers no-data values so that `null` is returned if the first value is such a value.","experimental":false,"name":"ignore_nodata","optional":true,"schema":{"type":"boolean"}}],"process_graph":{},"returns":{"description":"The first element of the input array.","schema":{"description":"Any data type is allowed."}},"summary":"First element"},{"categories":["math > rounding"],"deprecated":false,"description":"The greatest integer less than or equal to the number `x`.\n\nThis process is *not* an alias for the ``int()`` process as defined by some mathematicians, see the examples for negative numbers in both processes for differences.\n\nThe no-data value `null` is passed through and therefore gets propagated.","examples":[{"arguments":{"x":0},"returns":0},{"arguments":{"x":3.5},"returns":3},{"arguments":{"x":-0.4},"returns":-1},{"arguments":{"x":-3.5},"returns":-4}],"exceptions":{},"experimental":false,"id":"floor","links":[{"href":"http://mathworld.wolfram.com/FloorFunction.html","rel":"about","title":"Floor explained by Wolfram MathWorld"}],"parameters":[{"deprecated":false,"description":"A number to round down.","experimental":false,"name":"x","optional":false,"schema":{"type":["number","null"]}}],"process_graph":{},"returns":{"description":"The number rounded down.","schema":{"type":["integer","null"]}},"summary":"Round fractions down"},{"categories":["comparison"],"deprecated":false,"description":"Compares whether `x` is strictly greater than `y`.\n\n**Remarks:**\n\n* If any operand is `null`, the return value is `null`.\n* If any operand is an array or object, the return value is `false`.\n* If any operand is not a `number` or temporal string (`date`, `time` or `date-time`), the process returns `false`.\n* Temporal strings can *not* be compared based on their string representation due to the time zone / time-offset representations.","examples":[{"arguments":{"x":1,"y":null},"returns":null},{"arguments":{"x":0,"y":0},"returns":false},{"arguments":{"x":2,"y":1},"returns":true},{"arguments":{"x":-0.5,"y":-0.6},"returns":true},{"arguments":{"x":"00:00:00Z","y":"00:00:00+01:00"},"returns":true},{"arguments":{"x":"1950-01-01T00:00:00Z","y":"2018-01-01T12:00:00Z"},"returns":false},{"arguments":{"x":"2018-01-01T12:00:00+00:00","y":"2018-01-01T12:00:00Z"},"returns":false},{"arguments":{"x":true,"y":0},"returns":false},{"arguments":{"x":true,"y":false},"returns":false}],"exceptions":{},"experimental":false,"id":"gt","parameters":[{"deprecated":false,"description":"First operand.","experimental":false,"name":"x","optional":false,"schema":{"description":"Any data type is allowed."}},{"deprecated":false,"description":"Second operand.","experimental":false,"name":"y","optional":false,"schema":{"description":"Any data type is allowed."}}],"process_graph":{},"returns":{"description":"`true` if `x` is strictly greater than `y` or `null` if any operand is `null`, otherwise `false`.","schema":{"type":["boolean","null"]}},"summary":"Greater than comparison"},{"categories":["comparison"],"deprecated":false,"description":"Compares whether `x` is greater than or equal to `y`.\n\n**Remarks:**\n\n* If any operand is `null`, the return value is `null`. Therefore, `gte(null, null)` returns `null` instead of `true`.\n* If any operand is an array or object, the return value is `false`.\n* If the operands are not equal (see process ``eq()``) and any of them is not a `number` or temporal string (`date`, `time` or `date-time`), the process returns `false`.\n* Temporal strings can *not* be compared based on their string representation due to the time zone / time-offset representations.","examples":[{"arguments":{"x":1,"y":null},"returns":null},{"arguments":{"x":0,"y":0},"returns":true},{"arguments":{"x":1,"y":2},"returns":false},{"arguments":{"x":-0.5,"y":-0.6},"returns":true},{"arguments":{"x":"00:00:00Z","y":"00:00:00+01:00"},"returns":true},{"arguments":{"x":"1950-01-01T00:00:00Z","y":"2018-01-01T12:00:00Z"},"returns":false},{"arguments":{"x":"2018-01-01T12:00:00+00:00","y":"2018-01-01T12:00:00Z"},"returns":true},{"arguments":{"x":true,"y":false},"returns":false},{"arguments":{"x":[1,2,3],"y":[1,2,3]},"returns":false}],"exceptions":{},"experimental":false,"id":"gte","parameters":[{"deprecated":false,"description":"First operand.","experimental":false,"name":"x","optional":false,"schema":{"description":"Any data type is allowed."}},{"deprecated":false,"description":"Second operand.","experimental":false,"name":"y","optional":false,"schema":{"description":"Any data type is allowed."}}],"process_graph":{"eq":{"arguments":{"x":{"from_parameter":"x"},"y":{"from_parameter":"y"}},"process_id":"eq"},"gt":{"arguments":{"x":{"from_parameter":"x"},"y":{"from_parameter":"y"}},"process_id":"gt"},"or":{"arguments":{"x":{"from_node":"gt"},"y":{"from_node":"eq"}},"process_id":"or","result":true}},"returns":{"description":"`true` if `x` is greater than or equal to `y`, `null` if any operand is `null`, otherwise `false`.","schema":{"type":["boolean","null"]}},"summary":"Greater than or equal to comparison"},{"categories":["logic","comparison","masks"],"deprecated":false,"description":"If the value passed is `true`, returns the value of the `accept` parameter, otherwise returns the value of the `reject` parameter.\n\nThis is basically an if-then-else construct as in other programming languages.","examples":[{"arguments":{"accept":"A","reject":"B","value":true},"returns":"A"},{"arguments":{"accept":"A","reject":"B","value":null},"returns":"B"},{"arguments":{"accept":[1,2,3],"reject":[4,5,6],"value":false},"returns":[4,5,6]},{"arguments":{"accept":123,"value":true},"returns":123},{"arguments":{"accept":1,"value":false},"returns":null}],"exceptions":{},"experimental":false,"id":"if","parameters":[{"deprecated":false,"description":"A boolean value.","experimental":false,"name":"value","optional":false,"schema":{"type":["boolean","null"]}},{"deprecated":false,"description":"A value that is returned if the boolean value is `true`.","experimental":false,"name":"accept","optional":false,"schema":{"description":"Any data type is allowed."}},{"deprecated":false,"description":"A value that is returned if the boolean value is **not** `true`. Defaults to `null`.","experimental":false,"name":"reject","optional":true,"schema":{"description":"Any data type is allowed."}}],"process_graph":{},"returns":{"description":"Either the `accept` or `reject` argument depending on the given boolean value.","schema":{"description":"Any data type is allowed."}},"summary":"If-Then-Else conditional"},{"categories":["math","math > rounding"],"deprecated":false,"description":"The integer part of the real number `x`.\n\nThis process is *not* an alias for the ``floor()`` process as defined by some mathematicians, see the examples for negative numbers in both processes for differences.\n\nThe no-data value `null` is passed through and therefore gets propagated.","examples":[{"arguments":{"x":0},"returns":0},{"arguments":{"x":3.5},"returns":3},{"arguments":{"x":-0.4},"returns":0},{"arguments":{"x":-3.5},"returns":-3}],"exceptions":{},"experimental":false,"id":"int","links":[{"href":"http://mathworld.wolfram.com/IntegerPart.html","rel":"about","title":"Integer Part explained by Wolfram MathWorld"}],"parameters":[{"deprecated":false,"description":"A number.","experimental":false,"name":"x","optional":false,"schema":{"type":["number","null"]}}],"process_graph":{},"returns":{"description":"Integer part of the number.","schema":{"type":["integer","null"]}},"summary":"Integer part of a number"},{"categories":["comparison","math > constants"],"deprecated":false,"description":"Checks whether the specified value `x` is not a number. Returns `true` for numeric values (integers and floating-point numbers), except for the special value `NaN` as defined by the [IEEE Standard 754](https://ieeexplore.ieee.org/document/4610935). All non-numeric data types MUST also return `true`, including arrays that contain `NaN` values.","examples":[{"arguments":{"x":1},"returns":false},{"arguments":{"x":"Test"},"returns":true},{"arguments":{"x":null},"returns":true}],"exceptions":{},"experimental":false,"id":"is_nan","links":[{"href":"https://ieeexplore.ieee.org/document/4610935","rel":"about","title":"IEEE Standard 754-2008 for Floating-Point Arithmetic"},{"href":"http://mathworld.wolfram.com/NaN.html","rel":"about","title":"NaN explained by Wolfram MathWorld"}],"parameters":[{"deprecated":false,"description":"The data to check.","experimental":false,"name":"x","optional":false,"schema":{"description":"Any data type is allowed."}}],"process_graph":{},"returns":{"description":"`true` if the data is not a number, otherwise `false`.","schema":{"type":"boolean"}},"summary":"Value is not a number"},{"categories":["comparison"],"deprecated":false,"description":"Checks whether the specified data is a missing data, i.e. equals to `null` or any of the no-data values specified in the metadata. The special numerical value `NaN` (not a number) as defined by the [IEEE Standard 754](https://ieeexplore.ieee.org/document/4610935) is not considered no-data and must return `false`.","examples":[{"arguments":{"x":1},"returns":false},{"arguments":{"x":"Test"},"returns":false},{"arguments":{"x":null},"returns":true},{"arguments":{"x":[null,null]},"returns":false}],"exceptions":{},"experimental":false,"id":"is_nodata","parameters":[{"deprecated":false,"description":"The data to check.","experimental":false,"name":"x","optional":false,"schema":{"description":"Any data type is allowed."}}],"process_graph":{},"returns":{"description":"`true` if the data is a no-data value, otherwise `false`.","schema":{"type":"boolean"}},"summary":"Value is not a no-data value"},{"categories":["comparison"],"deprecated":false,"description":"Checks whether the specified value `x` is valid. The following values are considered valid:\n\n* Any finite numerical value (integers and floating-point numbers). The definition of finite numbers follows the [IEEE Standard 754](https://ieeexplore.ieee.org/document/4610935) and excludes the special value `NaN` (not a number).\n* Any other value that is not a no-data value according to ``is_nodata()`. Thus all arrays, objects and strings are valid, regardless of their content.","examples":[{"arguments":{"x":1},"returns":true},{"arguments":{"x":"Test"},"returns":true},{"arguments":{"x":null},"returns":false},{"arguments":{"x":[null,null]},"returns":true}],"exceptions":{},"experimental":false,"id":"is_valid","links":[{"href":"https://ieeexplore.ieee.org/document/4610935","rel":"about","title":"IEEE Standard 754-2008 for Floating-Point Arithmetic"}],"parameters":[{"deprecated":false,"description":"The data to check.","experimental":false,"name":"x","optional":false,"schema":{"description":"Any data type is allowed."}}],"process_graph":{},"returns":{"description":"`true` if the data is valid, otherwise `false`.","schema":{"type":"boolean"}},"summary":"Value is valid data"},{"categories":["arrays","reducer"],"deprecated":false,"description":"Gives the last element of an array.\n\nAn array without non-`null` elements resolves always with `null`.","examples":[{"arguments":{"data":[1,0,3,2]},"returns":2},{"arguments":{"data":["A","B",null]},"returns":"B"},{"arguments":{"data":[0,1,null],"ignore_nodata":false},"returns":null},{"arguments":{"data":[]},"description":"The input array is empty: return `null`.","returns":null}],"exceptions":{},"experimental":false,"id":"last","parameters":[{"deprecated":false,"description":"An array with elements of any data type.","experimental":false,"name":"data","optional":false,"schema":{"items":{"description":"Any data type is allowed."},"type":"array"}},{"default":true,"deprecated":false,"description":"Indicates whether no-data values are ignored or not. Ignores them by default. Setting this flag to `false` considers no-data values so that `null` is returned if the last value is such a value.","experimental":false,"name":"ignore_nodata","optional":true,"schema":{"type":"boolean"}}],"process_graph":{},"returns":{"description":"The last element of the input array.","schema":{"description":"Any data type is allowed."}},"summary":"Last element"},{"categories":["math"],"deprecated":false,"description":"Performs a linear transformation between the input and output range.\n\nThe given number in `x` is clipped to the bounds specified in `inputMin` and `inputMax` so that the underlying formula *`((x - inputMin) / (inputMax - inputMin)) * (outputMax - outputMin) + outputMin`* never returns any value lower than `outputMin` or greater than `outputMax`.\n\nPotential use case include\n\n* scaling values to the 8-bit range (0 - 255) often used for numeric representation of values in one of the channels of the [RGB colour model](https://en.wikipedia.org/wiki/RGB_color_model#Numeric_representations) or\n* calculating percentages (0 - 100).\n\nThe no-data value `null` is passed through and therefore gets propagated.","examples":[{"arguments":{"inputMax":1,"inputMin":-1,"outputMax":255,"outputMin":0,"x":0.3},"returns":165.75},{"arguments":{"inputMax":255,"inputMin":0,"x":25.5},"returns":0.1},{"arguments":{"inputMax":100,"inputMin":0,"x":null},"returns":null},{"arguments":{"inputMax":1,"inputMin":0,"outputMax":255,"outputMin":0,"x":1.12},"description":"Shows that the input data is clipped.","returns":255}],"exceptions":{},"experimental":false,"id":"linear_scale_range","parameters":[{"deprecated":false,"description":"A number to transform. The number gets clipped to the bounds specified in `inputMin` and `inputMax`.","experimental":false,"name":"x","optional":false,"schema":{"type":["number","null"]}},{"deprecated":false,"description":"Minimum value the input can obtain.","experimental":false,"name":"inputMin","optional":false,"schema":{"type":"number"}},{"deprecated":false,"description":"Maximum value the input can obtain.","experimental":false,"name":"inputMax","optional":false,"schema":{"type":"number"}},{"default":0,"deprecated":false,"description":"Minimum value of the desired output range.","experimental":false,"name":"outputMin","optional":true,"schema":{"type":"number"}},{"default":1,"deprecated":false,"description":"Maximum value of the desired output range.","experimental":false,"name":"outputMax","optional":true,"schema":{"type":"number"}}],"process_graph":{"add":{"arguments":{"x":{"from_node":"multiply"},"y":{"from_parameter":"outputMin"}},"process_id":"add","result":true},"divide":{"arguments":{"x":{"from_node":"subtract1"},"y":{"from_node":"subtract2"}},"process_id":"divide"},"multiply":{"arguments":{"x":{"from_node":"divide"},"y":{"from_node":"subtract3"}},"process_id":"multiply"},"subtract1":{"arguments":{"x":{"from_parameter":"x"},"y":{"from_parameter":"inputMin"}},"process_id":"subtract"},"subtract2":{"arguments":{"x":{"from_parameter":"inputMax"},"y":{"from_parameter":"inputMin"}},"process_id":"subtract"},"subtract3":{"arguments":{"x":{"from_parameter":"outputMax"},"y":{"from_parameter":"outputMin"}},"process_id":"subtract"}},"returns":{"description":"The transformed number.","schema":{"type":["number","null"]}},"summary":"Linear transformation between two ranges"},{"categories":["math > exponential & logarithmic"],"deprecated":false,"description":"The natural logarithm is the logarithm to the base *e* of the number `x`, which equals to using the *log* process with the base set to *e*. The natural logarithm is the inverse function of taking *e* to the power x.\n\nThe no-data value `null` is passed through.\n\nThe computations follow [IEEE Standard 754](https://ieeexplore.ieee.org/document/8766229) whenever the processing environment supports it. Therefore, *`ln(0)`* results in \u00b1infinity if the processing environment supports it or otherwise an exception is thrown.","examples":[{"arguments":{"x":1},"returns":0}],"exceptions":{},"experimental":false,"id":"ln","links":[{"href":"http://mathworld.wolfram.com/NaturalLogarithm.html","rel":"about","title":"Natural logarithm explained by Wolfram MathWorld"},{"href":"https://ieeexplore.ieee.org/document/8766229","rel":"about","title":"IEEE Standard 754-2019 for Floating-Point Arithmetic"}],"parameters":[{"deprecated":false,"description":"A number to compute the natural logarithm for.","experimental":false,"name":"x","optional":false,"schema":{"type":["number","null"]}}],"process_graph":{"e":{"arguments":{},"process_id":"e"},"log":{"arguments":{"base":{"from_node":"e"},"x":{"from_parameter":"x"}},"process_id":"log","result":true}},"returns":{"description":"The computed natural logarithm.","schema":{"type":["number","null"]}},"summary":"Natural logarithm"},{"categories":["cubes","import"],"deprecated":false,"description":"Loads a collection from the current back-end by its id and returns it as a processable data cube. The data that is added to the data cube can be restricted with the additional `spatial_extent`, `temporal_extent`, `bands` and `properties`.\n\n**Remarks:**\n\n* The bands (and all dimensions that specify nominal dimension labels) are expected to be ordered as specified in the metadata if the `bands` parameter is set to `null`.\n* If no additional parameter is specified this would imply that the whole data set is expected to be loaded. Due to the large size of many data sets, this is not recommended and may be optimized by back-ends to only load the data that is actually required after evaluating subsequent processes such as filters. This means that the pixel values should be processed only after the data has been limited to the required extent and as a consequence also to a manageable size.","examples":[{"arguments":{"id":"Sentinel-2","properties":{"eo:cloud_cover":{"process_graph":{"cc":{"arguments":{"max":50,"min":0,"x":{"from_parameter":"value"}},"process_id":"between","result":true}}},"platform":{"process_graph":{"pf":{"arguments":{"case_sensitive":false,"x":{"from_parameter":"value"},"y":"Sentinel-2B"},"process_id":"eq","result":true}}}},"spatial_extent":{"east":16.6,"north":48.6,"south":47.2,"west":16.1},"temporal_extent":["2018-01-01","2019-01-01"]},"description":"Loading `Sentinel-2B` data from a `Sentinel-2` collection for 2018, but only with cloud cover between 0 and 50%.","returns":null}],"exceptions":{},"experimental":false,"id":"load_collection","links":[{"href":"https://openeo.org/documentation/1.0/datacubes.html","rel":"about","title":"Data Cubes explained in the openEO documentation"},{"href":"https://proj.org/usage/projections.html","rel":"about","title":"PROJ parameters for cartographic projections"},{"href":"http://www.epsg-registry.org","rel":"about","title":"Official EPSG code registry"},{"href":"http://www.epsg.io","rel":"about","title":"Unofficial EPSG code database"},{"href":"http://www.opengeospatial.org/standards/sfa","rel":"about","title":"Simple Features standard by the OGC"},{"href":"https://github.com/radiantearth/stac-spec/tree/master/extensions/eo#common-band-names","rel":"about","title":"List of common band names as specified by the STAC specification"}],"parameters":[{"deprecated":false,"description":"The collection id.","experimental":false,"name":"id","optional":false,"schema":{"pattern":"^[\\w\\-\\.~/]+$","subtype":"collection-id","type":"string"}},{"deprecated":false,"description":"Limits the data to load from the collection to the specified bounding box or polygons.\n\nThe process puts a pixel into the data cube if the point at the pixel center intersects with the bounding box or any of the polygons (as defined in the Simple Features standard by the OGC).\n\nThe GeoJSON can be one of the following feature types:\n\n* A `Polygon` or `MultiPolygon` geometry,\n* a `Feature` with a `Polygon` or `MultiPolygon` geometry,\n* a `FeatureCollection` containing at least one `Feature` with `Polygon` or `MultiPolygon` geometries, or\n* a `GeometryCollection` containing `Polygon` or `MultiPolygon` geometries. To maximize interoperability, `GeometryCollection` should be avoided in favour of one of the alternatives above.\n\nSet this parameter to `null` to set no limit for the spatial extent. Be careful with this when loading large datasets! It is recommended to use this parameter instead of using ``filter_bbox()`` or ``filter_spatial()`` directly after loading unbounded data.","experimental":false,"name":"spatial_extent","optional":false,"schema":[{"properties":{"base":{"default":null,"description":"Base (optional, lower left corner, coordinate axis 3).","type":["number","null"]},"crs":{"anyOf":[{"examples":[3857],"minimum":1000,"subtype":"epsg-code","title":"EPSG Code","type":"integer"},{"subtype":"wkt2-definition","title":"WKT2","type":"string"},{"deprecated":true,"subtype":"proj-definition","title":"PROJ definition","type":"string"}],"default":4326,"description":"Coordinate reference system of the extent, specified as as [EPSG code](http://www.epsg-registry.org/), [WKT2 (ISO 19162) string](http://docs.opengeospatial.org/is/18-010r7/18-010r7.html) or [PROJ definition (deprecated)](https://proj.org/usage/quickstart.html). Defaults to `4326` (EPSG code 4326) unless the client explicitly requests a different coordinate reference system."},"east":{"description":"East (upper right corner, coordinate axis 1).","type":"number"},"height":{"default":null,"description":"Height (optional, upper right corner, coordinate axis 3).","type":["number","null"]},"north":{"description":"North (upper right corner, coordinate axis 2).","type":"number"},"south":{"description":"South (lower left corner, coordinate axis 2).","type":"number"},"west":{"description":"West (lower left corner, coordinate axis 1).","type":"number"}},"required":["west","south","east","north"],"subtype":"bounding-box","title":"Bounding Box","type":"object"},{"description":"Limits the data cube to the bounding box of the given geometry. All pixels inside the bounding box that do not intersect with any of the polygons will be set to no data (`null`).","subtype":"geojson","title":"GeoJSON","type":"object"},{"description":"Don't filter spatially. All data is included in the data cube.","title":"No filter","type":"null"}]},{"deprecated":false,"description":"Limits the data to load from the collection to the specified left-closed temporal interval. Applies to all temporal dimensions. The interval has to be specified as an array with exactly two elements:\n\n1. The first element is the start of the temporal interval. The specified instance in time is **included** in the interval.\n2. The second element is the end of the temporal interval. The specified instance in time is **excluded** from the interval.\n\nThe specified temporal strings follow [RFC 3339](https://www.rfc-editor.org/rfc/rfc3339.html). Also supports open intervals by setting one of the boundaries to `null`, but never both.\n\nSet this parameter to `null` to set no limit for the temporal extent. Be careful with this when loading large datasets! It is recommended to use this parameter instead of using ``filter_temporal()`` directly after loading unbounded data.","experimental":false,"name":"temporal_extent","optional":false,"schema":[{"examples":[["2015-01-01T00:00:00Z","2016-01-01T00:00:00Z"],["2015-01-01","2016-01-01"]],"items":{"anyOf":[{"format":"date-time","subtype":"date-time","type":"string"},{"format":"date","subtype":"date","type":"string"},{"maxLength":4,"minLength":4,"pattern":"^\\d{4}$","subtype":"year","type":"string"},{"type":"null"}]},"maxItems":2.0,"minItems":2.0,"subtype":"temporal-interval","type":"array"},{"description":"Don't filter temporally. All data is included in the data cube.","title":"No filter","type":"null"}]},{"deprecated":false,"description":"Only adds the specified bands into the data cube so that bands that don't match the list of band names are not available. Applies to all dimensions of type `bands`.\n\nEither the unique band name (metadata field `name` in bands) or one of the common band names (metadata field `common_name` in bands) can be specified. If the unique band name and the common name conflict, the unique band name has a higher priority.\n\nThe order of the specified array defines the order of the bands in the data cube. If multiple bands match a common name, all matched bands are included in the original order.\n\nIt is recommended to use this parameter instead of using ``filter_bands()`` directly after loading unbounded data.","experimental":false,"name":"bands","optional":true,"schema":[{"items":{"subtype":"band-name","type":"string"},"type":"array"},{"description":"Don't filter bands. All bands are included in the data cube.","title":"No filter","type":"null"}]},{"deprecated":false,"description":"Limits the data by metadata properties to include only data in the data cube which all given conditions return `true` for (AND operation).\n\nSpecify key-value-pairs with the key being the name of the metadata property, which can be retrieved with the openEO Data Discovery for Collections. The value must a condition (user-defined process) to be evaluated against the collection metadata, see the example.","experimental":false,"name":"properties","optional":true,"schema":[{"additionalProperties":{"parameters":[{"description":"The property value to be checked against.","name":"value","schema":{"description":"Any data type."}}],"returns":{"description":"`true` if the data should be loaded into the data cube, otherwise `false`.","schema":{"type":"boolean"}},"subtype":"process-graph","type":"object"},"description":"A list of filters to check against. Specify key-value-pairs with the key being the name of the metadata property name and the value being a process evaluated against the metadata values.","subtype":"metadata-filter","title":"Filters","type":"object"},{"description":"Don't filter by metadata properties.","title":"No filter","type":"null"}]}],"process_graph":{},"returns":{"description":"A data cube for further processing. The dimensions and dimension properties (name, type, labels, reference system and resolution) correspond to the collection's metadata, but the dimension labels are restricted as specified in the parameters.","schema":{"subtype":"raster-cube","type":"object"}},"summary":"Load a collection"},{"categories":["math > exponential & logarithmic"],"deprecated":false,"description":"Logarithm to the base `base` of the number `x` is defined to be the inverse function of taking b to the power of x.\n\nThe no-data value `null` is passed through and therefore gets propagated if any of the arguments is `null`.\n\nThe computations follow [IEEE Standard 754](https://ieeexplore.ieee.org/document/8766229) whenever the processing environment supports it. Therefore, `log(0, 2)` results in \u00b1infinity if the processing environment supports it or otherwise an exception is thrown.","examples":[{"arguments":{"base":10,"x":10},"returns":1},{"arguments":{"base":2,"x":2},"returns":1},{"arguments":{"base":2,"x":4},"returns":2},{"arguments":{"base":16,"x":1},"returns":0}],"exceptions":{},"experimental":false,"id":"log","links":[{"href":"http://mathworld.wolfram.com/Logarithm.html","rel":"about","title":"Logarithm explained by Wolfram MathWorld"},{"href":"https://ieeexplore.ieee.org/document/8766229","rel":"about","title":"IEEE Standard 754-2019 for Floating-Point Arithmetic"}],"parameters":[{"deprecated":false,"description":"A number to compute the logarithm for.","experimental":false,"name":"x","optional":false,"schema":{"type":["number","null"]}},{"deprecated":false,"description":"The numerical base.","experimental":false,"name":"base","optional":false,"schema":{"type":["number","null"]}}],"process_graph":{},"returns":{"description":"The computed logarithm.","schema":{"type":["number","null"]}},"summary":"Logarithm to a base"},{"categories":["comparison"],"deprecated":false,"description":"Compares whether `x` is strictly less than `y`.\n\n**Remarks:**\n\n* If any operand is `null`, the return value is `null`.\n* If any operand is an array or object, the return value is `false`.\n* If any operand is not a `number` or temporal string (`date`, `time` or `date-time`), the process returns `false`.\n* Temporal strings can *not* be compared based on their string representation due to the time zone / time-offset representations.","examples":[{"arguments":{"x":1,"y":null},"returns":null},{"arguments":{"x":0,"y":0},"returns":false},{"arguments":{"x":1,"y":2},"returns":true},{"arguments":{"x":-0.5,"y":-0.6},"returns":false},{"arguments":{"x":"00:00:00+01:00","y":"00:00:00Z"},"returns":true},{"arguments":{"x":"1950-01-01T00:00:00Z","y":"2018-01-01T12:00:00Z"},"returns":true},{"arguments":{"x":"2018-01-01T12:00:00+00:00","y":"2018-01-01T12:00:00Z"},"returns":false},{"arguments":{"x":0,"y":true},"returns":false},{"arguments":{"x":false,"y":true},"returns":false}],"exceptions":{},"experimental":false,"id":"lt","parameters":[{"deprecated":false,"description":"First operand.","experimental":false,"name":"x","optional":false,"schema":{"description":"Any data type is allowed."}},{"deprecated":false,"description":"Second operand.","experimental":false,"name":"y","optional":false,"schema":{"description":"Any data type is allowed."}}],"process_graph":{},"returns":{"description":"`true` if `x` is strictly less than `y`, `null` if any operand is `null`, otherwise `false`.","schema":{"type":["boolean","null"]}},"summary":"Less than comparison"},{"categories":["comparison"],"deprecated":false,"description":"Compares whether `x` is less than or equal to `y`.\n\n**Remarks:**\n\n* If any operand is `null`, the return value is `null`. Therefore, `lte(null, null)` returns `null` instead of `true`.\n* If any operand is an array or object, the return value is `false`.\n* If the operands are not equal (see process ``eq()``) and any of them is not a `number` or temporal string (`date`, `time` or `date-time`), the process returns `false`.\n* Temporal strings can *not* be compared based on their string representation due to the time zone / time-offset representations.","examples":[{"arguments":{"x":1,"y":null},"returns":null},{"arguments":{"x":0,"y":0},"returns":true},{"arguments":{"x":1,"y":2},"returns":true},{"arguments":{"x":-0.5,"y":-0.6},"returns":false},{"arguments":{"x":"00:00:00+01:00","y":"00:00:00Z"},"returns":true},{"arguments":{"x":"1950-01-01T00:00:00Z","y":"2018-01-01T12:00:00Z"},"returns":true},{"arguments":{"x":"2018-01-01T12:00:00+00:00","y":"2018-01-01T12:00:00Z"},"returns":true},{"arguments":{"x":false,"y":true},"returns":false},{"arguments":{"x":[1,2,3],"y":[1,2,3]},"returns":false}],"exceptions":{},"experimental":false,"id":"lte","parameters":[{"deprecated":false,"description":"First operand.","experimental":false,"name":"x","optional":false,"schema":{"description":"Any data type is allowed."}},{"deprecated":false,"description":"Second operand.","experimental":false,"name":"y","optional":false,"schema":{"description":"Any data type is allowed."}}],"process_graph":{"eq":{"arguments":{"x":{"from_parameter":"x"},"y":{"from_parameter":"y"}},"process_id":"eq"},"lt":{"arguments":{"x":{"from_parameter":"x"},"y":{"from_parameter":"y"}},"process_id":"lt"},"or":{"arguments":{"x":{"from_node":"lt"},"y":{"from_node":"eq"}},"process_id":"or","result":true}},"returns":{"description":"`true` if `x` is less than or equal to `y`, `null` if any operand is `null`, otherwise `false`.","schema":{"type":["boolean","null"]}},"summary":"Less than or equal to comparison"},{"categories":["cubes","masks"],"deprecated":false,"description":"Applies a mask to a raster data cube. To apply a vector mask use ``mask_polygon()``.\n\nA mask is a raster data cube for which corresponding pixels among `data` and `mask` are compared and those pixels in `data` are replaced whose pixels in `mask` are non-zero (for numbers) or `true` (for boolean values). The pixel values are replaced with the value specified for `replacement`, which defaults to `null` (no data).\n\nThe data cubes have to be compatible so that each dimension in the mask must also be available in the raster data cube with the same name, type, reference system, resolution and labels. Dimensions can be missing in the mask with the result that the mask is applied for each label of the missing dimension in the data cube. The process fails if there's an incompatibility found between the raster data cube and the mask.","exceptions":{},"experimental":false,"id":"mask","parameters":[{"deprecated":false,"description":"A raster data cube.","experimental":false,"name":"data","optional":false,"schema":{"subtype":"raster-cube","type":"object"}},{"deprecated":false,"description":"A mask as a raster data cube. Every pixel in `data` must have a corresponding element in `mask`.","experimental":false,"name":"mask","optional":false,"schema":{"subtype":"raster-cube","type":"object"}},{"deprecated":false,"description":"The value used to replace masked values with.","experimental":false,"name":"replacement","optional":true,"schema":{"type":["number","boolean","string","null"]}}],"process_graph":{},"returns":{"description":"A masked raster data cube with the same dimensions. The dimension properties (name, type, labels, reference system and resolution) remain unchanged.","schema":{"subtype":"raster-cube","type":"object"}},"summary":"Apply a raster mask"},{"categories":["math","reducer"],"deprecated":false,"description":"Computes the largest value of an array of numbers, which is equal to the first element of a sorted (i.e., ordered) version of the array.\n\nAn array without non-`null` elements resolves always with `null`.","examples":[{"arguments":{"data":[1,0,3,2]},"returns":3},{"arguments":{"data":[5,2.5,null,-0.7]},"returns":5},{"arguments":{"data":[1,0,3,null,2],"ignore_nodata":false},"returns":null},{"arguments":{"data":[]},"description":"The input array is empty: return `null`.","returns":null}],"exceptions":{},"experimental":false,"id":"max","links":[{"href":"http://mathworld.wolfram.com/Maximum.html","rel":"about","title":"Maximum explained by Wolfram MathWorld"}],"parameters":[{"deprecated":false,"description":"An array of numbers.","experimental":false,"name":"data","optional":false,"schema":{"items":{"type":["number","null"]},"type":"array"}},{"default":true,"deprecated":false,"description":"Indicates whether no-data values are ignored or not. Ignores them by default. Setting this flag to `false` considers no-data values so that `null` is returned if any value is such a value.","experimental":false,"name":"ignore_nodata","optional":true,"schema":{"type":"boolean"}}],"process_graph":{},"returns":{"description":"The maximum value.","schema":{"type":["number","null"]}},"summary":"Maximum value"},{"categories":["math","reducer"],"deprecated":false,"description":"The arithmetic mean of an array of numbers is the quantity commonly called the average. It is defined as the sum of all elements divided by the number of elements.\n\nAn array without non-`null` elements resolves always with `null`.","examples":[{"arguments":{"data":[1,0,3,2]},"returns":1.5},{"arguments":{"data":[9,2.5,null,-2.5]},"returns":3},{"arguments":{"data":[1,null],"ignore_nodata":false},"returns":null},{"arguments":{"data":[]},"description":"The input array is empty: return `null`.","returns":null},{"arguments":{"data":[null,null]},"description":"The input array has only `null` elements: return `null`.","returns":null}],"exceptions":{},"experimental":false,"id":"mean","links":[{"href":"http://mathworld.wolfram.com/ArithmeticMean.html","rel":"about","title":"Arithmetic mean explained by Wolfram MathWorld"}],"parameters":[{"deprecated":false,"description":"An array of numbers.","experimental":false,"name":"data","optional":false,"schema":{"items":{"type":["number","null"]},"type":"array"}},{"default":true,"deprecated":false,"description":"Indicates whether no-data values are ignored or not. Ignores them by default. Setting this flag to `false` considers no-data values so that `null` is returned if any value is such a value.","experimental":false,"name":"ignore_nodata","optional":true,"schema":{"type":"boolean"}}],"process_graph":{"count":{"arguments":{"condition":{"from_node":"count_condition"},"data":{"from_parameter":"data"}},"process_id":"count"},"count_condition":{"arguments":{"accept":null,"reject":true,"value":{"from_parameter":"ignore_nodata"}},"process_id":"if"},"divide":{"arguments":{"x":{"from_node":"sum"},"y":{"from_node":"count"}},"process_id":"divide"},"if":{"arguments":{"accept":{"from_node":"divide"},"value":{"from_node":"neq"}},"process_id":"if","result":true},"neq":{"arguments":{"x":{"from_node":"count"},"y":0},"process_id":"neq"},"sum":{"arguments":{"data":{"from_parameter":"data"},"ignore_nodata":{"from_parameter":"ignore_nodata"}},"process_id":"sum"}},"returns":{"description":"The computed arithmetic mean.","schema":{"type":["number","null"]}},"summary":"Arithmetic mean (average)"},{"categories":["math","reducer"],"deprecated":false,"description":"The statistical median of an array of numbers is the value separating the higher half from the lower half of the data.\n\nAn array without non-`null` elements resolves always with `null`.\n\n**Remarks:**\n\n* For symmetric arrays, the result is equal to the ``mean()``.\n* The median can also be calculated by computing the ``quantiles()`` with a probability of *0.5*.","examples":[{"arguments":{"data":[1,3,3,6,7,8,9]},"returns":6},{"arguments":{"data":[1,2,3,4,5,6,8,9]},"returns":4.5},{"arguments":{"data":[-1,-0.5,null,1]},"returns":-0.5},{"arguments":{"data":[-1,0,null,1],"ignore_nodata":false},"returns":null},{"arguments":{"data":[]},"description":"The input array is empty: return `null`.","returns":null},{"arguments":{"data":[null,null]},"description":"The input array has only `null` elements: return `null`.","returns":null}],"exceptions":{},"experimental":false,"id":"median","links":[{"href":"http://mathworld.wolfram.com/StatisticalMedian.html","rel":"about","title":"Statistical Median explained by Wolfram MathWorld"}],"parameters":[{"deprecated":false,"description":"An array of numbers.","experimental":false,"name":"data","optional":false,"schema":{"items":{"type":["number","null"]},"type":"array"}},{"default":true,"deprecated":false,"description":"Indicates whether no-data values are ignored or not. Ignores them by default. Setting this flag to `false` considers no-data values so that `null` is returned if any value is such a value.","experimental":false,"name":"ignore_nodata","optional":true,"schema":{"type":"boolean"}}],"process_graph":{"array_element":{"arguments":{"data":{"from_node":"quantiles"},"index":0,"return_nodata":true},"process_id":"array_element","result":true},"quantiles":{"arguments":{"data":{"from_parameter":"data"},"ignore_nodata":{"from_parameter":"ignore_nodata"},"probabilities":[0.5]},"process_id":"quantiles"}},"returns":{"description":"The computed statistical median.","schema":{"type":["number","null"]}},"summary":"Statistical median"},{"categories":["math","reducer"],"deprecated":false,"description":"Computes the smallest value of an array of numbers, which is equal to the last element of a sorted (i.e., ordered) version of the array.\n\nAn array without non-`null` elements resolves always with `null`.","examples":[{"arguments":{"data":[1,0,3,2]},"returns":0},{"arguments":{"data":[5,2.5,null,-0.7]},"returns":-0.7},{"arguments":{"data":[1,0,3,null,2],"ignore_nodata":false},"returns":null},{"arguments":{"data":[]},"returns":null}],"exceptions":{},"experimental":false,"id":"min","links":[{"href":"http://mathworld.wolfram.com/Minimum.html","rel":"about","title":"Minimum explained by Wolfram MathWorld"}],"parameters":[{"deprecated":false,"description":"An array of numbers.","experimental":false,"name":"data","optional":false,"schema":{"items":{"type":["number","null"]},"type":"array"}},{"default":true,"deprecated":false,"description":"Indicates whether no-data values are ignored or not. Ignores them by default. Setting this flag to `false` considers no-data values so that `null` is returned if any value is such a value.","experimental":false,"name":"ignore_nodata","optional":true,"schema":{"type":"boolean"}}],"process_graph":{},"returns":{"description":"The minimum value.","schema":{"type":["number","null"]}},"summary":"Minimum value"},{"categories":["math"],"deprecated":false,"description":"Remainder after a division of `x` by `y` for both integers and floating-point numbers.\n\nThe result of a modulo operation has the sign of the divisor. The handling regarding the sign of the result [differs between programming languages](https://en.wikipedia.org/wiki/Modulo_operation#In_programming_languages) and needs careful consideration to avoid unexpected results.\n\nThe no-data value `null` is passed through and therefore gets propagated if any of the arguments is `null`. A modulo by zero results in \u00b1infinity if the processing environment supports it. Otherwise, a `DivisionByZero` exception must the thrown.","examples":[{"arguments":{"x":27,"y":5},"returns":2},{"arguments":{"x":-27,"y":5},"returns":3},{"arguments":{"x":3.14,"y":-2},"returns":-0.86},{"arguments":{"x":-27,"y":-5},"returns":-2},{"arguments":{"x":27,"y":null},"returns":null},{"arguments":{"x":null,"y":5},"returns":null}],"exceptions":{"DivisionByZero":{"http":400,"message":"Division by zero is not supported."}},"experimental":false,"id":"mod","links":[{"href":"https://en.wikipedia.org/wiki/Modulo_operation","rel":"about","title":"Modulo explained by Wikipedia"}],"parameters":[{"deprecated":false,"description":"A number to be used as the dividend.","experimental":false,"name":"x","optional":false,"schema":{"type":["number","null"]}},{"deprecated":false,"description":"A number to be used as the divisor.","experimental":false,"name":"y","optional":false,"schema":{"type":["number","null"]}}],"process_graph":{},"returns":{"description":"The remainder after division.","schema":{"type":["number","null"]}},"summary":"Modulo"},{"categories":["cubes"],"deprecated":false,"description":"The data cubes have to be compatible. A merge operation without overlap should be reversible with (a set of) filter operations for each of the two cubes. The process performs the join on overlapping dimensions, with the same name and type.\n\nAn overlapping dimension has the same name, type, reference system and resolution in both dimensions, but can have different labels. One of the dimensions can have different labels, for all other dimensions the labels must be equal. If data overlaps, the parameter `overlap_resolver` must be specified to resolve the overlap.\n\n**Examples for merging two data cubes:**\n\n1. Data cubes with the dimensions (`x`, `y`, `t`, `bands`) have the same dimension labels in `x`, `y` and `t`, but the labels for the dimension `bands` are `B1` and `B2` for the first cube and `B3` and `B4`. An overlap resolver is *not needed*. The merged data cube has the dimensions `x`, `y`, `t` and `bands` and the dimension `bands` has four dimension labels: `B1`, `B2`, `B3`, `B4`.\n2. Data cubes with the dimensions (`x`, `y`, `t`, `bands`) have the same dimension labels in `x`, `y` and `t`, but the labels for the dimension `bands` are `B1` and `B2` for the first data cube and `B2` and `B3` for the second. An overlap resolver is *required* to resolve overlap in band `B2`. The merged data cube has the dimensions `x`, `y`, `t` and `bands` and the dimension `bands` has three dimension labels: `B1`, `B2`, `B3`.\n3. Data cubes with the dimensions (`x`, `y`, `t`) have the same dimension labels in `x`, `y` and `t`. There are two options:\n   1. Keep the overlapping values separately in the merged data cube: An overlap resolver is *not needed*, but for each data cube you need to add a new dimension using ``add_dimension()``. The new dimensions must be equal, except that the labels for the new dimensions must differ by name. The merged data cube has the same dimensions and labels as the original data cubes, plus the dimension added with ``add_dimension()``, which has the two dimension labels after the merge.\n   2. Combine the overlapping values into a single value: An overlap resolver is *required* to resolve the overlap for all pixels. The merged data cube has the same dimensions and labels as the original data cubes, but all pixel values have been processed by the overlap resolver.\n4. A data cube with dimensions (`x`, `y`, `t` / `bands`) or (`x`, `y`, `t`, `bands`) and another data cube with dimensions (`x`, `y`) have the same dimension labels in `x` and `y`. Merging them will join dimensions `x` and `y`, so the lower dimension cube is merged with each time step and band available in the higher dimensional cube. This can for instance be used to apply a digital elevation model to a spatio-temporal data cube. An overlap resolver is *required* to resolve the overlap for all pixels.\n\nAfter the merge, the dimensions with a natural/inherent label order (with a reference system this is each spatial and temporal dimensions) still have all dimension labels sorted. For other dimensions where there is no inherent order, including bands, the dimension labels keep the order in which they are present in the original data cubes and the dimension labels of `cube2` are appended to the dimension labels of `cube1`.","exceptions":{"OverlapResolverMissing":{"http":400,"message":"Overlapping data cubes, but no overlap resolver has been specified."}},"experimental":false,"id":"merge_cubes","links":[{"href":"https://en.wikipedia.org/wiki/Reduction_Operator","rel":"about","title":"Background information on reduction operators (binary reducers) by Wikipedia"}],"parameters":[{"deprecated":false,"description":"The first data cube.","experimental":false,"name":"cube1","optional":false,"schema":{"subtype":"raster-cube","type":"object"}},{"deprecated":false,"description":"The second data cube.","experimental":false,"name":"cube2","optional":false,"schema":{"subtype":"raster-cube","type":"object"}},{"deprecated":false,"description":"A reduction operator that resolves the conflict if the data overlaps. The reducer must return a value of the same data type as the input values are. The reduction operator may be a single process such as ``multiply()`` or consist of multiple sub-processes. `null` (the default) can be specified if no overlap resolver is required.","experimental":false,"name":"overlap_resolver","optional":true,"schema":{"parameters":[{"deprecated":false,"description":"The overlapping value from the first data cube `cube1`.","experimental":false,"name":"x","optional":false,"schema":{"description":"Any data type."}},{"deprecated":false,"description":"The overlapping value from the second data cube `cube2`.","experimental":false,"name":"y","optional":false,"schema":{"description":"Any data type."}},{"deprecated":false,"description":"Additional data passed by the user.","experimental":false,"name":"context","optional":true,"schema":{"description":"Any data type."}}],"returns":{"description":"The value to be set in the merged data cube.","schema":{"description":"Any data type."}},"subtype":"process-graph","type":"object"}},{"deprecated":false,"description":"Additional data to be passed to the overlap resolver.","experimental":false,"name":"context","optional":true,"schema":{"description":"Any data type."}}],"process_graph":{},"returns":{"description":"The merged data cube. See the process description for details regarding the dimensions and dimension properties (name, type, labels, reference system and resolution).","schema":{"subtype":"raster-cube","type":"object"}},"summary":"Merge two data cubes"},{"categories":["math"],"deprecated":false,"description":"Multiplies the two numbers `x` and `y` (*`x * y`*) and returns the computed product.\n\nNo-data values are taken into account so that `null` is returned if any element is such a value.\n\nThe computations follow [IEEE Standard 754](https://ieeexplore.ieee.org/document/8766229) whenever the processing environment supports it.","examples":[{"arguments":{"x":5,"y":2.5},"returns":12.5},{"arguments":{"x":-2,"y":-4},"returns":8},{"arguments":{"x":1,"y":null},"returns":null}],"exceptions":{"MultiplicandMissing":{"http":400,"message":"Multiplication requires at least two numbers."}},"experimental":false,"id":"multiply","links":[{"href":"http://mathworld.wolfram.com/Product.html","rel":"about","title":"Product explained by Wolfram MathWorld"},{"href":"https://ieeexplore.ieee.org/document/8766229","rel":"about","title":"IEEE Standard 754-2019 for Floating-Point Arithmetic"}],"parameters":[{"deprecated":false,"description":"The multiplier.","experimental":false,"name":"x","optional":false,"schema":{"type":["number","null"]}},{"deprecated":false,"description":"The multiplicand.","experimental":false,"name":"y","optional":false,"schema":{"type":["number","null"]}}],"process_graph":{"product":{"arguments":{"data":[{"from_parameter":"x"},{"from_parameter":"y"}],"ignore_nodata":false},"process_id":"product","result":true}},"returns":{"description":"The computed product of the two numbers.","schema":{"type":["number","null"]}},"summary":"Multiplication of two numbers"},{"categories":["math > indices","vegetation indices"],"deprecated":false,"description":"Computes the Normalized Difference Vegetation Index (NDVI). The NDVI is computed as *`(nir - red) / (nir + red)`*.\n\nThe `data` parameter expects a raster data cube with a dimension of type `bands` or a `DimensionAmbiguous` exception is thrown otherwise. By default, the dimension must have at least two bands with the common names `red` and `nir` assigned. Otherwise, the user has to specify the parameters `nir` and `red`. If neither is the case, either the exception `NirBandAmbiguous` or `RedBandAmbiguous` is thrown. The common names for each band are specified in the collection's band metadata and are *not* equal to the band names.\n\nBy default, the dimension of type `bands` is dropped by this process. To keep the dimension specify a new band name in the parameter `target_band`. This adds a new dimension label with the specified name to the dimension, which can be used to access the computed values. If a band with the specified name exists, a `BandExists` is thrown.\n\nThis process is very similar to the process ``normalized_difference()``, but determines the bands automatically based on the common names (`red`/`nir`) specified in the metadata.","exceptions":{"BandExists":{"http":400,"message":"A band with the specified target name exists."},"DimensionAmbiguous":{"http":400,"message":"dimension of type `bands` is not available or is ambiguous.."},"NirBandAmbiguous":{"http":400,"message":"The NIR band can't be resolved, please specify the specific NIR band name."},"RedBandAmbiguous":{"http":400,"message":"The red band can't be resolved, please specify the specific red band name."}},"experimental":false,"id":"ndvi","links":[{"href":"https://en.wikipedia.org/wiki/Normalized_difference_vegetation_index","rel":"about","title":"NDVI explained by Wikipedia"},{"href":"https://earthobservatory.nasa.gov/features/MeasuringVegetation/measuring_vegetation_2.php","rel":"about","title":"NDVI explained by NASA"},{"href":"https://github.com/radiantearth/stac-spec/tree/master/extensions/eo#common-band-names","rel":"about","title":"List of common band names as specified by the STAC specification"}],"parameters":[{"deprecated":false,"description":"A raster data cube with two bands that have the common names `red` and `nir` assigned.","experimental":false,"name":"data","optional":false,"schema":{"subtype":"raster-cube","type":"object"}},{"default":"nir","deprecated":false,"description":"The name of the NIR band. Defaults to the band that has the common name `nir` assigned.\n\nEither the unique band name (metadata field `name` in bands) or one of the common band names (metadata field `common_name` in bands) can be specified. If the unique band name and the common name conflict, the unique band name has a higher priority.","experimental":false,"name":"nir","optional":true,"schema":{"subtype":"band-name","type":"string"}},{"default":"red","deprecated":false,"description":"The name of the red band. Defaults to the band that has the common name `red` assigned.\n\nEither the unique band name (metadata field `name` in bands) or one of the common band names (metadata field `common_name` in bands) can be specified. If the unique band name and the common name conflict, the unique band name has a higher priority.","experimental":false,"name":"red","optional":true,"schema":{"subtype":"band-name","type":"string"}},{"deprecated":false,"description":"By default, the dimension of type `bands` is dropped. To keep the dimension specify a new band name in this parameter so that a new dimension label with the specified name will be added for the computed values.","experimental":false,"name":"target_band","optional":true,"schema":[{"pattern":"^\\w+$","type":"string"},{"type":"null"}]}],"process_graph":{},"returns":{"description":"A raster data cube containing the computed NDVI values. The structure of the data cube differs depending on the value passed to `target_band`:\n\n* `target_band` is `null`: The data cube does not contain the dimension of type `bands`, the number of dimensions decreases by one. The dimension properties (name, type, labels, reference system and resolution) for all other dimensions remain unchanged.\n* `target_band` is a string: The data cube keeps the same dimensions. The dimension properties remain unchanged, but the number of dimension labels for the dimension of type `bands` increases by one. The additional label is named as specified in `target_band`.","schema":{"subtype":"raster-cube","type":"object"}},"summary":"Normalized Difference Vegetation Index"},{"categories":["texts","comparison"],"deprecated":false,"description":"Compares whether `x` is *not* strictly equal to `y`.\n\n**Remarks:**\n\n* Data types MUST be checked strictly. For example, a string with the content *1* is not equal to the number *1*. Nevertheless, an integer *1* is equal to a floating-point number *1.0* as `integer` is a sub-type of `number`.\n* If any operand is `null`, the return value is `null`. Therefore, `neq(null, null)` returns `null` instead of `false`.\n* If any operand is an array or object, the return value is `false`.\n* Strings are expected to be encoded in UTF-8 by default.\n* Temporal strings MUST be compared differently than other strings and MUST NOT be compared based on their string representation due to different possible representations. For example, the time zone representation `Z` (for UTC) has the same meaning as `+00:00`.","examples":[{"arguments":{"x":1,"y":null},"returns":null},{"arguments":{"x":1,"y":1},"returns":false},{"arguments":{"x":1,"y":"1"},"returns":true},{"arguments":{"x":0,"y":false},"returns":true},{"arguments":{"delta":0.01,"x":1.02,"y":1},"returns":true},{"arguments":{"delta":0.01,"x":-1,"y":-1.001},"returns":false},{"arguments":{"delta":10,"x":115,"y":110},"returns":false},{"arguments":{"x":"Test","y":"test"},"returns":true},{"arguments":{"case_sensitive":false,"x":"Test","y":"test"},"returns":false},{"arguments":{"case_sensitive":false,"x":"\u00c4","y":"\u00e4"},"returns":false},{"arguments":{"x":"00:00:00+00:00","y":"00:00:00Z"},"returns":false},{"arguments":{"x":"2018-01-01T12:00:00Z","y":"2018-01-01T12:00:00"},"description":"`y` is not a valid date-time representation and therefore will be treated as a string so that the provided values are not equal.","returns":true},{"arguments":{"x":"2018-01-01T00:00:00Z","y":"2018-01-01T01:00:00+01:00"},"description":"01:00 in the time zone +1 is equal to 00:00 in UTC.","returns":false},{"arguments":{"x":[1,2,3],"y":[1,2,3]},"returns":false}],"exceptions":{},"experimental":false,"id":"neq","parameters":[{"deprecated":false,"description":"First operand.","experimental":false,"name":"x","optional":false,"schema":{"description":"Any data type is allowed."}},{"deprecated":false,"description":"Second operand.","experimental":false,"name":"y","optional":false,"schema":{"description":"Any data type is allowed."}},{"deprecated":false,"description":"Only applicable for comparing two numbers. If this optional parameter is set to a positive non-zero number the non-equality of two numbers is checked against a delta value. This is especially useful to circumvent problems with floating-point inaccuracy in machine-based computation.\n\nThis option is basically an alias for the following computation: `gt(abs(minus([x, y]), delta)`","experimental":false,"name":"delta","optional":true,"schema":{"type":["number","null"]}},{"default":true,"deprecated":false,"description":"Only applicable for comparing two strings. Case sensitive comparison can be disabled by setting this parameter to `false`.","experimental":false,"name":"case_sensitive","optional":true,"schema":{"type":"boolean"}}],"process_graph":{"eq":{"arguments":{"case_sensitive":{"from_parameter":"case_sensitive"},"delta":{"from_parameter":"delta"},"x":{"from_parameter":"x"},"y":{"from_parameter":"y"}},"process_id":"eq"},"not":{"arguments":{"x":{"from_node":"eq"}},"process_id":"not","result":true}},"returns":{"description":"`true` if `x` is *not* equal to `y`, `null` if any operand is `null`, otherwise `false`.","schema":{"type":["boolean","null"]}},"summary":"Not equal to comparison"},{"categories":["math > indices","vegetation indices"],"deprecated":false,"description":"Computes the normalized difference for two bands. The normalized difference is computed as *`(x - y) / (x + y)`*.\n\nThis process could be used for a number of remote sensing indices such as:\n\n* [NDVI](https://eos.com/ndvi/): `x` = NIR band, `y` = red band\n* [NDWI](https://eos.com/ndwi/): `x` = NIR band, `y` = SWIR band\n* [NDSI](https://eos.com/ndsi/): `x` = green band, `y` = SWIR band\n\nSome back-ends may have native processes such as ``ndvi()`` available for convenience.","exceptions":{},"experimental":false,"id":"normalized_difference","links":[{"href":"https://eos.com/ndvi/","rel":"related","title":"NDVI explained by EOS"},{"href":"https://eos.com/ndwi/","rel":"related","title":"NDWI explained by EOS"},{"href":"https://eos.com/ndsi/","rel":"related","title":"NDSI explained by EOS"}],"parameters":[{"deprecated":false,"description":"The value for the first band.","experimental":false,"name":"x","optional":false,"schema":{"type":"number"}},{"deprecated":false,"description":"The value for the second band.","experimental":false,"name":"y","optional":false,"schema":{"type":"number"}}],"process_graph":{"add":{"arguments":{"x":{"from_parameter":"x"},"y":{"from_parameter":"y"}},"process_id":"add"},"divide":{"arguments":{"x":{"from_node":"subtract"},"y":{"from_node":"add"}},"process_id":"divide","result":true},"subtract":{"arguments":{"x":{"from_parameter":"x"},"y":{"from_parameter":"y"}},"process_id":"subtract"}},"returns":{"description":"The computed normalized difference.","schema":{"maximum":1.0,"minimum":-1.0,"type":"number"}},"summary":"Normalized difference"},{"categories":["logic"],"deprecated":false,"description":"Inverts a single boolean so that `true` gets `false` and `false` gets `true`.\n\nThe no-data value `null` is passed through and therefore gets propagated.","examples":[{"arguments":{"x":null},"returns":null},{"arguments":{"x":false},"returns":true},{"arguments":{"x":true},"returns":false}],"exceptions":{},"experimental":false,"id":"not","parameters":[{"deprecated":false,"description":"Boolean value to invert.","experimental":false,"name":"x","optional":false,"schema":{"type":["boolean","null"]}}],"process_graph":{},"returns":{"description":"Inverted boolean value.","schema":{"type":["boolean","null"]}},"summary":"Inverting a boolean"},{"categories":["logic"],"deprecated":false,"description":"Checks if **at least one** of the values is true. Evaluates parameter `x` before `y` and stops once the outcome is unambiguous. If a component is `null`, the result will be `null` if the outcome is ambiguous.\n\n**Truth table:**\n\n```\na \\ b || null | false | true\n----- || ---- | ----- | ----\nnull  || null | null  | true\nfalse || null | false | true\ntrue  || true | true  | true\n```","examples":[{"arguments":{"x":true,"y":true},"returns":true},{"arguments":{"x":false,"y":false},"returns":false},{"arguments":{"x":true,"y":null},"returns":true},{"arguments":{"x":null,"y":true},"returns":true},{"arguments":{"x":false,"y":null},"returns":null}],"exceptions":{},"experimental":false,"id":"or","parameters":[{"deprecated":false,"description":"A boolean value.","experimental":false,"name":"x","optional":false,"schema":{"type":["boolean","null"]}},{"deprecated":false,"description":"A boolean value.","experimental":false,"name":"y","optional":false,"schema":{"type":["boolean","null"]}}],"process_graph":{"any":{"arguments":{"data":[{"from_parameter":"x"},{"from_parameter":"y"}],"ignore_nodata":false},"process_id":"any","result":true}},"returns":{"description":"Boolean result of the logical OR.","schema":{"type":["boolean","null"]}},"summary":"Logical OR"},{"categories":["arrays","sorting"],"deprecated":false,"description":"Computes a permutation which allows rearranging the data into ascending or descending order. In other words, this process computes the ranked (sorted) element positions in the original list.\n\n**Remarks:**\n\n* The positions in the result are zero-based.\n* Ties will be left in their original ordering.\n* Temporal strings can *not* be compared based on their string representation due to the time zone/time-offset representations.","examples":[{"arguments":{"data":[6,-1,2,null,7,4,null,8,3,9,9]},"returns":[1,2,8,5,0,4,7,9,10]},{"arguments":{"data":[6,-1,2,null,7,4,null,8,3,9,9],"nodata":true},"returns":[1,2,8,5,0,4,7,9,10,3,6]},{"arguments":{"asc":false,"data":[6,-1,2,null,7,4,null,8,3,9,9],"nodata":true},"returns":[9,10,7,4,0,5,8,2,1,3,6]},{"arguments":{"asc":false,"data":[6,-1,2,null,7,4,null,8,3,9,9],"nodata":false},"returns":[3,6,9,10,7,4,0,5,8,2,1]}],"exceptions":{},"experimental":false,"id":"order","links":[{"href":"http://mathworld.wolfram.com/Permutation.html","rel":"about","title":"Permutation explained by Wolfram MathWorld"}],"parameters":[{"deprecated":false,"description":"An array to compute the order for.","experimental":false,"name":"data","optional":false,"schema":{"items":{"anyOf":[{"type":"number"},{"type":"null"},{"format":"date-time","subtype":"date-time","type":"string"},{"format":"date","subtype":"date","type":"string"},{"format":"time","subtype":"time","type":"string"}]},"type":"array"}},{"default":true,"deprecated":false,"description":"The default sort order is ascending, with smallest values first. To sort in reverse (descending) order, set this parameter to `false`.","experimental":false,"name":"asc","optional":true,"schema":{"type":"boolean"}},{"deprecated":false,"description":"Controls the handling of no-data values (`null`). By default, they are removed. If set to `true`, missing values in the data are put last; if set to `false`, they are put first.","experimental":false,"name":"nodata","optional":true,"schema":{"type":["boolean","null"]}}],"process_graph":{},"returns":{"description":"The computed permutation.","schema":{"items":{"minimum":0,"type":"integer"},"type":"array"}},"summary":"Create a permutation"},{"categories":["math > constants","math > trigonometric"],"deprecated":false,"description":"The real number Pi (\u03c0) is a mathematical constant that is the ratio of the circumference of a circle to its diameter. The numerical value is approximately *3.14159*.","exceptions":{},"experimental":false,"id":"pi","links":[{"href":"http://mathworld.wolfram.com/Pi.html","rel":"about","title":"Mathematical constant Pi explained by Wolfram MathWorld"}],"parameters":[],"process_graph":{},"returns":{"description":"The numerical value of Pi.","schema":{"type":"number"}},"summary":"Pi (\u03c0)"},{"categories":["math","math > exponential & logarithmic"],"deprecated":false,"description":"Computes the exponentiation for the base `base` raised to the power of `p`.\n\nThe no-data value `null` is passed through and therefore gets propagated if any of the arguments is `null`.","examples":[{"arguments":{"base":0,"p":2},"returns":0},{"arguments":{"base":2.5,"p":0},"returns":1},{"arguments":{"base":3,"p":3},"returns":27},{"arguments":{"base":5,"p":-1},"returns":0.2},{"arguments":{"base":1,"p":0.5},"returns":1},{"arguments":{"base":1,"p":null},"returns":null},{"arguments":{"base":null,"p":2},"returns":null}],"exceptions":{},"experimental":false,"id":"power","links":[{"href":"http://mathworld.wolfram.com/Power.html","rel":"about","title":"Power explained by Wolfram MathWorld"}],"parameters":[{"deprecated":false,"description":"The numerical base.","experimental":false,"name":"base","optional":false,"schema":{"type":["number","null"]}},{"deprecated":false,"description":"The numerical exponent.","experimental":false,"name":"p","optional":false,"schema":{"type":["number","null"]}}],"process_graph":{},"returns":{"description":"The computed value for `base` raised to the power of `p`.","schema":{"type":["number","null"]}},"summary":"Exponentiation"},{"categories":["math","reducer"],"deprecated":false,"description":"Multiplies all elements in a sequential array of numbers and returns the computed product.\n\nBy default no-data values are ignored. Setting `ignore_nodata` to `false` considers no-data values so that `null` is returned if any element is such a value.\n\nThe computations follow [IEEE Standard 754](https://ieeexplore.ieee.org/document/8766229) whenever the processing environment supports it.","examples":[{"arguments":{"data":[5,0]},"returns":0},{"arguments":{"data":[-2,4,2.5]},"returns":-20},{"arguments":{"data":[1,null],"ignore_nodata":false},"returns":null},{"arguments":{"data":[-1]},"returns":-1},{"arguments":{"data":[null],"ignore_nodata":false},"returns":null},{"arguments":{"data":[]},"returns":null}],"exceptions":{},"experimental":false,"id":"product","links":[{"href":"http://mathworld.wolfram.com/Product.html","rel":"about","title":"Product explained by Wolfram MathWorld"},{"href":"https://ieeexplore.ieee.org/document/8766229","rel":"about","title":"IEEE Standard 754-2019 for Floating-Point Arithmetic"}],"parameters":[{"deprecated":false,"description":"An array of numbers.","experimental":false,"name":"data","optional":false,"schema":{"items":{"type":["number","null"]},"type":"array"}},{"default":true,"deprecated":false,"description":"Indicates whether no-data values are ignored or not. Ignores them by default. Setting this flag to `false` considers no-data values so that `null` is returned if any value is such a value.","experimental":false,"name":"ignore_nodata","optional":true,"schema":{"type":"boolean"}}],"process_graph":{},"returns":{"description":"The computed product of the sequence of numbers.","schema":{"type":["number","null"]}},"summary":"Compute the product by multiplying numbers"},{"categories":["math"],"deprecated":false,"description":"Calculates quantiles, which are cut points dividing the range of a probability distribution into either\n\n* intervals corresponding to the given `probabilities` or\n* (nearly) equal-sized intervals (q-quantiles based on the parameter `q`).\n\nEither the parameter `probabilities` or `q` must be specified, otherwise the `QuantilesParameterMissing` exception is thrown. If both parameters are set the `QuantilesParameterConflict` exception is thrown.","examples":[{"arguments":{"data":[2,4,4,4,5,5,7,9],"probabilities":[0.005,0.01,0.02,0.05,0.1,0.5]},"returns":[2.07,2.14,2.28,2.7,3.4,4.5]},{"arguments":{"data":[2,4,4,4,5,5,7,9],"q":4},"returns":[4.0,4.5,5.5]},{"arguments":{"data":[-1,-0.5,null,1],"q":2},"returns":[-0.5]},{"arguments":{"data":[-1,-0.5,null,1],"ignore_nodata":false,"q":4},"returns":[null,null,null]},{"arguments":{"data":[],"probabilities":[0.1,0.5]},"returns":[null,null],"title":"Empty array"}],"exceptions":{"QuantilesParameterConflict":{"http":400,"message":"The process `quantiles` only allows that either the `probabilities` or the `q` parameter is set."},"QuantilesParameterMissing":{"http":400,"message":"The process `quantiles` requires either the `probabilities` or `q` parameter to be set."}},"experimental":false,"id":"quantiles","links":[{"href":"https://en.wikipedia.org/wiki/Quantile","rel":"about","title":"Quantiles explained by Wikipedia"}],"parameters":[{"deprecated":false,"description":"An array of numbers.","experimental":false,"name":"data","optional":false,"schema":{"items":{"type":["number","null"]},"type":"array"}},{"deprecated":false,"description":"A list of probabilities to calculate quantiles for. The probabilities must be between 0 and 1.","experimental":false,"name":"probabilities","optional":true,"schema":{"items":{"maximum":1,"minimum":0,"type":"number"},"type":"array"}},{"deprecated":false,"description":"Intervals to calculate quantiles for. Calculates q-quantiles with (nearly) equal-sized intervals.","experimental":false,"name":"q","optional":true,"schema":{"minimum":2.0,"type":"integer"}},{"default":true,"deprecated":false,"description":"Indicates whether no-data values are ignored or not. Ignores them by default. Setting this flag to `false` considers no-data values so that an array with `null` values is returned if any element is such a value.","experimental":false,"name":"ignore_nodata","optional":true,"schema":{"type":"boolean"}}],"process_graph":{},"returns":{"description":"An array with the computed quantiles. The list has either\n\n* as many elements as the given list of `probabilities` had or\n* *`q`-1* elements.\n\nIf the input array is empty the resulting array is filled with as many `null` values as required according to the list above. See the 'Empty array' example for an example.","schema":{"items":{"type":["number","null"]},"type":"array"}},"summary":"Quantiles"},{"categories":["arrays","sorting"],"deprecated":false,"description":"Rearranges an array based on a permutation, i.e. a ranked list of element positions in the original list. The positions must be zero-based.","examples":[{"arguments":{"data":[5,4,3],"order":[2,1,0]},"returns":[3,4,5],"title":"Reverse a list"},{"arguments":{"data":[5,4,3,2],"order":[1,3]},"returns":[4,2],"title":"Remove two elements"},{"arguments":{"data":[5,4,3,2],"order":[0,2,1,3]},"returns":[5,3,4,2],"title":"Swap two elements"}],"exceptions":{},"experimental":false,"id":"rearrange","links":[{"href":"http://mathworld.wolfram.com/Permutation.html","rel":"about","title":"Permutation explained by Wolfram MathWorld"}],"parameters":[{"deprecated":false,"description":"The array to rearrange.","experimental":false,"name":"data","optional":false,"schema":{"items":{"description":"Any data type is allowed."},"type":"array"}},{"deprecated":false,"description":"The permutation used for rearranging.","experimental":false,"name":"order","optional":false,"schema":{"items":{"minimum":0,"type":"integer"},"type":"array"}}],"process_graph":{},"returns":{"description":"The rearranged array.","schema":{"items":{"description":"Any data type is allowed."},"type":"array"}},"summary":"Rearrange an array based on a permutation"},{"categories":["cubes","reducer"],"deprecated":false,"description":"Applies a reducer to a data cube dimension by collapsing all the pixel values along the specified dimension into an output value computed by the reducer.\n\nThe dimension is dropped. To avoid this, use ``apply_dimension()`` instead.","exceptions":{"DimensionNotAvailable":{"http":400,"message":"A dimension with the specified name does not exist."}},"experimental":false,"id":"reduce_dimension","links":[{"href":"https://openeo.org/documentation/1.0/datacubes.html#reduce","rel":"about","title":"Reducers explained in the openEO documentation"}],"parameters":[{"deprecated":false,"description":"A data cube.","experimental":false,"name":"data","optional":false,"schema":{"subtype":"raster-cube","type":"object"}},{"deprecated":false,"description":"A reducer to apply on the specified dimension. A reducer is a single process such as ``mean()`` or a set of processes, which computes a single value for a list of values, see the category 'reducer' for such processes.","experimental":false,"name":"reducer","optional":false,"schema":{"parameters":[{"deprecated":false,"description":"A labeled array with elements of any type.","experimental":false,"name":"data","optional":false,"schema":{"items":{"description":"Any data type."},"subtype":"labeled-array","type":"array"}},{"deprecated":false,"description":"Additional data passed by the user.","experimental":false,"name":"context","optional":true,"schema":{"description":"Any data type."}}],"returns":{"description":"The value to be set in the new data cube.","schema":{"description":"Any data type."}},"subtype":"process-graph","type":"object"}},{"deprecated":false,"description":"The name of the dimension over which to reduce. Fails with a `DimensionNotAvailable` exception if the specified dimension does not exist.","experimental":false,"name":"dimension","optional":false,"schema":{"type":"string"}},{"deprecated":false,"description":"Additional data to be passed to the reducer.","experimental":false,"name":"context","optional":true,"schema":{"description":"Any data type."}}],"process_graph":{},"returns":{"description":"A data cube with the newly computed values. It is missing the given dimension, the number of dimensions decreases by one. The dimension properties (name, type, labels, reference system and resolution) for all other dimensions remain unchanged.","schema":{"subtype":"raster-cube","type":"object"}},"summary":"Reduce dimensions"},{"categories":["cubes"],"deprecated":false,"description":"Renames the labels of the specified dimension in the data cube from `source` to `target`.\n\nIf the array for the source labels is empty (the default), the dimension labels are expected to be enumerated with zero-based numbering (0,1,2,3,...) so that the dimension labels directly map to the indices of the array specified for the parameter `target`. If the dimension labels are not enumerated and the `target` parameter is not specified, the `LabelsNotEnumerated` exception is thrown. The number of the source and target labels must be equal. Otherwise, the exception `LabelMismatch` is thrown.\n\nThis process doesn't change the order of the labels and their corresponding data.","examples":[{"arguments":{"data":{"from_parameter":"data"},"dimension":"bands","source":["B1","B2","B3"],"target":["red","green","blue"]},"description":"Renaming the bands from `B1` to `red`, from `B2` to `green` and from `B3` to `blue`.","returns":null,"title":"Rename named labels"}],"exceptions":{"LabelExists":{"http":400,"message":"A label with the specified name exists."},"LabelMismatch":{"http":400,"message":"The number of labels in the parameters `source` and `target` don't match."},"LabelNotAvailable":{"http":400,"message":"A label with the specified name does not exist."},"LabelsNotEnumerated":{"http":400,"message":"The dimension labels are not enumerated."}},"experimental":false,"id":"rename_labels","links":[{"href":"https://processes.openeo.org/1.1.0/examples/rename-enumerated-labels.json","rel":"example","title":"Rename enumerated labels","type":"application/json"}],"parameters":[{"deprecated":false,"description":"The data cube.","experimental":false,"name":"data","optional":false,"schema":{"subtype":"raster-cube","type":"object"}},{"deprecated":false,"description":"The name of the dimension to rename the labels for.","experimental":false,"name":"dimension","optional":false,"schema":{"type":"string"}},{"deprecated":false,"description":"The new names for the labels. The dimension labels in the data cube are expected to be enumerated if the parameter `target` is not specified. If a target dimension label already exists in the data cube, a `LabelExists` exception is thrown.","experimental":false,"name":"target","optional":false,"schema":{"items":{"type":["number","string"]},"type":"array"}},{"default":[],"deprecated":false,"description":"The names of the labels as they are currently in the data cube. The array defines an unsorted and potentially incomplete list of labels that should be renamed to the names available in the corresponding array elements in the parameter `target`. If one of the source dimension labels doesn't exist, the `LabelNotAvailable` exception is thrown. By default, the array is empty so that the dimension labels in the data cube are expected to be enumerated.","experimental":false,"name":"source","optional":true,"schema":{"items":{"type":["number","string"]},"type":"array"}}],"process_graph":{},"returns":{"description":"The data cube with the same dimensions. The dimension properties (name, type, labels, reference system and resolution) remain unchanged, except that for the given dimension the labels change. The old labels can not be referred to any longer. The number of labels remains the same.","schema":{"subtype":"raster-cube","type":"object"}},"summary":"Rename dimension labels"},{"categories":["cubes","aggregate & resample"],"deprecated":false,"description":"Resamples the spatial dimensions (x,y) from a source data cube to align with the corresponding dimensions of the given target data cube. Returns a new data cube with the resampled dimensions.\n\nTo resample a data cube to a specific resolution or projection regardless of an existing target data cube, refer to ``resample_spatial()``.","exceptions":{},"experimental":false,"id":"resample_cube_spatial","links":[{"href":"https://openeo.org/documentation/1.0/datacubes.html#resample","rel":"about","title":"Resampling explained in the openEO documentation"}],"parameters":[{"deprecated":false,"description":"A data cube.","experimental":false,"name":"data","optional":false,"schema":{"subtype":"raster-cube","type":"object"}},{"deprecated":false,"description":"A data cube that describes the spatial target resolution.","experimental":false,"name":"target","optional":false,"schema":{"subtype":"raster-cube","type":"object"}},{"default":"near","deprecated":false,"description":"Resampling method to use. The following options are available and are meant to align with [`gdalwarp`](https://gdal.org/programs/gdalwarp.html#cmdoption-gdalwarp-r):\n\n* `average`: average (mean) resampling, computes the weighted average of all valid pixels\n* `bilinear`: bilinear resampling\n* `cubic`: cubic resampling\n* `cubicspline`: cubic spline resampling\n* `lanczos`: Lanczos windowed sinc resampling\n* `max`: maximum resampling, selects the maximum value from all valid pixels\n* `med`: median resampling, selects the median value of all valid pixels\n* `min`: minimum resampling, selects the minimum value from all valid pixels\n* `mode`: mode resampling, selects the value which appears most often of all the sampled points\n* `near`: nearest neighbour resampling (default)\n* `q1`: first quartile resampling, selects the first quartile value of all valid pixels\n* `q3`: third quartile resampling, selects the third quartile value of all valid pixels\n* `rms` root mean square (quadratic mean) of all valid pixels\n* `sum`: compute the weighted sum of all valid pixels\n\nValid pixels are determined based on the function ``is_valid()``.","experimental":false,"name":"method","optional":true,"schema":{"enum":["average","bilinear","cubic","cubicspline","lanczos","max","med","min","mode","near","q1","q3","rms","sum"],"type":"string"}}],"process_graph":{},"returns":{"description":"A data cube with the same dimensions. The dimension properties (name, type, labels, reference system and resolution) remain unchanged, except for the resolution and dimension labels of the spatial dimensions.","schema":{"subtype":"raster-cube","type":"object"}},"summary":"Resample the spatial dimensions to match a target data cube"},{"categories":["math > rounding"],"deprecated":false,"description":"Rounds a real number `x` to specified precision `p`.\n\nIf the fractional part of `x` is halfway between two integers, one of which is even and the other odd, then the even number is returned.\nThis behavior follows [IEEE Standard 754](https://ieeexplore.ieee.org/document/8766229). This kind of rounding is also called \"round to nearest (even)\" or \"banker's rounding\". It minimizes rounding errors that result from consistently rounding a midpoint value in a single direction.\n\nThe no-data value `null` is passed through and therefore gets propagated.","examples":[{"arguments":{"x":0},"returns":0},{"arguments":{"p":1,"x":3.56},"returns":3.6},{"arguments":{"p":2,"x":-0.4444444},"returns":-0.44},{"arguments":{"x":-2.5},"returns":-2},{"arguments":{"x":-3.5},"returns":-4},{"arguments":{"p":-2,"x":1234.5},"returns":1200}],"exceptions":{},"experimental":false,"id":"round","links":[{"href":"http://mathworld.wolfram.com/AbsoluteValue.html","rel":"about","title":"Absolute value explained by Wolfram MathWorld"},{"href":"https://ieeexplore.ieee.org/document/8766229","rel":"about","title":"IEEE Standard 754-2019 for Floating-Point Arithmetic"}],"parameters":[{"deprecated":false,"description":"A number to round.","experimental":false,"name":"x","optional":false,"schema":{"type":["number","null"]}},{"default":0,"deprecated":false,"description":"A positive number specifies the number of digits after the decimal point to round to. A negative number means rounding to a power of ten, so for example *-2* rounds to the nearest hundred. Defaults to *0*.","experimental":false,"name":"p","optional":true,"schema":{"type":"integer"}}],"process_graph":{},"returns":{"description":"The rounded number.","schema":{"type":["number","null"]}},"summary":"Round to a specified precision"},{"categories":["cubes","import","udf"],"deprecated":false,"description":"Runs a UDF in one of the supported runtime environments.\n\nThe process can either:\n\n1. load and run a UDF stored in a file on the server-side workspace of the authenticated user. The path to the UDF file must be relative to the root directory of the user's workspace.\n2. fetch and run a remotely stored and published UDF by absolute URI.\n3. run the source code specified inline as string.\n\nThe loaded UDF can be executed in several processes such as ``aggregate_spatial()``, ``apply()``, ``apply_dimension()`` and ``reduce_dimension()``. In this case, an array is passed instead of a raster data cube. The user must ensure that the data is properly passed as an array so that the UDF can make sense of it.","exceptions":{"InvalidVersion":{"http":400,"message":"The specified UDF runtime version is not supported."}},"experimental":false,"id":"run_udf","parameters":[{"deprecated":false,"description":"The data to be passed to the UDF as an array or raster data cube.","experimental":false,"name":"data","optional":false,"schema":[{"subtype":"raster-cube","title":"Raster data cube","type":"object"},{"items":{"description":"Any data type."},"minItems":1.0,"title":"Array","type":"array"},{"description":"A single value of any data type.","title":"Single Value"}]},{"deprecated":false,"description":"Either source code, an absolute URL or a path to a UDF script.","experimental":false,"name":"udf","optional":false,"schema":[{"description":"Absolute URL to a UDF","format":"uri","pattern":"^(http|https)://","subtype":"uri","type":"string"},{"description":"Path to a UDF uploaded to the server.","pattern":"^[^\r\n\\:'\"]+$","subtype":"file-path","type":"string"},{"description":"The multi-line source code of a UDF, must contain a newline/line-break.","pattern":"(\r\n|\r|\n)","subtype":"udf-code","type":"string"}]},{"deprecated":false,"description":"A UDF runtime identifier available at the back-end.","experimental":false,"name":"runtime","optional":false,"schema":{"subtype":"udf-runtime","type":"string"}},{"deprecated":false,"description":"An UDF runtime version. If set to `null`, the default runtime version specified for each runtime is used.","experimental":false,"name":"version","optional":true,"schema":[{"subtype":"udf-runtime-version","type":"string"},{"title":"Default runtime version","type":"null"}]},{"default":{},"deprecated":false,"description":"Additional data such as configuration options to be passed to the UDF.","experimental":false,"name":"context","optional":true,"schema":{"type":"object"}}],"process_graph":{},"returns":{"description":"The data processed by the UDF.\n\n* Returns a raster data cube, if a raster data cube is passed for `data`. Details on the dimensions and dimension properties (name, type, labels, reference system and resolution) depend on the UDF.\n* If an array is passed for `data`, the returned value can be of any data type, but is exactly what the UDF returns.","schema":[{"subtype":"raster-cube","title":"Raster data cube","type":"object"},{"description":"Any data type.","title":"Any"}]},"summary":"Run a UDF"},{"categories":["cubes","export"],"deprecated":false,"description":"Saves processed data to the server-side user workspace of the authenticated user. This process aims to be compatible with GDAL/OGR formats and options. STAC-compatible metadata should be stored with the processed data.\n\nCalling this process may be rejected by back-ends in the context of secondary web services.","exceptions":{"FormatUnsuitable":{"http":400,"message":"Data can't be transformed into the requested output format."}},"experimental":false,"id":"save_result","links":[{"href":"https://www.gdal.org/formats_list.html","rel":"about","title":"GDAL Raster Formats"},{"href":"https://www.gdal.org/ogr_formats.html","rel":"about","title":"OGR Vector Formats"}],"parameters":[{"deprecated":false,"description":"The data to save.","experimental":false,"name":"data","optional":false,"schema":[{"subtype":"raster-cube","type":"object"},{"subtype":"vector-cube","type":"object"}]},{"deprecated":false,"description":"The file format to save to. It must be one of the values that the server reports as supported output file formats, which usually correspond to the short GDAL/OGR codes. If the format is not suitable for storing the underlying data structure, a `FormatUnsuitable` exception will be thrown. This parameter is *case insensitive*.","experimental":false,"name":"format","optional":false,"schema":{"subtype":"output-format","type":"string"}},{"default":{},"deprecated":false,"description":"The file format parameters to be used to create the file(s). Must correspond to the parameters that the server reports as supported parameters for the chosen `format`. The parameter names and valid values usually correspond to the GDAL/OGR format options.","experimental":false,"name":"options","optional":true,"schema":{"subtype":"output-format-options","type":"object"}}],"process_graph":{},"returns":{"description":"`false` if saving failed, `true` otherwise.","schema":{"type":"boolean"}},"summary":"Save processed data to storage"},{"categories":["math","reducer"],"deprecated":false,"description":"Computes the sample standard deviation, which quantifies the amount of variation of an array of numbers. It is defined to be the square root of the corresponding variance (see ``variance()``).\n\nA low standard deviation indicates that the values tend to be close to the expected value, while a high standard deviation indicates that the values are spread out over a wider range.\n\nAn array without non-`null` elements resolves always with `null`.","examples":[{"arguments":{"data":[-1,1,3,null]},"returns":2},{"arguments":{"data":[-1,1,3,null],"ignore_nodata":false},"returns":null},{"arguments":{"data":[]},"description":"The input array is empty: return `null`.","returns":null}],"exceptions":{},"experimental":false,"id":"sd","links":[{"href":"http://mathworld.wolfram.com/StandardDeviation.html","rel":"about","title":"Standard deviation explained by Wolfram MathWorld"}],"parameters":[{"deprecated":false,"description":"An array of numbers.","experimental":false,"name":"data","optional":false,"schema":{"items":{"type":["number","null"]},"type":"array"}},{"default":true,"deprecated":false,"description":"Indicates whether no-data values are ignored or not. Ignores them by default. Setting this flag to `false` considers no-data values so that `null` is returned if any value is such a value.","experimental":false,"name":"ignore_nodata","optional":true,"schema":{"type":"boolean"}}],"process_graph":{"power":{"arguments":{"base":{"from_node":"variance"},"p":0.5},"process_id":"power","result":true},"variance":{"arguments":{"data":{"from_parameter":"data"},"ignore_nodata":{"from_parameter":"ignore_nodata"}},"process_id":"variance"}},"returns":{"description":"The computed sample standard deviation.","schema":{"type":["number","null"]}},"summary":"Standard deviation"},{"categories":["math"],"deprecated":false,"description":"The signum (also known as *sign*) of `x` is defined as:\n\n* *1* if *x > 0*\n* *0* if *x = 0*\n* *-1* if *x < 0*\n\nThe no-data value `null` is passed through and therefore gets propagated.","examples":[{"arguments":{"x":-2},"returns":-1},{"arguments":{"x":3.5},"returns":1},{"arguments":{"x":0},"returns":0},{"arguments":{"x":null},"returns":null}],"exceptions":{},"experimental":false,"id":"sgn","links":[{"href":"http://mathworld.wolfram.com/Sign.html","rel":"about","title":"Sign explained by Wolfram MathWorld"}],"parameters":[{"deprecated":false,"description":"A number.","experimental":false,"name":"x","optional":false,"schema":{"type":["number","null"]}}],"process_graph":{"gt0":{"arguments":{"x":{"from_parameter":"x"},"y":0},"process_id":"gt"},"if_gt0":{"arguments":{"accept":1,"reject":{"from_parameter":"x"},"value":{"from_node":"gt0"}},"process_id":"if"},"if_lt0":{"arguments":{"accept":-1,"reject":{"from_node":"if_gt0"},"value":{"from_node":"lt0"}},"process_id":"if","result":true},"lt0":{"arguments":{"x":{"from_parameter":"x"},"y":0},"process_id":"lt"}},"returns":{"description":"The computed signum value of `x`.","schema":{"type":["number","null"]}},"summary":"Signum"},{"categories":["math > trigonometric"],"deprecated":false,"description":"Computes the sine of `x`.\n\nWorks on radians only.\nThe no-data value `null` is passed through and therefore gets propagated.","examples":[{"arguments":{"x":0},"returns":0}],"exceptions":{},"experimental":false,"id":"sin","links":[{"href":"http://mathworld.wolfram.com/Sine.html","rel":"about","title":"Sine explained by Wolfram MathWorld"}],"parameters":[{"deprecated":false,"description":"An angle in radians.","experimental":false,"name":"x","optional":false,"schema":{"type":["number","null"]}}],"process_graph":{},"returns":{"description":"The computed sine of `x`.","schema":{"type":["number","null"]}},"summary":"Sine"},{"categories":["math > trigonometric"],"deprecated":false,"description":"Computes the hyperbolic sine of `x`.\n\nWorks on radians only.\nThe no-data value `null` is passed through and therefore gets propagated.","examples":[{"arguments":{"x":0},"returns":0}],"exceptions":{},"experimental":false,"id":"sinh","links":[{"href":"http://mathworld.wolfram.com/HyperbolicSine.html","rel":"about","title":"Hyperbolic sine explained by Wolfram MathWorld"}],"parameters":[{"deprecated":false,"description":"An angle in radians.","experimental":false,"name":"x","optional":false,"schema":{"type":["number","null"]}}],"process_graph":{},"returns":{"description":"The computed hyperbolic sine of `x`.","schema":{"type":["number","null"]}},"summary":"Hyperbolic sine"},{"categories":["arrays","sorting"],"deprecated":false,"description":"Sorts an array into ascending (default) or descending order.\n\n**Remarks:**\n\n* Ties will be left in their original ordering.\n* Temporal strings can *not* be compared based on their string representation due to the time zone/time-offset representations.","examples":[{"arguments":{"data":[6,-1,2,null,7,4,null,8,3,9,9]},"returns":[-1,2,3,4,6,7,8,9,9]},{"arguments":{"asc":false,"data":[6,-1,2,null,7,4,null,8,3,9,9],"nodata":true},"returns":[9,9,8,7,6,4,3,2,-1,null,null]}],"exceptions":{},"experimental":false,"id":"sort","parameters":[{"deprecated":false,"description":"An array with data to sort.","experimental":false,"name":"data","optional":false,"schema":{"items":{"anyOf":[{"type":"number"},{"type":"null"},{"format":"date-time","subtype":"date-time","type":"string"},{"format":"date","subtype":"date","type":"string"},{"format":"time","subtype":"time","type":"string"}]},"type":"array"}},{"default":true,"deprecated":false,"description":"The default sort order is ascending, with smallest values first. To sort in reverse (descending) order, set this parameter to `false`.","experimental":false,"name":"asc","optional":true,"schema":{"type":"boolean"}},{"deprecated":false,"description":"Controls the handling of no-data values (`null`). By default, they are removed. If set to `true`, missing values in the data are put last; if set to `false`, they are put first.","experimental":false,"name":"nodata","optional":true,"schema":{"type":["boolean","null"]}}],"process_graph":{"order":{"arguments":{"asc":{"from_parameter":"asc"},"data":{"from_parameter":"data"},"nodata":{"from_parameter":"nodata"}},"process_id":"order"},"rearrange":{"arguments":{"data":{"from_parameter":"data"},"order":{"from_node":"order"}},"process_id":"rearrange","result":true}},"returns":{"description":"The sorted array.","schema":{"items":{"anyOf":[{"type":"number"},{"type":"null"},{"format":"date-time","subtype":"date-time","type":"string"},{"format":"date","subtype":"date","type":"string"},{"format":"time","subtype":"time","type":"string"}]},"type":"array"}},"summary":"Sort data"},{"categories":["math","math > exponential & logarithmic"],"deprecated":false,"description":"Computes the square root of a real number `x`, which is equal to calculating `x` to the power of *0.5*.\n\nA square root of x is a number a such that *`a\u00b2 = x`*. Therefore, the square root is the inverse function of a to the power of 2, but only for *a >= 0*.\n\nThe no-data value `null` is passed through and therefore gets propagated.","examples":[{"arguments":{"x":0},"returns":0},{"arguments":{"x":1},"returns":1},{"arguments":{"x":9},"returns":3},{"arguments":{"x":null},"returns":null}],"exceptions":{},"experimental":false,"id":"sqrt","links":[{"href":"http://mathworld.wolfram.com/SquareRoot.html","rel":"about","title":"Square root explained by Wolfram MathWorld"}],"parameters":[{"deprecated":false,"description":"A number.","experimental":false,"name":"x","optional":false,"schema":{"type":["number","null"]}}],"process_graph":{"power":{"arguments":{"base":{"from_parameter":"x"},"p":0.5},"process_id":"power","result":true}},"returns":{"description":"The computed square root.","schema":{"type":["number","null"]}},"summary":"Square root"},{"categories":["math"],"deprecated":false,"description":"Subtracts argument `y` from the argument `x` (*`x - y`*) and returns the computed result.\n\nNo-data values are taken into account so that `null` is returned if any element is such a value.\n\nThe computations follow [IEEE Standard 754](https://ieeexplore.ieee.org/document/8766229) whenever the processing environment supports it.","examples":[{"arguments":{"x":5,"y":2.5},"returns":2.5},{"arguments":{"x":-2,"y":4},"returns":-6},{"arguments":{"x":1,"y":null},"returns":null}],"exceptions":{},"experimental":false,"id":"subtract","links":[{"href":"http://mathworld.wolfram.com/Subtraction.html","rel":"about","title":"Subtraction explained by Wolfram MathWorld"},{"href":"https://ieeexplore.ieee.org/document/8766229","rel":"about","title":"IEEE Standard 754-2019 for Floating-Point Arithmetic"}],"parameters":[{"deprecated":false,"description":"The minuend.","experimental":false,"name":"x","optional":false,"schema":{"type":["number","null"]}},{"deprecated":false,"description":"The subtrahend.","experimental":false,"name":"y","optional":false,"schema":{"type":["number","null"]}}],"process_graph":{},"returns":{"description":"The computed result.","schema":{"type":["number","null"]}},"summary":"Subtraction of two numbers"},{"categories":["math","reducer"],"deprecated":false,"description":"Sums up all elements in a sequential array of numbers and returns the computed sum.\n\nBy default no-data values are ignored. Setting `ignore_nodata` to `false` considers no-data values so that `null` is returned if any element is such a value.\n\nThe computations follow [IEEE Standard 754](https://ieeexplore.ieee.org/document/8766229) whenever the processing environment supports it.","examples":[{"arguments":{"data":[5,1]},"returns":6},{"arguments":{"data":[-2,4,2.5]},"returns":4.5},{"arguments":{"data":[1,null],"ignore_nodata":false},"returns":null},{"arguments":{"data":[100]},"returns":100},{"arguments":{"data":[null],"ignore_nodata":false},"returns":null},{"arguments":{"data":[]},"returns":null}],"exceptions":{},"experimental":false,"id":"sum","links":[{"href":"http://mathworld.wolfram.com/Sum.html","rel":"about","title":"Sum explained by Wolfram MathWorld"},{"href":"https://ieeexplore.ieee.org/document/8766229","rel":"about","title":"IEEE Standard 754-2019 for Floating-Point Arithmetic"}],"parameters":[{"deprecated":false,"description":"An array of numbers.","experimental":false,"name":"data","optional":false,"schema":{"items":{"type":["number","null"]},"type":"array"}},{"default":true,"deprecated":false,"description":"Indicates whether no-data values are ignored or not. Ignores them by default. Setting this flag to `false` considers no-data values so that `null` is returned if any value is such a value.","experimental":false,"name":"ignore_nodata","optional":true,"schema":{"type":"boolean"}}],"process_graph":{},"returns":{"description":"The computed sum of the sequence of numbers.","schema":{"type":["number","null"]}},"summary":"Compute the sum by adding up numbers"},{"categories":["math > trigonometric"],"deprecated":false,"description":"Computes the tangent of `x`. The tangent is defined to be the sine of x divided by the cosine of x.\n\nWorks on radians only.\nThe no-data value `null` is passed through and therefore gets propagated.","examples":[{"arguments":{"x":0},"returns":0}],"exceptions":{},"experimental":false,"id":"tan","links":[{"href":"http://mathworld.wolfram.com/Tangent.html","rel":"about","title":"Tangent explained by Wolfram MathWorld"}],"parameters":[{"deprecated":false,"description":"An angle in radians.","experimental":false,"name":"x","optional":false,"schema":{"type":["number","null"]}}],"process_graph":{},"returns":{"description":"The computed tangent of `x`.","schema":{"type":["number","null"]}},"summary":"Tangent"},{"categories":["math > trigonometric"],"deprecated":false,"description":"Computes the hyperbolic tangent of `x`. The tangent is defined to be the hyperbolic sine of x divided by the hyperbolic cosine of x.\n\nWorks on radians only.\nThe no-data value `null` is passed through and therefore gets propagated.","examples":[{"arguments":{"x":0},"returns":0}],"exceptions":{},"experimental":false,"id":"tanh","links":[{"href":"http://mathworld.wolfram.com/HyperbolicTangent.html","rel":"about","title":"Hyperbolic tangent explained by Wolfram MathWorld"}],"parameters":[{"deprecated":false,"description":"An angle in radians.","experimental":false,"name":"x","optional":false,"schema":{"type":["number","null"]}}],"process_graph":{},"returns":{"description":"The computed hyperbolic tangent of `x`.","schema":{"type":["number","null"]}},"summary":"Hyperbolic tangent"},{"categories":["math","reducer"],"deprecated":false,"description":"Computes the sample variance of an array of numbers by calculating the square of the standard deviation (see ``sd()``). It is defined to be the expectation of the squared deviation of a random variable from its expected value. Basically, it measures how far the numbers in the array are spread out from their average value.\n\nAn array without non-`null` elements resolves always with `null`.","examples":[{"arguments":{"data":[-1,1,3]},"returns":4},{"arguments":{"data":[2,3,3,null,4,4,5]},"returns":1.1},{"arguments":{"data":[-1,1,null,3],"ignore_nodata":false},"returns":null},{"arguments":{"data":[]},"description":"The input array is empty: return `null`.","returns":null}],"exceptions":{},"experimental":false,"id":"variance","links":[{"href":"http://mathworld.wolfram.com/Variance.html","rel":"about","title":"Variance explained by Wolfram MathWorld"}],"parameters":[{"deprecated":false,"description":"An array of numbers.","experimental":false,"name":"data","optional":false,"schema":{"items":{"type":["number","null"]},"type":"array"}},{"default":true,"deprecated":false,"description":"Indicates whether no-data values are ignored or not. Ignores them by default. Setting this flag to `false` considers no-data values so that `null` is returned if any value is such a value.","experimental":false,"name":"ignore_nodata","optional":true,"schema":{"type":"boolean"}}],"process_graph":{"apply":{"arguments":{"context":{"from_node":"mean"},"data":{"from_parameter":"data"},"process":{"process-graph":{"power":{"arguments":{"base":{"from_node":"subtract"},"p":2},"process_id":"power","result":true},"subtract":{"arguments":{"x":{"from_parameter":"x"},"y":{"from_parameter":"context"}},"process_id":"subtract"}}}},"process_id":"apply"},"mean":{"arguments":{"data":{"from_parameter":"data"}},"process_id":"mean"},"mean2":{"arguments":{"data":{"from_node":"apply"},"ignore_nodata":{"from_parameter":"ignore_nodata"}},"process_id":"mean","result":true}},"returns":{"description":"The computed sample variance.","schema":{"type":["number","null"]}},"summary":"Variance"},{"categories":["logic"],"deprecated":false,"description":"Checks if **exactly one** of the values is true. If a component is `null`, the result will be `null` if the outcome is ambiguous.\n\n**Truth table:**\n\n```\na \\ b || null | false | true\n----- || ---- | ----- | -----\nnull  || null | null  | null\nfalse || null | false | true\ntrue  || null | true  | false\n```","examples":[{"arguments":{"x":true,"y":true},"returns":false},{"arguments":{"x":false,"y":false},"returns":false},{"arguments":{"x":true,"y":false},"returns":true},{"arguments":{"x":true,"y":null},"returns":null},{"arguments":{"x":false,"y":null},"returns":null}],"exceptions":{},"experimental":false,"id":"xor","parameters":[{"deprecated":false,"description":"A boolean value.","experimental":false,"name":"x","optional":false,"schema":{"type":["boolean","null"]}},{"deprecated":false,"description":"A boolean value.","experimental":false,"name":"y","optional":false,"schema":{"type":["boolean","null"]}}],"process_graph":{"and1":{"arguments":{"x":{"from_node":"not_x"},"y":{"from_parameter":"y"}},"process_id":"and"},"and2":{"arguments":{"x":{"from_parameter":"x"},"y":{"from_node":"not_y"}},"process_id":"and"},"not_x":{"arguments":{"x":{"from_parameter":"x"}},"process_id":"not"},"not_y":{"arguments":{"x":{"from_parameter":"y"}},"process_id":"not"},"or":{"arguments":{"x":{"from_node":"and1"},"y":{"from_node":"and2"}},"process_id":"or","result":true}},"returns":{"description":"Boolean result of the logical XOR.","schema":{"type":["boolean","null"]}},"summary":"Logical XOR (exclusive or)"},{"categories":["cubes","sar","ard"],"deprecated":false,"description":"Computes CARD4L compliant backscatter (gamma0) from SAR input.\nNote that backscatter computation may require instrument specific metadata that is tightly coupled to the original SAR products. As a result, this process may only work in combination with loading data from specific collections, not with general data cubes. \nCurrently ARD processes can only be combined with ``load_collection()`` and ``save_result()``. Please create a second user-defined process leveraging ``load_result()`` if you want to combine ARD processing with other processes.","exceptions":{"DigitalElevationModelInvalid":{"http":400,"message":"The digital elevation model specified is either not a DEM or can't be used with the data cube given."}},"experimental":true,"id":"ard_normalized_radar_backscatter","links":[{"href":"http://ceos.org/ard/files/PFS/NRB/v5.0/CARD4L-PFS_Normalised_Radar_Backscatter-v5.0.pdf","rel":"about","title":"CEOS CARD4L specification"}],"parameters":[{"deprecated":false,"description":"The source data cube containing SAR input.","experimental":false,"name":"data","optional":false,"schema":{"subtype":"raster-cube","type":"object"}},{"default":"cop-dem-30m","deprecated":false,"description":"The digital elevation model to use. Set to `null` (the default) to allow the back-end to choose, which will improve portability, but reduce reproducibility.","experimental":false,"name":"elevation_model","optional":true,"schema":[{"subtype":"collection-id","type":"string"},{"type":"null"}]},{"default":false,"deprecated":false,"description":"If set to `true`, an ellipsoidal incidence angle band named `ellipsoid_incidence_angle` is added. The values are given in degrees.","experimental":false,"name":"ellipsoid_incidence_angle","optional":true,"schema":{"type":"boolean"}},{"default":true,"deprecated":false,"description":"If set to `false`, no noise removal is applied. Defaults to `true`, which removes noise.","experimental":false,"name":"noise_removal","optional":true,"schema":{"type":"boolean"}}],"process_graph":{"nrb":{"arguments":{"coefficient":"gamma0-terrain","contributing_area":true,"data":{"from_parameter":"data"},"elevation_model":{"from_parameter":"elevation_model"},"ellipsoid_incidence_angle":{"from_parameter":"ellipsoid_incidence_angle"},"local_incidence_angle":true,"mask":true,"noise_removal":{"from_parameter":"noise_removal"}},"process_id":"sar_backscatter","result":true}},"returns":{"description":"Backscatter values expressed as gamma0. The data returned is CARD4L compliant and contains metadata.\n\nBy default, the backscatter values are given in linear scale.","schema":{"subtype":"raster-cube","type":"object"}},"summary":"CARD4L compliant SAR NRB generation"},{"categories":["cubes","optical","ard"],"deprecated":false,"description":"Computes CARD4L compliant surface reflectance values from optical input. Currently ARD processes can only be combined with ``load_collection()`` and ``save_result()``. Please create a second user-defined process leveraging ``load_result()`` if you want to combine ARD processing with other processes.","exceptions":{},"experimental":true,"id":"ard_surface_reflectance","links":[{"href":"http://ceos.org/ard/files/PFS/SR/v5.0/CARD4L_Product_Family_Specification_Surface_Reflectance-v5.0.pdf","rel":"about","title":"CEOS CARD4L specification"}],"parameters":[{"deprecated":false,"description":"The source data cube containing multi-spectral optical top of the atmosphere (TOA) reflectances. There must be a single dimension of type bands available.","experimental":false,"name":"data","optional":false,"schema":{"subtype":"raster-cube","type":"object"}},{"deprecated":false,"description":"The atmospheric correction method to use.","experimental":false,"name":"atmospheric_correction_method","optional":false,"schema":{"enum":["FORCE","iCOR"],"type":"string"}},{"deprecated":false,"description":"The cloud detection method to use.","experimental":false,"name":"cloud_detection_method","optional":false,"schema":{"enum":["Fmask"],"type":"string"}},{"default":"cop-dem-30m","deprecated":false,"description":"The digital elevation model to use, leave empty to allow the back-end to make a suitable choice.","experimental":false,"name":"elevation_model","optional":true,"schema":[{"subtype":"collection-id","type":"string"},{"type":"null"}]},{"default":{},"deprecated":false,"description":"Proprietary options for the atmospheric correction method. Specifying proprietary options will reduce portability.","experimental":false,"name":"atmospheric_correction_options","optional":true,"schema":{"properties":{"adjacency_effect":{"default":true,"description":"This indicates if adjacency effect correction should be performed","type":"boolean"},"do_atmo":{"default":true,"description":"This indicates if atmospheric correction should be performed. If TRUE, Bottom-of-Atmosphere reflectance is computed. If FALSE, only Top-of-Atmosphere reflectance is computed.","type":"boolean"},"do_brdf":{"default":true,"description":"This indicates if BRDF correction should be performed. If TRUE, output is nadir BRDF adjusted reflectance instead of BOA reflectance (the output is named BOA nonetheless).","type":"boolean"},"do_topo":{"default":true,"description":"This indicates if topographic correction should be performed. If TRUE, a DEM need to be given.","type":"boolean"},"multi_scattering":{"default":true,"description":"This indicates if multiple scattering (TRUE) or the single scattering approximation (FALSE) should be used in the radiative transfer calculations.","type":"boolean"},"res_merge":{"default":"IMPROPHE","description":"This parameter defines the method used for improving the spatial resolution of Sentinel-2\u2019s 20 m bands to 10 m. Pixels flagged as cloud or shadow will be skipped. Following methods are available: IMPROPHE uses the ImproPhe code in a spectral-only setup; REGRESSION uses a multiparameter regression (results are expected to be best, but processing time is significant); STARFM uses a spectral-only setup of the Spatial and Temporal Adaptive Reflectance Fusion Model (prediction artifacts may occur between land cover boundaries); NONE disables resolution merge; in this case, 20m bands are quadrupled.","enum":["IMPROPHE","REGRESSION","STARFM","NONE"],"type":"string"}},"type":"object"}},{"default":{},"deprecated":false,"description":"Proprietary options for the atmospheric correction method. Specifying proprietary options will reduce portability.","experimental":false,"name":"cloud_detection_options","optional":true,"schema":{"properties":{"cloud_buffer":{"default":300,"description":"Buffer sizes (radius in meters) for the cloud masks","maximum":10000,"minimum":0,"type":"number"},"cloud_threshold":{"default":0.225,"description":"Fmask cloud threshold.","maximum":1,"minimum":0,"type":"number"},"erase_clouds":{"default":true,"description":"If this parameter is enabled, confident cloud detections will be erased in the reflectance product, i.e. pixels are set to nodata.","type":"boolean"},"max_cloud_cover_frame":{"default":90,"description":"This parameter cancels the processing of images that exceed the given threshold. The processing will be canceled after cloud detection.","maximum":100,"minimum":0,"type":"number"},"max_cloud_cover_tile":{"default":90,"description":"This parameter works on a tile basis. It suppresses the output for chips (tiled image) that exceed the given threshold.","maximum":100,"minimum":0,"type":"number"},"shadow_buffer":{"default":90,"description":"Buffer sizes (radius in meters) for the cloud shadow mask.","maximum":10000,"minimum":0,"type":"number"},"shadow_threshold":{"default":0.02,"description":"Fmask shadow threshold.","maximum":1,"minimum":0,"type":"number"},"snow_buffer":{"default":30,"description":"Buffer sizes (radius in meters) for the snow mask.","maximum":10000,"minimum":0,"type":"number"}},"type":"object"}}],"process_graph":{},"returns":{"description":"Data cube containing bottom of atmosphere reflectances with atmospheric disturbances like clouds and cloud shadows removed. The data returned is CARD4L compliant and contains metadata.","schema":{"subtype":"raster-cube","type":"object"}},"summary":"CARD4L compliant Surface Reflectance generation"},{"categories":["cubes","optical"],"deprecated":false,"description":"Applies an atmospheric correction that converts top of atmosphere reflectance values into bottom of atmosphere/top of canopy reflectance values. \nCurrently ARD processes can only be combined with ``load_collection()`` and ``save_result()``. Please create a second user-defined process leveraging ``load_result()`` if you want to combine ARD processing with other processes.","exceptions":{"DigitalElevationModelInvalid":{"http":400,"message":"The digital elevation model specified is either not a DEM or can't be used with the data cube given."}},"experimental":true,"id":"atmospheric_correction","links":[{"href":"https://bok.eo4geo.eu/IP1-7-1","rel":"about","title":"Atmospheric correction explained by EO4GEO body of knowledge."}],"parameters":[{"deprecated":false,"description":"Data cube containing multi-spectral optical top of atmosphere reflectances to be corrected.","experimental":false,"name":"data","optional":false,"schema":{"subtype":"raster-cube","type":"object"}},{"deprecated":false,"description":"The atmospheric correction method to use. To get reproducible results, you have to set a specific method.\n\nSet to `null` to allow the back-end to choose, which will improve portability, but reduce reproducibility as you *may* get different results if you run the processes multiple times.","experimental":false,"name":"method","optional":false,"schema":[{"enum":["FORCE"],"type":"string"},{"type":"null"}]},{"default":"cop-dem-30m","deprecated":false,"description":"The digital elevation model to use, leave empty to allow the back-end to make a suitable choice.","experimental":false,"name":"elevation_model","optional":true,"schema":[{"subtype":"collection-id","type":"string"},{"type":"null"}]},{"default":{},"deprecated":false,"description":"Proprietary options for the atmospheric correction method. Specifying proprietary options will reduce portability.","experimental":false,"name":"options","optional":true,"schema":{"properties":{"adjacency_effect":{"default":true,"description":"This indicates if adjacency effect correction should be performed","type":"boolean"},"cloud_buffer":{"default":300,"description":"Buffer sizes (radius in meters) for the cloud masks","maximum":10000,"minimum":0,"type":"number"},"cloud_threshold":{"default":0.225,"description":"Fmask cloud threshold.","maximum":1,"minimum":0,"type":"number"},"do_atmo":{"default":true,"description":"This indicates if atmospheric correction should be performed. If TRUE, Bottom-of-Atmosphere reflectance is computed. If FALSE, only Top-of-Atmosphere reflectance is computed.","type":"boolean"},"do_brdf":{"default":true,"description":"This indicates if BRDF correction should be performed. If TRUE, output is nadir BRDF adjusted reflectance instead of BOA reflectance (the output is named BOA nonetheless).","type":"boolean"},"do_topo":{"default":true,"description":"This indicates if topographic correction should be performed. If TRUE, a DEM need to be given.","type":"boolean"},"erase_clouds":{"default":true,"description":"If this parameter is enabled, confident cloud detections will be erased in the reflectance product, i.e. pixels are set to nodata.","type":"boolean"},"max_cloud_cover_frame":{"default":90,"description":"This parameter cancels the processing of images that exceed the given threshold. The processing will be canceled after cloud detection.","maximum":100,"minimum":0,"type":"number"},"max_cloud_cover_tile":{"default":90,"description":"This parameter works on a tile basis. It suppresses the output for chips (tiled image) that exceed the given threshold.","maximum":100,"minimum":0,"type":"number"},"multi_scattering":{"default":true,"description":"This indicates if multiple scattering (TRUE) or the single scattering approximation (FALSE) should be used in the radiative transfer calculations.","type":"boolean"},"res_merge":{"default":"IMPROPHE","description":"This parameter defines the method used for improving the spatial resolution of Sentinel-2\u2019s 20 m bands to 10 m. Pixels flagged as cloud or shadow will be skipped. Following methods are available: IMPROPHE uses the ImproPhe code in a spectral-only setup; REGRESSION uses a multiparameter regression (results are expected to be best, but processing time is significant); STARFM uses a spectral-only setup of the Spatial and Temporal Adaptive Reflectance Fusion Model (prediction artifacts may occur between land cover boundaries); NONE disables resolution merge; in this case, 20m bands are quadrupled.","enum":["IMPROPHE","REGRESSION","STARFM","NONE"],"type":"string"},"shadow_buffer":{"default":90,"description":"Buffer sizes (radius in meters) for the cloud shadow mask.","maximum":10000,"minimum":0,"type":"number"},"shadow_threshold":{"default":0.02,"description":"Fmask shadow threshold.","maximum":1,"minimum":0,"type":"number"},"snow_buffer":{"default":30,"description":"Buffer sizes (radius in meters) for the snow mask.","maximum":10000,"minimum":0,"type":"number"}},"type":"object"}}],"process_graph":{},"returns":{"description":"Data cube containing bottom of atmosphere reflectances.","schema":{"subtype":"raster-cube","type":"object"}},"summary":"Apply atmospheric correction"},{"categories":["cubes","sar"],"deprecated":false,"description":"Computes backscatter from SAR input.\nNote that backscatter computation may require instrument specific metadata that is tightly coupled to the original SAR products. As a result, this process may only work in combination with loading data from specific collections, not with general data cubes. \nCurrently ARD processes can only be combined with ``load_collection()`` and ``save_result()``. Please create a second user-defined process leveraging ``load_result()`` if you want to combine ARD processing with other processes.","exceptions":{"DigitalElevationModelInvalid":{"http":400,"message":"The digital elevation model specified is either not a DEM or can't be used with the data cube given."}},"experimental":true,"id":"sar_backscatter","links":[{"href":"https://bok.eo4geo.eu/PP2-2-4-3","rel":"about","title":"Gamma nought (0) explained by EO4GEO body of knowledge."},{"href":"https://bok.eo4geo.eu/PP2-2-4-2","rel":"about","title":"Sigma nought (0) explained by EO4GEO body of knowledge."},{"href":"https://www.geo.uzh.ch/microsite/rsl-documents/research/publications/peer-reviewed-articles/201108-TGRS-Small-tcGamma-3809999360/201108-TGRS-Small-tcGamma.pdf","rel":"about","title":"Flattening Gamma: Radiometric Terrain Correction for SAR Imagery"}],"parameters":[{"default":"gamma0-terrain","deprecated":false,"description":"Select the radiometric correction coefficient. The following options are available:\n\n* `beta0`: radar brightness\n* `sigma0-ellipsoid`: ground area computed with ellipsoid earth model\n* `sigma0-terrain`: ground area computed with terrain earth model\n* `gamma0-ellipsoid`: ground area computed with ellipsoid earth model in sensor line of sight\n* `gamma0-terrain`: ground area computed with terrain earth model in sensor line of sight (default)\n* `null`: non-normalized backscatter","experimental":false,"name":"coefficient","optional":true,"schema":[{"enum":["beta0","sigma0-ellipsoid","sigma0-terrain","gamma0-ellipsoid","gamma0-terrain"],"type":"string"},{"title":"Non-normalized backscatter","type":"null"}]},{"default":"cop-dem-30m","deprecated":false,"description":"The digital elevation model to use. Set to `null` (the default) to allow the back-end to choose, which will improve portability, but reduce reproducibility.","experimental":false,"name":"elevation_model","optional":true,"schema":[{"subtype":"collection-id","type":"string"},{"type":"null"}]},{"default":false,"deprecated":false,"description":"If set to `true`, a data mask is added to the bands with the name `mask`. It indicates which values are valid (1), invalid (0) or contain no-data (null).","experimental":false,"name":"mask","optional":true,"schema":{"type":"boolean"}},{"default":false,"deprecated":false,"description":"If set to `true`, a DEM-based local contributing area band named `contributing_area` is added. The values are given in square meters.","experimental":false,"name":"contributing_area","optional":true,"schema":{"type":"boolean"}},{"default":false,"deprecated":false,"description":"If set to `true`, a DEM-based local incidence angle band named `local_incidence_angle` is added. The values are given in degrees.","experimental":false,"name":"local_incidence_angle","optional":true,"schema":{"type":"boolean"}},{"default":false,"deprecated":false,"description":"If set to `true`, an ellipsoidal incidence angle band named `ellipsoid_incidence_angle` is added. The values are given in degrees.","experimental":false,"name":"ellipsoid_incidence_angle","optional":true,"schema":{"type":"boolean"}},{"default":true,"deprecated":false,"description":"If set to `false`, no noise removal is applied. Defaults to `true`, which removes noise.","experimental":false,"name":"noise_removal","optional":true,"schema":{"type":"boolean"}},{"deprecated":false,"description":"The source data cube containing SAR input.","experimental":false,"name":"data","optional":false,"schema":{"subtype":"raster-cube","type":"object"}}],"process_graph":{},"returns":{"description":"Backscatter values corresponding to the chosen parametrization.\n\nBy default, the backscatter values are given in linear scale.","schema":{"subtype":"raster-cube","type":"object"}},"summary":"Computes backscatter from SAR input"},{"categories":["cubes","math"],"deprecated":false,"description":"Use non-linear least squares to fit a model function `y = f(x, parameters)` to data.\n\nThe process throws an `InvalidValues` exception if invalid values are encountered. Invalid values are finite numbers (see also ``is_valid()``).","exceptions":{"DimensionNotAvailable":{"http":400,"message":"A dimension with the specified name does not exist."},"InvalidValues":{"http":400,"message":"At least one of the values is not a finite number."}},"experimental":true,"id":"fit_curve","parameters":[{"deprecated":false,"description":"A data cube.","experimental":false,"name":"data","optional":false,"schema":{"subtype":"raster-cube","type":"object"}},{"deprecated":false,"description":"Defined the number of parameters for the model function and provides an initial guess for them. At least one parameter is required.","experimental":false,"name":"parameters","optional":false,"schema":[{"items":{"type":"number"},"minItems":1.0,"type":"array"},{"subtype":"raster-cube","title":"Data Cube with optimal values from a previous result of this process.","type":"object"}]},{"deprecated":false,"description":"The model function. It must take the parameters to fit as array through the first argument and the independent variable `x` as the second argument.\n\nIt is recommended to store the model function as a user-defined process on the back-end to be able to re-use the model function with the computed optimal values for the parameters afterwards.","experimental":false,"name":"function","optional":false,"schema":{"parameters":[{"deprecated":false,"description":"The value for the independent variable `x`.","experimental":false,"name":"x","optional":false,"schema":{"type":"number"}},{"deprecated":false,"description":"The parameters for the model function, contains at least one parameter.","experimental":false,"name":"parameters","optional":false,"schema":{"items":{"type":"number"},"minItems":1.0,"type":"array"}}],"returns":{"description":"The computed value `y` value for the given independent variable `x` and the parameters.","schema":{"type":"number"}},"subtype":"process-graph","type":"object"}},{"deprecated":false,"description":"The name of the dimension for curve fitting. Must be a dimension with labels that have a order (i.e. numerical labels or a temporal dimension). Fails with a `DimensionNotAvailable` exception if the specified dimension does not exist.","experimental":false,"name":"dimension","optional":false,"schema":{"type":"string"}}],"process_graph":{},"returns":{"description":"A data cube with the optimal values for the parameters.","schema":{"subtype":"raster-cube","type":"object"}},"summary":"Curve fitting"},{"categories":["cubes","math"],"deprecated":false,"description":"Predict values using a model function and pre-computed parameters.","exceptions":{"DimensionNotAvailable":{"http":400,"message":"A dimension with the specified name does not exist."}},"experimental":true,"id":"predict_curve","parameters":[{"deprecated":false,"description":"A data cube to predict values for.","experimental":false,"name":"data","optional":false,"schema":{"subtype":"raster-cube","type":"object"}},{"deprecated":false,"description":"A data cube with optimal values from a result of e.g. ``fit_curve()``.","experimental":false,"name":"parameters","optional":false,"schema":{"subtype":"raster-cube","type":"object"}},{"deprecated":false,"description":"The model function. It must take the parameters to fit as array through the first argument and the independent variable `x` as the second argument.\n\nIt is recommended to store the model function as a user-defined process on the back-end.","experimental":false,"name":"function","optional":false,"schema":{"parameters":[{"deprecated":false,"description":"The value for the independent variable `x`.","experimental":false,"name":"x","optional":false,"schema":{"type":"number"}},{"deprecated":false,"description":"The parameters for the model function, contains at least one parameter.","experimental":false,"name":"parameters","optional":false,"schema":{"items":{"type":"number"},"minItems":1.0,"type":"array"}}],"returns":{"description":"The computed value `y` value for the given independent variable `x` and the parameters.","schema":{"type":"number"}},"subtype":"process-graph","type":"object"}},{"deprecated":false,"description":"The name of the dimension for predictions. Fails with a `DimensionNotAvailable` exception if the specified dimension does not exist.","experimental":false,"name":"dimension","optional":false,"schema":{"type":"string"}},{"deprecated":false,"description":"The labels to predict values for. If no labels are given, predicts values only for no-data (`null`) values in the data cube.","experimental":false,"name":"labels","optional":true,"schema":[{"type":"null"},{"items":{"anyOf":[{"type":"number"},{"format":"date","subtype":"date","type":"string"},{"format":"date-time","subtype":"date-time","type":"string"}]},"type":"array"}]}],"process_graph":{},"returns":{"description":"A data cube with the predicted values.","schema":{"subtype":"raster-cube","type":"object"}},"summary":"Predict values"},{"categories":["cubes","aggregate & resample"],"deprecated":false,"description":"Resamples one or more given temporal dimensions from a source data cube to align with the corresponding dimensions of the given target data cube using the nearest neighbor method. Returns a new data cube with the resampled dimensions.\n\nBy default, this process simply takes the nearest neighbor independent of the value (including values such as no-data / `null`). Depending on the data cubes this may lead to values being assigned to two target timestamps. To only consider valid values in a specific range around the target timestamps, use the parameter `valid_within`.\n\nThe rare case of ties is resolved by choosing the earlier timestamps.","exceptions":{"DimensionMismatch":{"http":400,"message":"The temporal dimensions for resampling don't match."},"DimensionNotAvailable":{"http":400,"message":"A dimension with the specified name does not exist."}},"experimental":true,"id":"resample_cube_temporal","links":[{"href":"https://openeo.org/documentation/1.0/datacubes.html#resample","rel":"about","title":"Resampling explained in the openEO documentation"}],"parameters":[{"deprecated":false,"description":"A data cube with one or more temporal dimensions.","experimental":false,"name":"data","optional":false,"schema":{"subtype":"raster-cube","type":"object"}},{"deprecated":false,"description":"A data cube that describes the temporal target resolution.","experimental":false,"name":"target","optional":false,"schema":{"subtype":"raster-cube","type":"object"}},{"deprecated":false,"description":"The name of the temporal dimension to resample, which must exist with this name in both data cubes. If the dimension is not set or is set to `null`, the process resamples all temporal dimensions that exist with the same names in both data cubes.\n\nThe following exceptions may occur:\n\n* A dimension is given, but it does not exist in any of the data cubes: `DimensionNotAvailable`\n* A dimension is given, but one of them is not temporal: `DimensionMismatch`\n\n* No specific dimension name is given and there are no temporal dimensions with the same name in the data: `DimensionMismatch`","experimental":false,"name":"dimension","optional":true,"schema":{"type":["string","null"]}},{"deprecated":false,"description":"Setting this parameter to a numerical value enables that the process searches for valid values within the given period of days before and after the target timestamps. Valid values are determined based on the function ``is_valid()``. For example, the limit of `7` for the target timestamps `2020-01-15 12:00:00` looks for a nearest neighbor after `2020-01-08 12:00:00` and before `2020-01-22 12:00:00`. If no valid value is found within the given period, the value will be set to no-data (`null`).","experimental":false,"name":"valid_within","optional":true,"schema":{"type":["number","null"]}}],"process_graph":{},"returns":{"description":"A raster data cube with the same dimensions and the same dimension properties (name, type, labels, reference system and resolution) for all non-temporal dimensions. For the temporal dimension, the name and type remain unchanged, but the dimension labels, resolution and reference system may change.","schema":{"subtype":"raster-cube","type":"object"}},"summary":"Resample temporal dimensions to match a target data cube"},{"categories":["math > cumulative"],"deprecated":false,"description":"Finds cumulative maxima of an array of numbers. Every computed element is equal to the bigger one between the current element and the previously computed element. The returned array and the input array have always the same length.\n\nBy default, no-data values are skipped, but stay in the result. Setting the `ignore_nodata` flag to `true` makes that once a no-data value (`null`) is reached all following elements are set to `null` in the result.","examples":[{"arguments":{"data":[1,3,5,3,1]},"returns":[1,3,5,5,5]},{"arguments":{"data":[1,3,null,5,1]},"returns":[1,3,null,5,5]},{"arguments":{"data":[1,3,null,5,1],"ignore_nodata":false},"returns":[1,3,null,null,null]}],"exceptions":{},"experimental":true,"id":"cummax","parameters":[{"deprecated":false,"description":"An array of numbers.","experimental":false,"name":"data","optional":false,"schema":{"items":{"type":["number","null"]},"type":"array"}},{"default":true,"deprecated":false,"description":"Indicates whether no-data values are ignored or not and ignores them by default. Setting this flag to `false` considers no-data values so that `null` is set for all the following elements.","experimental":false,"name":"ignore_nodata","optional":true,"schema":{"type":"boolean"}}],"process_graph":{},"returns":{"description":"An array with the computed cumulative maxima.","schema":{"items":{"type":["number","null"]},"type":"array"}},"summary":"Cumulative maxima"},{"categories":["math > cumulative"],"deprecated":false,"description":"Finds cumulative minima of an array of numbers. Every computed element is equal to the smaller one between the current element and the previously computed element. The returned array and the input array have always the same length.\n\nBy default, no-data values are skipped, but stay in the result. Setting the `ignore_nodata` flag to `true` makes that once a no-data value (`null`) is reached all following elements are set to `null` in the result.","examples":[{"arguments":{"data":[5,3,1,3,5]},"returns":[5,3,1,1,1]},{"arguments":{"data":[5,3,null,1,5]},"returns":[5,3,null,1,1]},{"arguments":{"data":[5,3,null,1,5],"ignore_nodata":false},"returns":[5,3,null,null,null]}],"exceptions":{},"experimental":true,"id":"cummin","parameters":[{"deprecated":false,"description":"An array of numbers.","experimental":false,"name":"data","optional":false,"schema":{"items":{"type":["number","null"]},"type":"array"}},{"default":true,"deprecated":false,"description":"Indicates whether no-data values are ignored or not and ignores them by default. Setting this flag to `false` considers no-data values so that `null` is set for all the following elements.","experimental":false,"name":"ignore_nodata","optional":true,"schema":{"type":"boolean"}}],"process_graph":{},"returns":{"description":"An array with the computed cumulative minima.","schema":{"items":{"type":["number","null"]},"type":"array"}},"summary":"Cumulative minima"},{"categories":["math > cumulative"],"deprecated":false,"description":"Computes cumulative products of an array of numbers. Every computed element is equal to the product of the current and all previous values. The returned array and the input array have always the same length.\n\nBy default, no-data values are skipped, but stay in the result. Setting the `ignore_nodata` flag to `true` makes that once a no-data value (`null`) is reached all following elements are set to `null` in the result.","examples":[{"arguments":{"data":[1,3,5,3,1]},"returns":[1,3,15,45,45]},{"arguments":{"data":[1,2,3,null,3,1]},"returns":[1,2,6,null,18,18]},{"arguments":{"data":[1,2,3,null,3,1],"ignore_nodata":false},"returns":[1,2,6,null,null,null]}],"exceptions":{},"experimental":true,"id":"cumproduct","parameters":[{"deprecated":false,"description":"An array of numbers.","experimental":false,"name":"data","optional":false,"schema":{"items":{"type":["number","null"]},"type":"array"}},{"default":true,"deprecated":false,"description":"Indicates whether no-data values are ignored or not and ignores them by default. Setting this flag to `false` considers no-data values so that `null` is set for all the following elements.","experimental":false,"name":"ignore_nodata","optional":true,"schema":{"type":"boolean"}}],"process_graph":{},"returns":{"description":"An array with the computed cumulative products.","schema":{"items":{"type":["number","null"]},"type":"array"}},"summary":"Cumulative products"},{"categories":["math > cumulative"],"deprecated":false,"description":"Computes cumulative sums of an array of numbers. Every computed element is equal to the sum of current and all previous values. The returned array and the input array have always the same length.\n\nBy default, no-data values are skipped, but stay in the result. Setting the `ignore_nodata` flag to `true` makes that once a no-data value (`null`) is reached all following elements are set to `null` in the result.","examples":[{"arguments":{"data":[1,3,5,3,1]},"returns":[1,4,9,12,13]},{"arguments":{"data":[1,3,null,3,1]},"returns":[1,4,null,7,8]},{"arguments":{"data":[1,3,null,3,1],"ignore_nodata":false},"returns":[1,4,null,null,null]}],"exceptions":{},"experimental":true,"id":"cumsum","parameters":[{"deprecated":false,"description":"An array of numbers.","experimental":false,"name":"data","optional":false,"schema":{"items":{"type":["number","null"]},"type":"array"}},{"default":true,"deprecated":false,"description":"Indicates whether no-data values are ignored or not and ignores them by default. Setting this flag to `false` considers no-data values so that `null` is set for all the following elements.","experimental":false,"name":"ignore_nodata","optional":true,"schema":{"type":"boolean"}}],"process_graph":{},"returns":{"description":"An array with the computed cumulative sums.","schema":{"items":{"type":["number","null"]},"type":"array"}},"summary":"Cumulative sums"},{"categories":["cubes","import"],"deprecated":false,"description":"Loads batch job results and returns them as a processable data cube. A batch job result can be loaded by ID or URL:\n\n* **ID**: The identifier for a finished batch job. The job must have been submitted by the authenticated user on the back-end currently connected to.\n* **URL**: The URL to the STAC metadata for a batch job result. This is usually a signed URL that is provided by some back-ends since openEO API version 1.1.0 through the `canonical` link relation in the batch job result metadata.\n\nIf supported by the underlying metadata and file format, the data that is added to the data cube can be restricted with the parameters `spatial_extent`, `temporal_extent` and `bands`.\n\n**Remarks:**\n\n* The bands (and all dimensions that specify nominal dimension labels) are expected to be ordered as specified in the metadata if the `bands` parameter is set to `null`.\n* If no additional parameter is specified this would imply that the whole data set is expected to be loaded. Due to the large size of many data sets, this is not recommended and may be optimized by back-ends to only load the data that is actually required after evaluating subsequent processes such as filters. This means that the pixel values should be processed only after the data has been limited to the required extent and as a consequence also to a manageable size.","exceptions":{},"experimental":true,"id":"load_result","parameters":[{"deprecated":false,"description":"The id of a batch job with results.","experimental":false,"name":"id","optional":false,"schema":[{"pattern":"^[\\w\\-\\.~]+$","subtype":"job-id","title":"ID","type":"string"},{"format":"uri","pattern":"^https?://","subtype":"uri","title":"URL","type":"string"}]},{"deprecated":false,"description":"Limits the data to load from the batch job result to the specified bounding box or polygons.\n\nThe process puts a pixel into the data cube if the point at the pixel center intersects with the bounding box or any of the polygons (as defined in the Simple Features standard by the OGC).\n\nThe GeoJSON can be one of the following feature types:\n\n* A `Polygon` or `MultiPolygon` geometry,\n* a `Feature` with a `Polygon` or `MultiPolygon` geometry,\n* a `FeatureCollection` containing at least one `Feature` with `Polygon` or `MultiPolygon` geometries, or\n* a `GeometryCollection` containing `Polygon` or `MultiPolygon` geometries. To maximize interoperability, `GeometryCollection` should be avoided in favour of one of the alternatives above.\n\nSet this parameter to `null` to set no limit for the spatial extent. Be careful with this when loading large datasets! It is recommended to use this parameter instead of using ``filter_bbox()`` or ``filter_spatial()`` directly after loading unbounded data.","experimental":false,"name":"spatial_extent","optional":true,"schema":[{"properties":{"base":{"default":null,"description":"Base (optional, lower left corner, coordinate axis 3).","type":["number","null"]},"crs":{"anyOf":[{"examples":[3857],"minimum":1000,"subtype":"epsg-code","title":"EPSG Code","type":"integer"},{"subtype":"wkt2-definition","title":"WKT2","type":"string"},{"deprecated":true,"subtype":"proj-definition","title":"PROJ definition","type":"string"}],"default":4326,"description":"Coordinate reference system of the extent, specified as as [EPSG code](http://www.epsg-registry.org/), [WKT2 (ISO 19162) string](http://docs.opengeospatial.org/is/18-010r7/18-010r7.html) or [PROJ definition (deprecated)](https://proj.org/usage/quickstart.html). Defaults to `4326` (EPSG code 4326) unless the client explicitly requests a different coordinate reference system."},"east":{"description":"East (upper right corner, coordinate axis 1).","type":"number"},"height":{"default":null,"description":"Height (optional, upper right corner, coordinate axis 3).","type":["number","null"]},"north":{"description":"North (upper right corner, coordinate axis 2).","type":"number"},"south":{"description":"South (lower left corner, coordinate axis 2).","type":"number"},"west":{"description":"West (lower left corner, coordinate axis 1).","type":"number"}},"required":["west","south","east","north"],"subtype":"bounding-box","title":"Bounding Box","type":"object"},{"description":"Limits the data cube to the bounding box of the given geometry. All pixels inside the bounding box that do not intersect with any of the polygons will be set to no data (`null`).","subtype":"geojson","title":"GeoJSON","type":"object"},{"description":"Don't filter spatially. All data is included in the data cube.","title":"No filter","type":"null"}]},{"deprecated":false,"description":"Limits the data to load from the batch job result to the specified left-closed temporal interval. Applies to all temporal dimensions. The interval has to be specified as an array with exactly two elements:\n\n1. The first element is the start of the temporal interval. The specified instance in time is **included** in the interval.\n2. The second element is the end of the temporal interval. The specified instance in time is **excluded** from the interval.\n\nThe specified temporal strings follow [RFC 3339](https://www.rfc-editor.org/rfc/rfc3339.html). Also supports open intervals by setting one of the boundaries to `null`, but never both.\n\nSet this parameter to `null` to set no limit for the temporal extent. Be careful with this when loading large datasets! It is recommended to use this parameter instead of using ``filter_temporal()`` directly after loading unbounded data.","experimental":false,"name":"temporal_extent","optional":true,"schema":[{"examples":[["2015-01-01T00:00:00Z","2016-01-01T00:00:00Z"],["2015-01-01","2016-01-01"]],"items":{"anyOf":[{"format":"date-time","subtype":"date-time","type":"string"},{"format":"date","subtype":"date","type":"string"},{"maxLength":4,"minLength":4,"pattern":"^\\d{4}$","subtype":"year","type":"string"},{"type":"null"}]},"maxItems":2.0,"minItems":2.0,"subtype":"temporal-interval","type":"array"},{"description":"Don't filter temporally. All data is included in the data cube.","title":"No filter","type":"null"}]},{"deprecated":false,"description":"Only adds the specified bands into the data cube so that bands that don't match the list of band names are not available. Applies to all dimensions of type `bands`.\n\nEither the unique band name (metadata field `name` in bands) or one of the common band names (metadata field `common_name` in bands) can be specified. If the unique band name and the common name conflict, the unique band name has a higher priority.\n\nThe order of the specified array defines the order of the bands in the data cube. If multiple bands match a common name, all matched bands are included in the original order.\n\nIt is recommended to use this parameter instead of using ``filter_bands()`` directly after loading unbounded data.","experimental":false,"name":"bands","optional":true,"schema":[{"items":{"subtype":"band-name","type":"string"},"type":"array"},{"description":"Don't filter bands. All bands are included in the data cube.","title":"No filter","type":"null"}]}],"process_graph":{},"returns":{"description":"A data cube for further processing.","schema":{"subtype":"raster-cube","type":"object"}},"summary":"Load batch job results"},{"categories":["cubes","filter"],"deprecated":false,"description":"Limits the data cube over the spatial dimensions to the specified geometries.\n\n- For **polygons**, the filter retains a pixel in the data cube if the point at the pixel center intersects with at least one of the polygons (as defined in the Simple Features standard by the OGC).\n- For **points**, the process considers the closest pixel center.\n- For **lines** (line strings), the process considers all the pixels whose centers are closest to at least one point on the line.\n\nMore specifically, pixels outside of the bounding box of the given geometry will not be available after filtering. All pixels inside the bounding box that are not retained will be set to `null` (no data).","exceptions":{},"experimental":false,"id":"filter_spatial","links":[{"href":"https://openeo.org/documentation/1.0/datacubes.html#filter","rel":"about","title":"Filters explained in the openEO documentation"},{"href":"http://www.opengeospatial.org/standards/sfa","rel":"about","title":"Simple Features standard by the OGC"}],"parameters":[{"deprecated":false,"description":"A data cube.","experimental":false,"name":"data","optional":false,"schema":{"subtype":"raster-cube","type":"object"}},{"deprecated":false,"description":"One or more geometries used for filtering, specified as GeoJSON.","experimental":false,"name":"geometries","optional":false,"schema":{"subtype":"geojson","type":"object"}}],"process_graph":{},"returns":{"description":"A data cube restricted to the specified geometries. The dimensions and dimension properties (name, type, labels, reference system and resolution) remain unchanged, except that the spatial dimensions have less (or the same) dimension labels.","schema":{"subtype":"raster-cube","type":"object"}},"summary":"Spatial filter using geometries"},{"categories":["arrays"],"deprecated":false,"description":"Creates a new array, which by default is empty.\n\nThe second parameter `repeat` allows to add the given array multiple times to the new array.\n\nIn most cases you can simply pass a (native) array to processes directly, but this process is especially useful to create a new array that is getting returned by a child process, for example in ``apply_dimension()``.","examples":[{"arguments":{},"returns":[]},{"arguments":{"data":["this","is","a","test"]},"returns":["'this'","'is'","'a'","'test'"]},{"arguments":{"data":[null],"repeat":3},"returns":[null,null,null]},{"arguments":{"data":[1,2,3],"repeat":2},"returns":[1,2,3,1,2,3]}],"exceptions":{},"experimental":true,"id":"array_create","parameters":[{"default":[],"deprecated":false,"description":"A (native) array to fill the newly created array with. Defaults to an empty array.","experimental":false,"name":"data","optional":true,"schema":{"items":{"description":"Any data type is allowed."},"type":"array"}},{"default":1,"deprecated":false,"description":"The number of times the (native) array specified in `data` is repeatedly added after each other to the new array being created. Defaults to `1`.","experimental":false,"name":"repeat","optional":true,"schema":{"minimum":1.0,"type":"integer"}}],"process_graph":{},"returns":{"description":"The newly created array.","schema":{"items":{"description":"Any data type is allowed."},"type":"array"}},"summary":"Create an array"},{"categories":["arrays"],"deprecated":false,"description":"Modify an array by removing, inserting or updating elements. Updating can be seen as removing elements followed by inserting new elements (not necessarily the same number).\n\nAll labels get discarded and the array indices are always a sequence of numbers with the step size of 1 and starting at 0.","examples":[{"arguments":{"data":["a","d","c"],"index":1,"values":["b"]},"description":"Replace a single value in the array.","returns":["'a'","'b'","'c'"]},{"arguments":{"data":["a","b",4,5],"index":0,"length":2,"values":[1,2,3]},"description":"Replace multiple values in the array.","returns":[1,2,3,4,5]},{"arguments":{"data":["a","c"],"index":1,"length":0,"values":["b"]},"description":"Insert a value to the array at a given position.","returns":["'a'","'b'","'c'"]},{"arguments":{"data":["a","b",null,"c"],"index":2,"values":[]},"description":"Remove a single value from the array.","returns":["'a'","'b'","'c'"]},{"arguments":{"data":[null,null,"a","b","c"],"index":0,"length":2,"values":[]},"description":"Remove multiple values from the array.","returns":["'a'","'b'","'c'"]},{"arguments":{"data":["a","b","c"],"index":1,"length":10,"values":[]},"description":"Remove multiple values from the end of the array and ignore that the given length is exceeding the size of the array.","returns":["'a'"]}],"exceptions":{"ArrayElementNotAvailable":{"http":400,"message":"The array can't be modified as the given index is larger than the number of elements in the array."}},"experimental":true,"id":"array_modify","parameters":[{"deprecated":false,"description":"The array to modify.","experimental":false,"name":"data","optional":false,"schema":{"items":{"description":"Any data type is allowed."},"type":"array"}},{"deprecated":false,"description":"The values to insert into the `data` array.","experimental":false,"name":"values","optional":false,"schema":{"items":{"description":"Any data type is allowed."},"type":"array"}},{"deprecated":false,"description":"The index in the `data` array of the element to insert the value(s) before. If the index is greater than the number of elements in the `data` array, the process throws an `ArrayElementNotAvailable` exception.\n\nTo insert after the last element, there are two options:\n\n1. Use the simpler processes ``array_append()`` to append a single value or ``array_concat()`` to append multiple values.\n2. Specify the number of elements in the array. You can retrieve the number of elements with the process ``count()``, having the parameter `condition` set to `true`.","experimental":false,"name":"index","optional":false,"schema":{"minimum":0.0,"type":"integer"}},{"default":1,"deprecated":false,"description":"The number of elements in the `data` array to remove (or replace) starting from the given index. If the array contains fewer elements, the process simply removes all elements up to the end.","experimental":false,"name":"length","optional":true,"schema":{"minimum":0.0,"type":"integer"}}],"process_graph":{},"returns":{"description":"An array with values added, updated or removed.","schema":{"items":{"description":"Any data type is allowed."},"type":"array"}},"summary":"Change the content of an array (remove, insert, update)"},{"categories":["arrays"],"deprecated":false,"description":"Concatenates two arrays into a single array by appending the second array to the first array. Array labels get discarded from both arrays before merging.","examples":[{"arguments":{"array1":["a","b"],"array2":[1,2]},"description":"Concatenates two arrays containing different data type.","returns":["'a'","'b'","1","2"]}],"exceptions":{},"experimental":true,"id":"array_concat","parameters":[{"deprecated":false,"description":"The first array.","experimental":false,"name":"array1","optional":false,"schema":{"items":{"description":"Any data type is allowed."},"type":"array"}},{"deprecated":false,"description":"The second array.","experimental":false,"name":"array2","optional":false,"schema":{"items":{"description":"Any data type is allowed."},"type":"array"}}],"process_graph":{},"returns":{"description":"The merged array.","schema":{"items":{"description":"Any data type is allowed."},"type":"array"}},"summary":"Merge two arrays"},{"categories":["math > constants"],"deprecated":false,"description":"Defines a constant value that can be reused in multiple places of a process.","exceptions":{},"experimental":false,"id":"constant","parameters":[{"deprecated":false,"description":"The value of the constant.","experimental":false,"name":"x","optional":false,"schema":{"description":"Any data type."}}],"process_graph":{},"returns":{"description":"The value of the constant.","schema":{"description":"Any data type."}},"summary":"Define a constant value"},{"categories":["cubes","filter"],"deprecated":false,"description":"Filters the dimension labels in the data cube for the given dimension. Only the dimension labels that match the specified condition are preserved, all other labels with their corresponding data get removed.","examples":[{"arguments":{"condition":{"process_graph":{"eq":{"arguments":{"case_sensitive":false,"x":{"from_parameter":"value"},"y":"Sentinel-2A"},"process_id":"eq","result":true}}},"data":{"from_parameter":"sentinel2_data"},"dimension":"platform"},"description":"Filters the data cube to only contain data from platform Sentinel-2A. This example assumes that the data cube has a dimension `platform` so that computations can distinguish between Sentinel-2A and Sentinel-2B data.","returns":null}],"exceptions":{"DimensionNotAvailable":{"http":400,"message":"A dimension with the specified name does not exist."}},"experimental":true,"id":"filter_labels","links":[{"href":"https://openeo.org/documentation/1.0/datacubes.html#filter","rel":"about","title":"Filters explained in the openEO documentation"}],"parameters":[{"deprecated":false,"description":"A data cube.","experimental":false,"name":"data","optional":false,"schema":{"subtype":"raster-cube","type":"object"}},{"deprecated":false,"description":"A condition that is evaluated against each dimension label in the specified dimension. A dimension label and the corresponding data is preserved for the given dimension, if the condition returns `true`.","experimental":false,"name":"condition","optional":false,"schema":{"parameters":[{"deprecated":false,"description":"A single dimension label to compare against. The data type of the parameter depends on the dimension labels set for the dimension.","experimental":false,"name":"value","optional":false,"schema":[{"type":"number"},{"type":"string"}]},{"deprecated":false,"description":"Additional data passed by the user.","experimental":false,"name":"context","optional":true,"schema":{"description":"Any data type."}}],"returns":{"description":"`true` if the dimension label should be kept in the data cube, otherwise `false`.","schema":{"type":"boolean"}},"subtype":"process-graph","type":"object"}},{"deprecated":false,"description":"The name of the dimension to filter on. Fails with a `DimensionNotAvailable` exception if the specified dimension does not exist.","experimental":false,"name":"dimension","optional":false,"schema":{"type":"string"}},{"deprecated":false,"description":"Additional data to be passed to the condition.","experimental":false,"name":"context","optional":true,"schema":{"description":"Any data type."}}],"process_graph":{},"returns":{"description":"A data cube with the same dimensions. The dimension properties (name, type, labels, reference system and resolution) remain unchanged, except that the given dimension has less (or the same) dimension labels.","schema":{"subtype":"raster-cube","type":"object"}},"summary":"Filter dimension labels based on a condition"},{"categories":["cubes","masks"],"deprecated":false,"description":"Applies a (multi) polygon mask to a raster data cube. To apply a raster mask use ``mask()``.\n\nAll pixels for which the point at the pixel center **does not** intersect with any polygon (as defined in the Simple Features standard by the OGC) are replaced. This behavior can be inverted by setting the parameter `inside` to `true`.\n\nThe pixel values are replaced with the value specified for `replacement`, which defaults to `null` (no data). No data values in `data` will be left untouched by the masking operation.","exceptions":{},"experimental":false,"id":"mask_polygon","links":[{"href":"http://www.opengeospatial.org/standards/sfa","rel":"about","title":"Simple Features standard by the OGC"}],"parameters":[{"deprecated":false,"description":"A raster data cube.","experimental":false,"name":"data","optional":false,"schema":{"subtype":"raster-cube","type":"object"}},{"deprecated":false,"description":"A GeoJSON object containing at least one polygon. The provided feature types can be one of the following:\n\n* A `Polygon` or `MultiPolygon` geometry,\n* a `Feature` with a `Polygon` or `MultiPolygon` geometry,\n* a `FeatureCollection` containing at least one `Feature` with `Polygon` or `MultiPolygon` geometries, or\n* a `GeometryCollection` containing `Polygon` or `MultiPolygon` geometries. To maximize interoperability, `GeometryCollection` should be avoided in favour of one of the alternatives above.","experimental":false,"name":"mask","optional":false,"schema":{"subtype":"geojson","type":"object"}},{"deprecated":false,"description":"The value used to replace masked values with.","experimental":false,"name":"replacement","optional":true,"schema":[{"type":"number"},{"type":"boolean"},{"type":"string"},{"type":"null"}]},{"default":false,"deprecated":false,"description":"If set to `true` all pixels for which the point at the pixel center **does** intersect with any polygon are replaced.","experimental":false,"name":"inside","optional":true,"schema":{"type":"boolean"}}],"process_graph":{},"returns":{"description":"A masked raster data cube with the same dimensions. The dimension properties (name, type, labels, reference system and resolution) remain unchanged.","schema":{"subtype":"raster-cube","type":"object"}},"summary":"Apply a polygon mask"},{"categories":["aggregate & resample","climatology","cubes"],"deprecated":false,"description":"Computes a temporal aggregation based on calendar hierarchies such as years, months or seasons. For other calendar hierarchies ``aggregate_temporal()`` can be used.\n\nFor each interval, all data along the dimension will be passed through the reducer.\n\nIf the dimension is not set or is set to `null`, the data cube is expected to only have one temporal dimension.","exceptions":{"DimensionNotAvailable":{"http":400,"message":"A dimension with the specified name does not exist."},"DistinctDimensionLabelsRequired":{"http":400,"message":"The dimension labels have duplicate values. Distinct labels must be specified."},"TooManyDimensions":{"http":400,"message":"The data cube contains multiple temporal dimensions. The parameter `dimension` must be specified."}},"experimental":false,"id":"aggregate_temporal_period","links":[{"href":"https://openeo.org/documentation/1.0/datacubes.html#aggregate","rel":"about","title":"Aggregation explained in the openEO documentation"}],"parameters":[{"deprecated":false,"description":"The source data cube.","experimental":false,"name":"data","optional":false,"schema":{"subtype":"raster-cube","type":"object"}},{"deprecated":false,"description":"The time intervals to aggregate. The following pre-defined values are available:\n\n* `hour`: Hour of the day\n* `day`: Day of the year\n* `week`: Week of the year\n* `dekad`: Ten day periods, counted per year with three periods per month (day 1 - 10, 11 - 20 and 21 - end of month). The third dekad of the month can range from 8 to 11 days. For example, the fourth dekad is Feb, 1 - Feb, 10 each year.\n* `month`: Month of the year\n* `season`: Three month periods of the calendar seasons (December - February, March - May, June - August, September - November).\n* `tropical-season`: Six month periods of the tropical seasons (November - April, May - October).\n* `year`: Proleptic years\n* `decade`: Ten year periods ([0-to-9 decade](https://en.wikipedia.org/wiki/Decade#0-to-9_decade)), from a year ending in a 0 to the next year ending in a 9.\n* `decade-ad`: Ten year periods ([1-to-0 decade](https://en.wikipedia.org/wiki/Decade#1-to-0_decade)) better aligned with the anno Domini (AD) calendar era, from a year ending in a 1 to the next year ending in a 0.","experimental":false,"name":"period","optional":false,"schema":{"enum":["hour","day","week","dekad","month","season","tropical-season","year","decade","decade-ad"],"type":"string"}},{"deprecated":false,"description":"A reducer to be applied for the values contained in each period. A reducer is a single process such as ``mean()`` or a set of processes, which computes a single value for a list of values, see the category 'reducer' for such processes. Periods may not contain any values, which for most reducers leads to no-data (`null`) values by default.","experimental":false,"name":"reducer","optional":false,"schema":{"parameters":[{"deprecated":false,"description":"A labeled array with elements of any type. If there's no data for the period, the array is empty.","experimental":false,"name":"data","optional":false,"schema":{"items":{"description":"Any data type."},"subtype":"labeled-array","type":"array"}},{"deprecated":false,"description":"Additional data passed by the user.","experimental":false,"name":"context","optional":true,"schema":{"description":"Any data type."}}],"returns":{"description":"The value to be set in the new data cube.","schema":{"description":"Any data type."}},"subtype":"process-graph","type":"object"}},{"deprecated":false,"description":"The name of the temporal dimension for aggregation. All data along the dimension is passed through the specified reducer. If the dimension is not set or set to `null`, the source data cube is expected to only have one temporal dimension. Fails with a `TooManyDimensions` exception if it has more dimensions. Fails with a `DimensionNotAvailable` exception if the specified dimension does not exist.","experimental":false,"name":"dimension","optional":true,"schema":{"type":["string","null"]}},{"deprecated":false,"description":"Additional data to be passed to the reducer.","experimental":false,"name":"context","optional":true,"schema":{"description":"Any data type."}}],"process_graph":{},"returns":{"description":"A new data cube with the same dimensions. The dimension properties (name, type, labels, reference system and resolution) remain unchanged, except for the resolution and dimension labels of the given temporal dimension. The specified temporal dimension has the following dimension labels (`YYYY` = four-digit year, `MM` = two-digit month, `DD` two-digit day of month):\n\n* `hour`: `YYYY-MM-DD-00` - `YYYY-MM-DD-23`\n* `day`: `YYYY-001` - `YYYY-365`\n* `week`: `YYYY-01` - `YYYY-52`\n* `dekad`: `YYYY-00` - `YYYY-36`\n* `month`: `YYYY-01` - `YYYY-12`\n* `season`: `YYYY-djf` (December - February), `YYYY-mam` (March - May), `YYYY-jja` (June - August), `YYYY-son` (September - November).\n* `tropical-season`: `YYYY-ndjfma` (November - April), `YYYY-mjjaso` (May - October).\n* `year`: `YYYY`\n* `decade`: `YYY0`\n* `decade-ad`: `YYY1`\n\nThe dimension labels in the new data cube are complete for the whole extent of the source data cube. For example, if `period` is set to `day` and the source data cube has two dimension labels at the beginning of the year (`2020-01-01`) and the end of a year (`2020-12-31`), the process returns a data cube with 365 dimension labels (`2020-001`, `2020-002`, ..., `2020-365`). In contrast, if `period` is set to `day` and the source data cube has just one dimension label `2020-01-05`, the process returns a data cube with just a single dimension label (`2020-005`).","schema":{"subtype":"raster-cube","type":"object"}},"summary":"Temporal aggregations based on calendar hierarchies"},{"categories":["cubes"],"deprecated":false,"description":"Applies a process to all pixel values along a dimension of a raster data cube. For example, if the temporal dimension is specified the process will work on a time series of pixel values.\n\nThe process ``reduce_dimension()`` also applies a process to pixel values along a dimension, but drops the dimension afterwards. The process ``apply()`` applies a process to each pixel value in the data cube.\n\nThe target dimension is the source dimension if not specified otherwise in the `target_dimension` parameter. The pixel values in the target dimension get replaced by the computed pixel values. The name, type and reference system are preserved.\n\nThe dimension labels are preserved when the target dimension is the source dimension and the number of pixel values in the source dimension is equal to the number of values computed by the process. Otherwise, the dimension labels will be incrementing integers starting from zero, which can be changed using ``rename_labels()`` afterwards. The number of labels will equal to the number of values computed by the process.","exceptions":{"DimensionNotAvailable":{"http":400,"message":"A dimension with the specified name does not exist."}},"experimental":false,"id":"apply_dimension","links":[{"href":"https://openeo.org/documentation/1.0/datacubes.html#apply","rel":"about","title":"Apply explained in the openEO documentation"}],"parameters":[{"deprecated":false,"description":"A data cube.","experimental":false,"name":"data","optional":false,"schema":{"subtype":"raster-cube","type":"object"}},{"deprecated":false,"description":"Process to be applied on all pixel values. The specified process needs to accept an array and must return an array with at least one element. A process may consist of multiple sub-processes.","experimental":false,"name":"process","optional":false,"schema":{"parameters":[{"deprecated":false,"description":"A labeled array with elements of any type.","experimental":false,"name":"data","optional":false,"schema":{"items":{"description":"Any data type."},"subtype":"labeled-array","type":"array"}},{"deprecated":false,"description":"Additional data passed by the user.","experimental":false,"name":"context","optional":true,"schema":{"description":"Any data type."}}],"returns":{"description":"The value to be set in the new data cube.","schema":{"items":{"description":"Any data type."},"type":"array"}},"subtype":"process-graph","type":"object"}},{"deprecated":false,"description":"The name of the source dimension to apply the process on. Fails with a `DimensionNotAvailable` exception if the specified dimension does not exist.","experimental":false,"name":"dimension","optional":false,"schema":{"type":"string"}},{"deprecated":false,"description":"The name of the target dimension or `null` (the default) to use the source dimension specified in the parameter `dimension`.\n\nBy specifying a target dimension, the source dimension is removed. The target dimension with the specified name and the type `other` (see ``add_dimension()``) is created, if it doesn't exist yet.","experimental":false,"name":"target_dimension","optional":true,"schema":{"type":["string","null"]}},{"deprecated":false,"description":"Additional data to be passed to the process.","experimental":false,"name":"context","optional":true,"schema":{"description":"Any data type."}}],"process_graph":{},"returns":{"description":"A data cube with the newly computed values.\n\nAll dimensions stay the same, except for the dimensions specified in corresponding parameters. There are three cases how the dimensions can change:\n\n1. The source dimension is the target dimension:\n   - The (number of) dimensions remain unchanged as the source dimension is the target dimension.\n   - The source dimension properties name and type remain unchanged.\n   - The dimension labels, the reference system and the resolution are preserved only if the number of pixel values in the source dimension is equal to the number of values computed by the process. Otherwise, all other dimension properties change as defined in the list below.\n2. The source dimension is not the target dimension and the latter exists:\n   - The number of dimensions decreases by one as the source dimension is dropped.\n   - The target dimension properties name and type remain unchanged. All other dimension properties change as defined in the list below.\n3. The source dimension is not the target dimension and the latter does not exist:\n   - The number of dimensions remain unchanged, but the source dimension is replaced with the target dimension.\n   - The target dimension has the specified name and the type other. All other dimension properties are set as defined in the list below.\n\nUnless otherwise stated above, for the given (target) dimension the following applies:\n\n- the number of dimension labels is equal to the number of values computed by the process,\n- the dimension labels are incrementing integers starting from zero,\n- the resolution changes, and\n- the reference system is undefined.","schema":{"subtype":"raster-cube","type":"object"}},"summary":"Apply a process to pixels along a dimension"},{"categories":["cubes"],"deprecated":false,"description":"Renames a dimension in the data cube while preserving all other properties.","exceptions":{"DimensionExists":{"http":400,"message":"A dimension with the specified name already exists."},"DimensionNotAvailable":{"http":400,"message":"A dimension with the specified name does not exist."}},"experimental":false,"id":"rename_dimension","parameters":[{"deprecated":false,"description":"The data cube.","experimental":false,"name":"data","optional":false,"schema":{"subtype":"raster-cube","type":"object"}},{"deprecated":false,"description":"The current name of the dimension. Fails with a `DimensionNotAvailable` exception if the specified dimension does not exist.","experimental":false,"name":"source","optional":false,"schema":{"type":"string"}},{"deprecated":false,"description":"A new Name for the dimension. Fails with a `DimensionExists` exception if a dimension with the specified name exists.","experimental":false,"name":"target","optional":false,"schema":{"type":"string"}}],"process_graph":{},"returns":{"description":"A data cube with the same dimensions, but the name of one of the dimensions changes. The old name can not be referred to any longer. The dimension properties (name, type, labels, reference system and resolution) remain unchanged.","schema":{"subtype":"raster-cube","type":"object"}},"summary":"Rename a dimension"},{"categories":["cubes","filter"],"deprecated":false,"description":"Limits the data cube to the specified interval of dates and/or times.\n\nMore precisely, the filter checks whether each of the temporal dimension labels is greater than or equal to the lower boundary (start date/time) and less than the value of the upper boundary (end date/time). This corresponds to a left-closed interval, which contains the lower boundary but not the upper boundary.","exceptions":{"DimensionNotAvailable":{"http":400,"message":"A dimension with the specified name does not exist."}},"experimental":false,"id":"filter_temporal","links":[{"href":"https://openeo.org/documentation/1.0/datacubes.html#filter","rel":"about","title":"Filters explained in the openEO documentation"}],"parameters":[{"deprecated":false,"description":"A data cube.","experimental":false,"name":"data","optional":false,"schema":{"subtype":"raster-cube","type":"object"}},{"deprecated":false,"description":"Left-closed temporal interval, i.e. an array with exactly two elements:\n\n1. The first element is the start of the temporal interval. The specified instance in time is **included** in the interval.\n2. The second element is the end of the temporal interval. The specified instance in time is **excluded** from the interval.\n\nThe specified temporal strings follow [RFC 3339](https://www.rfc-editor.org/rfc/rfc3339.html). Also supports open intervals by setting one of the boundaries to `null`, but never both.","experimental":false,"name":"extent","optional":false,"schema":{"examples":[["2015-01-01T00:00:00Z","2016-01-01T00:00:00Z"],["2015-01-01","2016-01-01"]],"items":{"anyOf":[{"format":"date-time","subtype":"date-time","type":"string"},{"format":"date","subtype":"date","type":"string"},{"maxLength":4,"minLength":4,"pattern":"^\\d{4}$","subtype":"year","type":"string"},{"type":"null"}]},"maxItems":2.0,"minItems":2.0,"subtype":"temporal-interval","type":"array"}},{"deprecated":false,"description":"The name of the temporal dimension to filter on. If no specific dimension is specified or it is set to `null`, the filter applies to all temporal dimensions. Fails with a `DimensionNotAvailable` exception if the specified dimension does not exist.","experimental":false,"name":"dimension","optional":true,"schema":{"type":["string","null"]}}],"process_graph":{},"returns":{"description":"A data cube restricted to the specified temporal extent. The dimensions and dimension properties (name, type, labels, reference system and resolution) remain unchanged, except that the temporal dimensions (determined by `dimensions` parameter) may have less dimension labels.","schema":{"subtype":"raster-cube","type":"object"}},"summary":"Temporal filter based on temporal intervals"}]}

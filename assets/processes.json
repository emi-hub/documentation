{"links":[],"processes":[{"categories":["math > trigonometric"],"description":"Computes the arc cosine of `x`. The arc cosine is the inverse function of the cosine so that *`arccos(cos(x)) = x`*.\n\nWorks on radians only.\nThe no-data value `null` is passed through and therefore gets propagated.","examples":[{"arguments":{"x":1},"returns":0}],"id":"arccos","links":[{"href":"http://mathworld.wolfram.com/InverseCosine.html","rel":"about","title":"Inverse cosine explained by Wolfram MathWorld"}],"parameters":[{"description":"A number.","name":"x","schema":{"type":["number","null"]}}],"returns":{"description":"The computed angle in radians.","schema":{"type":["number","null"]}},"summary":"Inverse cosine"},{"categories":["math > trigonometric"],"description":"Computes the inverse hyperbolic cosine of `x`. It is the inverse function of the hyperbolic cosine so that *`arcosh(cosh(x)) = x`*.\n\nWorks on radians only.\nThe no-data value `null` is passed through and therefore gets propagated.","examples":[{"arguments":{"x":1},"returns":0}],"id":"arcosh","links":[{"href":"http://mathworld.wolfram.com/InverseHyperbolicCosine.html","rel":"about","title":"Inverse hyperbolic cosine explained by Wolfram MathWorld"}],"parameters":[{"description":"A number.","name":"x","schema":{"type":["number","null"]}}],"returns":{"description":"The computed angle in radians.","schema":{"type":["number","null"]}},"summary":"Inverse hyperbolic cosine"},{"categories":["math","math > exponential & logarithmic"],"description":"Computes the exponentiation for the base `base` raised to the power of `p`.\n\nThe no-data value `null` is passed through and therefore gets propagated if any of the arguments is `null`.","examples":[{"arguments":{"base":0,"p":2},"returns":0},{"arguments":{"base":2.5,"p":0},"returns":1},{"arguments":{"base":3,"p":3},"returns":27},{"arguments":{"base":5,"p":-1},"returns":0.2},{"arguments":{"base":1,"p":0.5},"returns":1},{"arguments":{"base":1,"p":null},"returns":null},{"arguments":{"base":null,"p":2},"returns":null}],"id":"power","links":[{"href":"http://mathworld.wolfram.com/Power.html","rel":"about","title":"Power explained by Wolfram MathWorld"}],"parameters":[{"description":"The numerical base.","name":"base","schema":{"type":["number","null"]}},{"description":"The numerical exponent.","name":"p","schema":{"type":["number","null"]}}],"returns":{"description":"The computed value for `base` raised to the power of `p`.","schema":{"type":["number","null"]}},"summary":"Exponentiation"},{"categories":["math"],"description":"Subtracts argument `y` from the argument `x` (*`x - y`*) and returns the computed result.\n\nNo-data values are taken into account so that `null` is returned if any element is such a value.\n\nThe computations follow [IEEE Standard 754](https://ieeexplore.ieee.org/document/8766229) whenever the processing environment supports it.","examples":[{"arguments":{"x":5,"y":2.5},"returns":2.5},{"arguments":{"x":-2,"y":4},"returns":-6},{"arguments":{"x":1,"y":null},"returns":null}],"id":"subtract","links":[{"href":"http://mathworld.wolfram.com/Subtraction.html","rel":"about","title":"Subtraction explained by Wolfram MathWorld"},{"href":"https://ieeexplore.ieee.org/document/8766229","rel":"about","title":"IEEE Standard 754-2019 for Floating-Point Arithmetic"}],"parameters":[{"description":"The minuend.","name":"x","schema":{"type":["number","null"]}},{"description":"The subtrahend.","name":"y","schema":{"type":["number","null"]}}],"returns":{"description":"The computed result.","schema":{"type":["number","null"]}},"summary":"Subtraction of two numbers"},{"categories":["logic"],"description":"Inverts a single boolean so that `true` gets `false` and `false` gets `true`.\n\nThe no-data value `null` is passed through and therefore gets propagated.","examples":[{"arguments":{"x":null},"returns":null},{"arguments":{"x":false},"returns":true},{"arguments":{"x":true},"returns":false}],"id":"not","parameters":[{"description":"Boolean value to invert.","name":"x","schema":{"type":["boolean","null"]}}],"returns":{"description":"Inverted boolean value.","schema":{"type":["boolean","null"]}},"summary":"Inverting a boolean"},{"categories":["math > trigonometric"],"description":"Computes the hyperbolic cosine of `x`.\n\nWorks on radians only.\nThe no-data value `null` is passed through and therefore gets propagated.","examples":[{"arguments":{"x":0},"returns":1}],"id":"cosh","links":[{"href":"http://mathworld.wolfram.com/HyperbolicCosine.html","rel":"about","title":"Hyperbolic cosine explained by Wolfram MathWorld"}],"parameters":[{"description":"An angle in radians.","name":"x","schema":{"type":["number","null"]}}],"returns":{"description":"The computed hyperbolic cosine of `x`.","schema":{"type":["number","null"]}},"summary":"Hyperbolic cosine"},{"categories":["math > trigonometric"],"description":"Computes the inverse hyperbolic tangent of `x`. It is the inverse function of the hyperbolic tangent so that *`artanh(tanh(x)) = x`*.\n\nWorks on radians only.\nThe no-data value `null` is passed through and therefore gets propagated.","examples":[{"arguments":{"x":0},"returns":0}],"id":"artanh","links":[{"href":"http://mathworld.wolfram.com/InverseHyperbolicTangent.html","rel":"about","title":"Inverse hyperbolic tangent explained by Wolfram MathWorld"}],"parameters":[{"description":"A number.","name":"x","schema":{"type":["number","null"]}}],"returns":{"description":"The computed angle in radians.","schema":{"type":["number","null"]}},"summary":"Inverse hyperbolic tangent"},{"categories":["math","reducer"],"description":"The statistical median of an array of numbers is the value separating the higher half from the lower half of the data.\n\nAn array without non-`null` elements resolves always with `null`.\n\n**Remarks:**\n\n* For symmetric arrays, the result is equal to the ``mean()``.\n* The median can also be calculated by computing the ``quantiles()`` with a probability of *0.5*.","examples":[{"arguments":{"data":[1,3,3,6,7,8,9]},"returns":6},{"arguments":{"data":[1,2,3,4,5,6,8,9]},"returns":4.5},{"arguments":{"data":[-1,-0.5,null,1]},"returns":-0.5},{"arguments":{"data":[-1,0,null,1],"ignore_nodata":false},"returns":null},{"arguments":{"data":[]},"description":"The input array is empty: return `null`.","returns":null},{"arguments":{"data":[null,null]},"description":"The input array has only `null` elements: return `null`.","returns":null}],"id":"median","links":[{"href":"http://mathworld.wolfram.com/StatisticalMedian.html","rel":"about","title":"Statistical Median explained by Wolfram MathWorld"}],"parameters":[{"description":"An array of numbers.","name":"data","schema":{"items":{"type":["number","null"]},"type":"array"}},{"default":true,"description":"Indicates whether no-data values are ignored or not. Ignores them by default. Setting this flag to `false` considers no-data values so that `null` is returned if any value is such a value.","name":"ignore_nodata","optional":true,"schema":{"type":"boolean"}}],"process_graph":{"array_element":{"arguments":{"data":{"from_node":"quantiles"},"index":0,"return_nodata":true},"process_id":"array_element","result":true},"quantiles":{"arguments":{"data":{"from_parameter":"data"},"ignore_nodata":{"from_parameter":"ignore_nodata"},"probabilities":[0.5]},"process_id":"quantiles"}},"returns":{"description":"The computed statistical median.","schema":{"type":["number","null"]}},"summary":"Statistical median"},{"categories":["texts","comparison"],"description":"Compares whether `x` is strictly equal to `y`.\n\n**Remarks:**\n\n* Data types MUST be checked strictly. For example, a string with the content *1* is not equal to the number *1*. Nevertheless, an integer *1* is equal to a floating-point number *1.0* as `integer` is a sub-type of `number`.\n* If any operand is `null`, the return value is `null`. Therefore, `eq(null, null)` returns `null` instead of `true`.\n* If any operand is an array or object, the return value is `false`.\n* Strings are expected to be encoded in UTF-8 by default.\n* Temporal strings MUST be compared differently than other strings and MUST NOT be compared based on their string representation due to different possible representations. For example, the time zone representation `Z` (for UTC) has the same meaning as `+00:00`.","examples":[{"arguments":{"x":1,"y":null},"returns":null},{"arguments":{"x":null,"y":null},"returns":null},{"arguments":{"x":1,"y":1},"returns":true},{"arguments":{"x":1,"y":"1"},"returns":false},{"arguments":{"x":0,"y":false},"returns":false},{"arguments":{"delta":0.01,"x":1.02,"y":1},"returns":false},{"arguments":{"delta":0.01,"x":-1,"y":-1.001},"returns":true},{"arguments":{"delta":10,"x":115,"y":110},"returns":true},{"arguments":{"x":"Test","y":"test"},"returns":false},{"arguments":{"case_sensitive":false,"x":"Test","y":"test"},"returns":true},{"arguments":{"case_sensitive":false,"x":"\u00c4","y":"\u00e4"},"returns":true},{"arguments":{"x":"00:00:00+00:00","y":"00:00:00Z"},"returns":true},{"arguments":{"x":"2018-01-01T12:00:00Z","y":"2018-01-01T12:00:00"},"description":"`y` is not a valid date-time representation and therefore will be treated as a string so that the provided values are not equal.","returns":false},{"arguments":{"x":"2018-01-01T00:00:00Z","y":"2018-01-01T01:00:00+01:00"},"description":"01:00 in the time zone +1 is equal to 00:00 in UTC.","returns":true},{"arguments":{"x":[1,2,3],"y":[1,2,3]},"returns":false}],"id":"eq","parameters":[{"description":"First operand.","name":"x","schema":{"description":"Any data type is allowed."}},{"description":"Second operand.","name":"y","schema":{"description":"Any data type is allowed."}},{"default":null,"description":"Only applicable for comparing two numbers. If this optional parameter is set to a positive non-zero number the equality of two numbers is checked against a delta value. This is especially useful to circumvent problems with floating-point inaccuracy in machine-based computation.\n\nThis option is basically an alias for the following computation: `lte(abs(minus([x, y]), delta)`","name":"delta","optional":true,"schema":{"type":["number","null"]}},{"default":true,"description":"Only applicable for comparing two strings. Case sensitive comparison can be disabled by setting this parameter to `false`.","name":"case_sensitive","optional":true,"schema":{"type":"boolean"}}],"returns":{"description":"`true` if `x` is equal to `y`, `null` if any operand is `null`, otherwise `false`.","schema":{"type":["boolean","null"]}},"summary":"Equal to comparison"},{"categories":["math"],"description":"Computes the absolute value of a real number `x`, which is the \"unsigned\" portion of x and often denoted as *|x|*.\n\nThe no-data value `null` is passed through and therefore gets propagated.","examples":[{"arguments":{"x":0},"returns":0},{"arguments":{"x":3.5},"returns":3.5},{"arguments":{"x":-0.4},"returns":0.4},{"arguments":{"x":-3.5},"returns":3.5}],"id":"absolute","links":[{"href":"http://mathworld.wolfram.com/AbsoluteValue.html","rel":"about","title":"Absolute value explained by Wolfram MathWorld"}],"parameters":[{"description":"A number.","name":"x","schema":{"type":["number","null"]}}],"process_graph":{"if":{"arguments":{"accept":{"from_node":"multiply"},"reject":{"from_parameter":"x"},"value":{"from_node":"lt"}},"process_id":"if","result":true},"lt":{"arguments":{"x":{"from_parameter":"x"},"y":0},"process_id":"lt"},"multiply":{"arguments":{"x":{"from_parameter":"x"},"y":-1},"process_id":"multiply"}},"returns":{"description":"The computed absolute value.","schema":{"minimum":0,"type":["number","null"]}},"summary":"Absolute value"},{"categories":["math > trigonometric"],"description":"Computes the arc tangent of two numbers `x` and `y`. It is similar to calculating the arc tangent of *`y / x`*, except that the signs of both arguments are used to determine the quadrant of the result.\n\nWorks on radians only.\nThe no-data value `null` is passed through and therefore gets propagated if any of the arguments is `null`.","examples":[{"arguments":{"x":0,"y":0},"returns":0},{"arguments":{"x":1.5,"y":null},"returns":null}],"id":"arctan2","links":[{"href":"https://en.wikipedia.org/wiki/Atan2","rel":"about","title":"Two-argument inverse tangent explained by Wikipedia"}],"parameters":[{"description":"A number to be used as the dividend.","name":"y","schema":{"type":["number","null"]}},{"description":"A number to be used as the divisor.","name":"x","schema":{"type":["number","null"]}}],"returns":{"description":"The computed angle in radians.","schema":{"type":["number","null"]}},"summary":"Inverse tangent of two numbers"},{"categories":["math"],"description":"Divides argument `x` by the argument `y` (*`x / y`*) and returns the computed result.\n\nNo-data values are taken into account so that `null` is returned if any element is such a value.\n\nThe computations follow [IEEE Standard 754](https://ieeexplore.ieee.org/document/8766229) whenever the processing environment supports it. Therefore, a division by zero results in \u00b1infinity if the processing environment supports it. Otherwise, a `DivisionByZero` exception must the thrown.","examples":[{"arguments":{"x":5,"y":2.5},"returns":2},{"arguments":{"x":-2,"y":4},"returns":-0.5},{"arguments":{"x":1,"y":null},"returns":null}],"exceptions":{"DivisionByZero":{"message":"Division by zero is not supported."}},"id":"divide","links":[{"href":"http://mathworld.wolfram.com/Division.html","rel":"about","title":"Division explained by Wolfram MathWorld"},{"href":"https://ieeexplore.ieee.org/document/8766229","rel":"about","title":"IEEE Standard 754-2019 for Floating-Point Arithmetic"}],"parameters":[{"description":"The dividend.","name":"x","schema":{"type":["number","null"]}},{"description":"The divisor.","name":"y","schema":{"type":["number","null"]}}],"returns":{"description":"The computed result.","schema":{"type":["number","null"]}},"summary":"Division of two numbers"},{"categories":["logic","reducer"],"description":"Checks if **all** of the values in `data` are true. If no value is given (i.e. the array is empty) the process returns `null`.\n\nBy default all no-data values are ignored so that the process returns `null` if all values are no-data, `true` if all values are true and `false` otherwise. Setting the `ignore_nodata` flag to `false` takes no-data values into account and the array values are reduced pairwise according to the following truth table:\n\n```\n      || null  | false | true\n----- || ----- | ----- | -----\nnull  || null  | false | null\nfalse || false | false | false\ntrue  || null  | false | true\n```\n\n**Remark:** The process evaluates all values from the first to the last element and stops once the outcome is unambiguous. A result is ambiguous unless a value is `false` or all values have been taken into account.","examples":[{"arguments":{"data":[false,null]},"returns":false},{"arguments":{"data":[true,null]},"returns":true},{"arguments":{"data":[false,null],"ignore_nodata":false},"returns":false},{"arguments":{"data":[true,null],"ignore_nodata":false},"returns":null},{"arguments":{"data":[true,false,true,false]},"returns":false},{"arguments":{"data":[true,false]},"returns":false},{"arguments":{"data":[true,true]},"returns":true},{"arguments":{"data":[true]},"returns":true},{"arguments":{"data":[null],"ignore_nodata":false},"returns":null},{"arguments":{"data":[]},"returns":null}],"id":"all","parameters":[{"description":"A set of boolean values.","name":"data","schema":{"items":{"type":["boolean","null"]},"type":"array"}},{"default":true,"description":"Indicates whether no-data values are ignored or not and ignores them by default.","name":"ignore_nodata","optional":true,"schema":{"type":"boolean"}}],"returns":{"description":"Boolean result of the logical operation.","schema":{"type":["boolean","null"]}},"summary":"Are all of the values true?"},{"categories":["math > rounding"],"description":"Rounds a real number `x` to specified precision `p`.\n\nIf the fractional part of `x` is halfway between two integers, one of which is even and the other odd, then the even number is returned.\nThis behavior follows [IEEE Standard 754](https://ieeexplore.ieee.org/document/8766229). This kind of rounding is also called \"round to nearest (even)\" or \"banker's rounding\". It minimizes rounding errors that result from consistently rounding a midpoint value in a single direction.\n\nThe no-data value `null` is passed through and therefore gets propagated.","examples":[{"arguments":{"x":0},"returns":0},{"arguments":{"p":1,"x":3.56},"returns":3.6},{"arguments":{"p":2,"x":-0.4444444},"returns":-0.44},{"arguments":{"x":-2.5},"returns":-2},{"arguments":{"x":-3.5},"returns":-4},{"arguments":{"p":-2,"x":1234.5},"returns":1200}],"id":"round","links":[{"href":"http://mathworld.wolfram.com/AbsoluteValue.html","rel":"about","title":"Absolute value explained by Wolfram MathWorld"},{"href":"https://ieeexplore.ieee.org/document/8766229","rel":"about","title":"IEEE Standard 754-2019 for Floating-Point Arithmetic"}],"parameters":[{"description":"A number to round.","name":"x","schema":{"type":["number","null"]}},{"default":0,"description":"A positive number specifies the number of digits after the decimal point to round to. A negative number means rounding to a power of ten, so for example *-2* rounds to the nearest hundred. Defaults to *0*.","name":"p","optional":true,"schema":{"type":"integer"}}],"returns":{"description":"The rounded number.","schema":{"type":["number","null"]}},"summary":"Round to a specified precision"},{"categories":["math","reducer"],"description":"Computes the smallest value of an array of numbers, which is equal to the last element of a sorted (i.e., ordered) version of the array.\n\nAn array without non-`null` elements resolves always with `null`.","examples":[{"arguments":{"data":[1,0,3,2]},"returns":0},{"arguments":{"data":[5,2.5,null,-0.7]},"returns":-0.7},{"arguments":{"data":[1,0,3,null,2],"ignore_nodata":false},"returns":null},{"arguments":{"data":[]},"returns":null}],"id":"min","links":[{"href":"http://mathworld.wolfram.com/Minimum.html","rel":"about","title":"Minimum explained by Wolfram MathWorld"}],"parameters":[{"description":"An array of numbers.","name":"data","schema":{"items":{"type":["number","null"]},"type":"array"}},{"default":true,"description":"Indicates whether no-data values are ignored or not. Ignores them by default. Setting this flag to `false` considers no-data values so that `null` is returned if any value is such a value.","name":"ignore_nodata","optional":true,"schema":{"type":"boolean"}}],"returns":{"description":"The minimum value.","schema":{"type":["number","null"]}},"summary":"Minimum value"},{"categories":["logic","reducer"],"description":"Checks if **any** (i.e. at least one) value in `data` is `true`. If no value is given (i.e. the array is empty) the process returns `null`.\n\nBy default all no-data values are ignored so that the process returns `null` if all values are no-data, `true` if at least one value is true and `false` otherwise. Setting the `ignore_nodata` flag to `false` takes no-data values into account and the array values are reduced pairwise according to the following truth table:\n\n```\n      || null | false | true\n----- || ---- | ----- | ----\nnull  || null | null  | true\nfalse || null | false | true\ntrue  || true | true  | true\n```\n\n**Remark:** The process evaluates all values from the first to the last element and stops once the outcome is unambiguous. A result is ambiguous unless a value is `true`.","examples":[{"arguments":{"data":[false,null]},"returns":false},{"arguments":{"data":[true,null]},"returns":true},{"arguments":{"data":[false,null],"ignore_nodata":false},"returns":null},{"arguments":{"data":[true,null],"ignore_nodata":false},"returns":true},{"arguments":{"data":[true,false,true,false]},"returns":true},{"arguments":{"data":[true,false]},"returns":true},{"arguments":{"data":[false,false]},"returns":false},{"arguments":{"data":[true]},"returns":true},{"arguments":{"data":[null],"ignore_nodata":false},"returns":null},{"arguments":{"data":[]},"returns":null}],"id":"any","parameters":[{"description":"A set of boolean values.","name":"data","schema":{"items":{"type":["boolean","null"]},"type":"array"}},{"default":true,"description":"Indicates whether no-data values are ignored or not and ignores them by default.","name":"ignore_nodata","optional":true,"schema":{"type":"boolean"}}],"returns":{"description":"Boolean result of the logical operation.","schema":{"type":["boolean","null"]}},"summary":"Is at least one value true?"},{"categories":["comparison"],"description":"Compares whether `x` is greater than or equal to `y`.\n\n**Remarks:**\n\n* If any operand is `null`, the return value is `null`. Therefore, `gte(null, null)` returns `null` instead of `true`.\n* If any operand is an array or object, the return value is `false`.\n* If the operands are not equal (see process ``eq()``) and any of them is not a `number` or temporal string (`date`, `time` or `date-time`), the process returns `false`.\n* Temporal strings can *not* be compared based on their string representation due to the time zone / time-offset representations.","examples":[{"arguments":{"x":1,"y":null},"returns":null},{"arguments":{"x":0,"y":0},"returns":true},{"arguments":{"x":1,"y":2},"returns":false},{"arguments":{"x":-0.5,"y":-0.6},"returns":true},{"arguments":{"x":"00:00:00Z","y":"00:00:00+01:00"},"returns":true},{"arguments":{"x":"1950-01-01T00:00:00Z","y":"2018-01-01T12:00:00Z"},"returns":false},{"arguments":{"x":"2018-01-01T12:00:00+00:00","y":"2018-01-01T12:00:00Z"},"returns":true},{"arguments":{"x":true,"y":false},"returns":false},{"arguments":{"x":[1,2,3],"y":[1,2,3]},"returns":false}],"id":"gte","parameters":[{"description":"First operand.","name":"x","schema":{"description":"Any data type is allowed."}},{"description":"Second operand.","name":"y","schema":{"description":"Any data type is allowed."}}],"process_graph":{"eq":{"arguments":{"x":{"from_parameter":"x"},"y":{"from_parameter":"y"}},"process_id":"eq"},"gt":{"arguments":{"x":{"from_parameter":"x"},"y":{"from_parameter":"y"}},"process_id":"gt"},"or":{"arguments":{"x":{"from_node":"gt"},"y":{"from_node":"eq"}},"process_id":"or","result":true}},"returns":{"description":"`true` if `x` is greater than or equal to `y`, `null` if any operand is `null`, otherwise `false`.","schema":{"type":["boolean","null"]}},"summary":"Greater than or equal to comparison"},{"categories":["math > trigonometric"],"description":"Computes the cosine of `x`.\n\nWorks on radians only.\nThe no-data value `null` is passed through and therefore gets propagated.","examples":[{"arguments":{"x":0},"returns":1}],"id":"cos","links":[{"href":"http://mathworld.wolfram.com/Cosine.html","rel":"about","title":"Cosine explained by Wolfram MathWorld"}],"parameters":[{"description":"An angle in radians.","name":"x","schema":{"type":["number","null"]}}],"returns":{"description":"The computed cosine of `x`.","schema":{"type":["number","null"]}},"summary":"Cosine"},{"categories":["logic"],"description":"Checks if **exactly one** of the values is true. If a component is `null`, the result will be `null` if the outcome is ambiguous.\n\n**Truth table:**\n\n```\na \\ b || null | false | true\n----- || ---- | ----- | -----\nnull  || null | null  | null\nfalse || null | false | true\ntrue  || null | true  | false\n```","examples":[{"arguments":{"x":true,"y":true},"returns":false},{"arguments":{"x":false,"y":false},"returns":false},{"arguments":{"x":true,"y":false},"returns":true},{"arguments":{"x":true,"y":null},"returns":null},{"arguments":{"x":false,"y":null},"returns":null}],"id":"xor","parameters":[{"description":"A boolean value.","name":"x","schema":{"type":["boolean","null"]}},{"description":"A boolean value.","name":"y","schema":{"type":["boolean","null"]}}],"process_graph":{"and1":{"arguments":{"x":{"from_node":"not_x"},"y":{"from_parameter":"y"}},"process_id":"and"},"and2":{"arguments":{"x":{"from_parameter":"x"},"y":{"from_node":"not_y"}},"process_id":"and"},"not_x":{"arguments":{"x":{"from_parameter":"x"}},"process_id":"not"},"not_y":{"arguments":{"x":{"from_parameter":"y"}},"process_id":"not"},"or":{"arguments":{"x":{"from_node":"and1"},"y":{"from_node":"and2"}},"process_id":"or","result":true}},"returns":{"description":"Boolean result of the logical XOR.","schema":{"type":["boolean","null"]}},"summary":"Logical XOR (exclusive or)"},{"categories":["logic"],"description":"Checks if **both** values are true.\n\nEvaluates parameter `x` before `y` and stops once the outcome is unambiguous. If any argument is `null`, the result will be `null` if the outcome is ambiguous.\n\n**Truth table:**\n\n```\na \\ b || null  | false | true\n----- || ----- | ----- | -----\nnull  || null  | false | null\nfalse || false | false | false\ntrue  || null  | false | true\n```","examples":[{"arguments":{"x":true,"y":true},"returns":true},{"arguments":{"x":true,"y":false},"returns":false},{"arguments":{"x":false,"y":false},"returns":false},{"arguments":{"x":false,"y":null},"returns":false},{"arguments":{"x":true,"y":null},"returns":null}],"id":"and","parameters":[{"description":"A boolean value.","name":"x","schema":{"type":["boolean","null"]}},{"description":"A boolean value.","name":"y","schema":{"type":["boolean","null"]}}],"process_graph":{"all":{"arguments":{"data":[{"from_parameter":"x"},{"from_parameter":"y"}],"ignore_nodata":false},"process_id":"all","result":true}},"returns":{"description":"Boolean result of the logical AND.","schema":{"type":["boolean","null"]}},"summary":"Logical AND"},{"categories":["math","reducer"],"description":"Computes the sample variance of an array of numbers by calculating the square of the standard deviation (see ``sd()``). It is defined to be the expectation of the squared deviation of a random variable from its expected value. Basically, it measures how far the numbers in the array are spread out from their average value.\n\nAn array without non-`null` elements resolves always with `null`.","examples":[{"arguments":{"data":[-1,1,3]},"returns":4},{"arguments":{"data":[2,3,3,null,4,4,5]},"returns":1.1},{"arguments":{"data":[-1,1,null,3],"ignore_nodata":false},"returns":null},{"arguments":{"data":[]},"description":"The input array is empty: return `null`.","returns":null}],"id":"variance","links":[{"href":"http://mathworld.wolfram.com/Variance.html","rel":"about","title":"Variance explained by Wolfram MathWorld"}],"parameters":[{"description":"An array of numbers.","name":"data","schema":{"items":{"type":["number","null"]},"type":"array"}},{"default":true,"description":"Indicates whether no-data values are ignored or not. Ignores them by default. Setting this flag to `false` considers no-data values so that `null` is returned if any value is such a value.","name":"ignore_nodata","optional":true,"schema":{"type":"boolean"}}],"process_graph":{"apply":{"arguments":{"context":{"from_node":"mean"},"data":{"from_parameter":"data"},"process":{"process-graph":{"power":{"arguments":{"base":{"from_node":"subtract"},"p":2},"process_id":"power","result":true},"subtract":{"arguments":{"x":{"from_parameter":"x"},"y":{"from_parameter":"context"}},"process_id":"subtract"}}}},"process_id":"apply"},"mean":{"arguments":{"data":{"from_parameter":"data"}},"process_id":"mean"},"mean2":{"arguments":{"data":{"from_node":"apply"},"ignore_nodata":{"from_parameter":"ignore_nodata"}},"process_id":"mean","result":true}},"returns":{"description":"The computed sample variance.","schema":{"type":["number","null"]}},"summary":"Variance"},{"categories":["logic"],"description":"Checks if **at least one** of the values is true. Evaluates parameter `x` before `y` and stops once the outcome is unambiguous. If a component is `null`, the result will be `null` if the outcome is ambiguous.\n\n**Truth table:**\n\n```\na \\ b || null | false | true\n----- || ---- | ----- | ----\nnull  || null | null  | true\nfalse || null | false | true\ntrue  || true | true  | true\n```","examples":[{"arguments":{"x":true,"y":true},"returns":true},{"arguments":{"x":false,"y":false},"returns":false},{"arguments":{"x":true,"y":null},"returns":true},{"arguments":{"x":null,"y":true},"returns":true},{"arguments":{"x":false,"y":null},"returns":null}],"id":"or","parameters":[{"description":"A boolean value.","name":"x","schema":{"type":["boolean","null"]}},{"description":"A boolean value.","name":"y","schema":{"type":["boolean","null"]}}],"process_graph":{"any":{"arguments":{"data":[{"from_parameter":"x"},{"from_parameter":"y"}],"ignore_nodata":false},"process_id":"any","result":true}},"returns":{"description":"Boolean result of the logical OR.","schema":{"type":["boolean","null"]}},"summary":"Logical OR"},{"categories":["math","reducer"],"description":"Sums up all elements in a sequential array of numbers and returns the computed sum.\n\nBy default no-data values are ignored. Setting `ignore_nodata` to `false` considers no-data values so that `null` is returned if any element is such a value.\n\nThe computations follow [IEEE Standard 754](https://ieeexplore.ieee.org/document/8766229) whenever the processing environment supports it.","examples":[{"arguments":{"data":[5,1]},"returns":6},{"arguments":{"data":[-2,4,2.5]},"returns":4.5},{"arguments":{"data":[1,null],"ignore_nodata":false},"returns":null},{"arguments":{"data":[100]},"returns":100},{"arguments":{"data":[null],"ignore_nodata":false},"returns":null},{"arguments":{"data":[]},"returns":null}],"id":"sum","links":[{"href":"http://mathworld.wolfram.com/Sum.html","rel":"about","title":"Sum explained by Wolfram MathWorld"},{"href":"https://ieeexplore.ieee.org/document/8766229","rel":"about","title":"IEEE Standard 754-2019 for Floating-Point Arithmetic"}],"parameters":[{"description":"An array of numbers.","name":"data","schema":{"items":{"type":["number","null"]},"type":"array"}},{"default":true,"description":"Indicates whether no-data values are ignored or not. Ignores them by default. Setting this flag to `false` considers no-data values so that `null` is returned if any value is such a value.","name":"ignore_nodata","optional":true,"schema":{"type":"boolean"}}],"returns":{"description":"The computed sum of the sequence of numbers.","schema":{"type":["number","null"]}},"summary":"Compute the sum by adding up numbers"},{"categories":["math > trigonometric"],"description":"Computes the sine of `x`.\n\nWorks on radians only.\nThe no-data value `null` is passed through and therefore gets propagated.","examples":[{"arguments":{"x":0},"returns":0}],"id":"sin","links":[{"href":"http://mathworld.wolfram.com/Sine.html","rel":"about","title":"Sine explained by Wolfram MathWorld"}],"parameters":[{"description":"An angle in radians.","name":"x","schema":{"type":["number","null"]}}],"returns":{"description":"The computed sine of `x`.","schema":{"type":["number","null"]}},"summary":"Sine"},{"categories":["math > trigonometric"],"description":"Computes the hyperbolic sine of `x`.\n\nWorks on radians only.\nThe no-data value `null` is passed through and therefore gets propagated.","examples":[{"arguments":{"x":0},"returns":0}],"id":"sinh","links":[{"href":"http://mathworld.wolfram.com/HyperbolicSine.html","rel":"about","title":"Hyperbolic sine explained by Wolfram MathWorld"}],"parameters":[{"description":"An angle in radians.","name":"x","schema":{"type":["number","null"]}}],"returns":{"description":"The computed hyperbolic sine of `x`.","schema":{"type":["number","null"]}},"summary":"Hyperbolic sine"},{"categories":["math","reducer"],"description":"Multiplies all elements in a sequential array of numbers and returns the computed product.\n\nBy default no-data values are ignored. Setting `ignore_nodata` to `false` considers no-data values so that `null` is returned if any element is such a value.\n\nThe computations follow [IEEE Standard 754](https://ieeexplore.ieee.org/document/8766229) whenever the processing environment supports it.","examples":[{"arguments":{"data":[5,0]},"returns":0},{"arguments":{"data":[-2,4,2.5]},"returns":-20},{"arguments":{"data":[1,null],"ignore_nodata":false},"returns":null},{"arguments":{"data":[-1]},"returns":-1},{"arguments":{"data":[null],"ignore_nodata":false},"returns":null},{"arguments":{"data":[]},"returns":null}],"id":"product","links":[{"href":"http://mathworld.wolfram.com/Product.html","rel":"about","title":"Product explained by Wolfram MathWorld"},{"href":"https://ieeexplore.ieee.org/document/8766229","rel":"about","title":"IEEE Standard 754-2019 for Floating-Point Arithmetic"}],"parameters":[{"description":"An array of numbers.","name":"data","schema":{"items":{"type":["number","null"]},"type":"array"}},{"default":true,"description":"Indicates whether no-data values are ignored or not. Ignores them by default. Setting this flag to `false` considers no-data values so that `null` is returned if any value is such a value.","name":"ignore_nodata","optional":true,"schema":{"type":"boolean"}}],"returns":{"description":"The computed product of the sequence of numbers.","schema":{"type":["number","null"]}},"summary":"Compute the product by multiplying numbers"},{"categories":["math > exponential & logarithmic"],"description":"Exponential function to the base *e* raised to the power of `p`.\n\nThe no-data value `null` is passed through and therefore gets propagated.","examples":[{"arguments":{"p":0},"returns":1},{"arguments":{"p":null},"returns":null}],"id":"exp","links":[{"href":"http://mathworld.wolfram.com/ExponentialFunction.html","rel":"about","title":"Exponential function explained by Wolfram MathWorld"}],"parameters":[{"description":"The numerical exponent.","name":"p","schema":{"type":["number","null"]}}],"process_graph":{"e":{"arguments":{},"process_id":"e"},"power":{"arguments":{"base":{"from_node":"e"},"p":{"from_parameter":"p"}},"process_id":"power","result":true}},"returns":{"description":"The computed value for *e* raised to the power of `p`.","schema":{"type":["number","null"]}},"summary":"Exponentiation to the base e"},{"categories":["texts","comparison"],"description":"Compares whether `x` is *not* strictly equal to `y`.\n\n**Remarks:**\n\n* Data types MUST be checked strictly. For example, a string with the content *1* is not equal to the number *1*. Nevertheless, an integer *1* is equal to a floating-point number *1.0* as `integer` is a sub-type of `number`.\n* If any operand is `null`, the return value is `null`. Therefore, `neq(null, null)` returns `null` instead of `false`.\n* If any operand is an array or object, the return value is `false`.\n* Strings are expected to be encoded in UTF-8 by default.\n* Temporal strings MUST be compared differently than other strings and MUST NOT be compared based on their string representation due to different possible representations. For example, the time zone representation `Z` (for UTC) has the same meaning as `+00:00`.","examples":[{"arguments":{"x":1,"y":null},"returns":null},{"arguments":{"x":1,"y":1},"returns":false},{"arguments":{"x":1,"y":"1"},"returns":true},{"arguments":{"x":0,"y":false},"returns":true},{"arguments":{"delta":0.01,"x":1.02,"y":1},"returns":true},{"arguments":{"delta":0.01,"x":-1,"y":-1.001},"returns":false},{"arguments":{"delta":10,"x":115,"y":110},"returns":false},{"arguments":{"x":"Test","y":"test"},"returns":true},{"arguments":{"case_sensitive":false,"x":"Test","y":"test"},"returns":false},{"arguments":{"case_sensitive":false,"x":"\u00c4","y":"\u00e4"},"returns":false},{"arguments":{"x":"00:00:00+00:00","y":"00:00:00Z"},"returns":false},{"arguments":{"x":"2018-01-01T12:00:00Z","y":"2018-01-01T12:00:00"},"description":"`y` is not a valid date-time representation and therefore will be treated as a string so that the provided values are not equal.","returns":true},{"arguments":{"x":"2018-01-01T00:00:00Z","y":"2018-01-01T01:00:00+01:00"},"description":"01:00 in the time zone +1 is equal to 00:00 in UTC.","returns":false},{"arguments":{"x":[1,2,3],"y":[1,2,3]},"returns":false}],"id":"neq","parameters":[{"description":"First operand.","name":"x","schema":{"description":"Any data type is allowed."}},{"description":"Second operand.","name":"y","schema":{"description":"Any data type is allowed."}},{"default":null,"description":"Only applicable for comparing two numbers. If this optional parameter is set to a positive non-zero number the non-equality of two numbers is checked against a delta value. This is especially useful to circumvent problems with floating-point inaccuracy in machine-based computation.\n\nThis option is basically an alias for the following computation: `gt(abs(minus([x, y]), delta)`","name":"delta","optional":true,"schema":{"type":["number","null"]}},{"default":true,"description":"Only applicable for comparing two strings. Case sensitive comparison can be disabled by setting this parameter to `false`.","name":"case_sensitive","optional":true,"schema":{"type":"boolean"}}],"process_graph":{"eq":{"arguments":{"case_sensitive":{"from_parameter":"case_sensitive"},"delta":{"from_parameter":"delta"},"x":{"from_parameter":"x"},"y":{"from_parameter":"y"}},"process_id":"eq"},"not":{"arguments":{"x":{"from_node":"eq"}},"process_id":"not","result":true}},"returns":{"description":"`true` if `x` is *not* equal to `y`, `null` if any operand is `null`, otherwise `false`.","schema":{"type":["boolean","null"]}},"summary":"Not equal to comparison"},{"categories":["math","reducer"],"description":"Computes the sample standard deviation, which quantifies the amount of variation of an array of numbers. It is defined to be the square root of the corresponding variance (see ``variance()``).\n\nA low standard deviation indicates that the values tend to be close to the expected value, while a high standard deviation indicates that the values are spread out over a wider range.\n\nAn array without non-`null` elements resolves always with `null`.","examples":[{"arguments":{"data":[-1,1,3,null]},"returns":2},{"arguments":{"data":[-1,1,3,null],"ignore_nodata":false},"returns":null},{"arguments":{"data":[]},"description":"The input array is empty: return `null`.","returns":null}],"id":"sd","links":[{"href":"http://mathworld.wolfram.com/StandardDeviation.html","rel":"about","title":"Standard deviation explained by Wolfram MathWorld"}],"parameters":[{"description":"An array of numbers.","name":"data","schema":{"items":{"type":["number","null"]},"type":"array"}},{"default":true,"description":"Indicates whether no-data values are ignored or not. Ignores them by default. Setting this flag to `false` considers no-data values so that `null` is returned if any value is such a value.","name":"ignore_nodata","optional":true,"schema":{"type":"boolean"}}],"process_graph":{"power":{"arguments":{"base":{"from_node":"variance"},"p":0.5},"process_id":"power","result":true},"variance":{"arguments":{"data":{"from_parameter":"data"},"ignore_nodata":{"from_parameter":"ignore_nodata"}},"process_id":"variance"}},"returns":{"description":"The computed sample standard deviation.","schema":{"type":["number","null"]}},"summary":"Standard deviation"},{"categories":["math > trigonometric"],"description":"Computes the inverse hyperbolic sine of `x`. It is the inverse function of the hyperbolic sine so that *`arsinh(sinh(x)) = x`*.\n\nWorks on radians only.\nThe no-data value `null` is passed through and therefore gets propagated.","examples":[{"arguments":{"x":0},"returns":0}],"id":"arsinh","links":[{"href":"http://mathworld.wolfram.com/InverseHyperbolicSine.html","rel":"about","title":"Inverse hyperbolic sine explained by Wolfram MathWorld"}],"parameters":[{"description":"A number.","name":"x","schema":{"type":["number","null"]}}],"returns":{"description":"The computed angle in radians.","schema":{"type":["number","null"]}},"summary":"Inverse hyperbolic sine"},{"categories":["math","math > rounding"],"description":"The integer part of the real number `x`.\n\nThis process is *not* an alias for the ``floor()`` process as defined by some mathematicians, see the examples for negative numbers in both processes for differences.\n\nThe no-data value `null` is passed through and therefore gets propagated.","examples":[{"arguments":{"x":0},"returns":0},{"arguments":{"x":3.5},"returns":3},{"arguments":{"x":-0.4},"returns":0},{"arguments":{"x":-3.5},"returns":-3}],"id":"int","links":[{"href":"http://mathworld.wolfram.com/IntegerPart.html","rel":"about","title":"Integer Part explained by Wolfram MathWorld"}],"parameters":[{"description":"A number.","name":"x","schema":{"type":["number","null"]}}],"returns":{"description":"Integer part of the number.","schema":{"type":["integer","null"]}},"summary":"Integer part of a number"},{"categories":["logic","comparison","masks"],"description":"If the value passed is `true`, returns the value of the `accept` parameter, otherwise returns the value of the `reject` parameter.\n\nThis is basically an if-then-else construct as in other programming languages.","examples":[{"arguments":{"accept":"A","reject":"B","value":true},"returns":"A"},{"arguments":{"accept":"A","reject":"B","value":null},"returns":"B"},{"arguments":{"accept":[1,2,3],"reject":[4,5,6],"value":false},"returns":[4,5,6]},{"arguments":{"accept":123,"value":true},"returns":123},{"arguments":{"accept":1,"value":false},"returns":null}],"id":"if","parameters":[{"description":"A boolean value.","name":"value","schema":{"type":["boolean","null"]}},{"description":"A value that is returned if the boolean value is `true`.","name":"accept","schema":{"description":"Any data type is allowed."}},{"default":null,"description":"A value that is returned if the boolean value is **not** `true`. Defaults to `null`.","name":"reject","optional":true,"schema":{"description":"Any data type is allowed."}}],"returns":{"description":"Either the `accept` or `reject` argument depending on the given boolean value.","schema":{"description":"Any data type is allowed."}},"summary":"If-Then-Else conditional"},{"categories":["math","math > exponential & logarithmic"],"description":"Computes the square root of a real number `x`, which is equal to calculating `x` to the power of *0.5*.\n\nA square root of x is a number a such that *`a\u00b2 = x`*. Therefore, the square root is the inverse function of a to the power of 2, but only for *a >= 0*.\n\nThe no-data value `null` is passed through and therefore gets propagated.","examples":[{"arguments":{"x":0},"returns":0},{"arguments":{"x":1},"returns":1},{"arguments":{"x":9},"returns":3},{"arguments":{"x":null},"returns":null}],"id":"sqrt","links":[{"href":"http://mathworld.wolfram.com/SquareRoot.html","rel":"about","title":"Square root explained by Wolfram MathWorld"}],"parameters":[{"description":"A number.","name":"x","schema":{"type":["number","null"]}}],"process_graph":{"power":{"arguments":{"base":{"from_parameter":"x"},"p":0.5},"process_id":"power","result":true}},"returns":{"description":"The computed square root.","schema":{"type":["number","null"]}},"summary":"Square root"},{"categories":["math"],"description":"Sums up the two numbers `x` and `y` (*`x + y`*) and returns the computed sum.\n\nNo-data values are taken into account so that `null` is returned if any element is such a value.\n\nThe computations follow [IEEE Standard 754](https://ieeexplore.ieee.org/document/8766229) whenever the processing environment supports it.","examples":[{"arguments":{"x":5,"y":2.5},"returns":7.5},{"arguments":{"x":-2,"y":-4},"returns":-6},{"arguments":{"x":1,"y":null},"returns":null}],"id":"add","links":[{"href":"http://mathworld.wolfram.com/Sum.html","rel":"about","title":"Sum explained by Wolfram MathWorld"},{"href":"https://ieeexplore.ieee.org/document/8766229","rel":"about","title":"IEEE Standard 754-2019 for Floating-Point Arithmetic"}],"parameters":[{"description":"The first summand.","name":"x","schema":{"type":["number","null"]}},{"description":"The second summand.","name":"y","schema":{"type":["number","null"]}}],"process_graph":{"sum":{"arguments":{"data":[{"from_parameter":"x"},{"from_parameter":"y"}],"ignore_nodata":false},"process_id":"sum","result":true}},"returns":{"description":"The computed sum of the two numbers.","schema":{"type":["number","null"]}},"summary":"Addition of two numbers"},{"categories":["math > constants","math > exponential & logarithmic"],"description":"The real number *e* is a mathematical constant that is the base of the natural logarithm such that *`ln(e) = 1`*. The numerical value is approximately *2.71828*.","id":"e","links":[{"href":"http://mathworld.wolfram.com/e.html","rel":"about","title":"Mathematical constant e explained by Wolfram MathWorld"}],"parameters":[],"returns":{"description":"The numerical value of Euler's number.","schema":{"type":"number"}},"summary":"Euler's number (e)"},{"categories":["math > trigonometric"],"description":"Computes the tangent of `x`. The tangent is defined to be the sine of x divided by the cosine of x.\n\nWorks on radians only.\nThe no-data value `null` is passed through and therefore gets propagated.","examples":[{"arguments":{"x":0},"returns":0}],"id":"tan","links":[{"href":"http://mathworld.wolfram.com/Tangent.html","rel":"about","title":"Tangent explained by Wolfram MathWorld"}],"parameters":[{"description":"An angle in radians.","name":"x","schema":{"type":["number","null"]}}],"returns":{"description":"The computed tangent of `x`.","schema":{"type":["number","null"]}},"summary":"Tangent"},{"categories":["math","reducer"],"description":"The arithmetic mean of an array of numbers is the quantity commonly called the average. It is defined as the sum of all elements divided by the number of elements.\n\nAn array without non-`null` elements resolves always with `null`.","examples":[{"arguments":{"data":[1,0,3,2]},"returns":1.5},{"arguments":{"data":[9,2.5,null,-2.5]},"returns":3},{"arguments":{"data":[1,null],"ignore_nodata":false},"returns":null},{"arguments":{"data":[]},"description":"The input array is empty: return `null`.","returns":null},{"arguments":{"data":[null,null]},"description":"The input array has only `null` elements: return `null`.","returns":null}],"id":"mean","links":[{"href":"http://mathworld.wolfram.com/ArithmeticMean.html","rel":"about","title":"Arithmetic mean explained by Wolfram MathWorld"}],"parameters":[{"description":"An array of numbers.","name":"data","schema":{"items":{"type":["number","null"]},"type":"array"}},{"default":true,"description":"Indicates whether no-data values are ignored or not. Ignores them by default. Setting this flag to `false` considers no-data values so that `null` is returned if any value is such a value.","name":"ignore_nodata","optional":true,"schema":{"type":"boolean"}}],"process_graph":{"count":{"arguments":{"condition":{"from_node":"count_condition"},"data":{"from_parameter":"data"}},"process_id":"count"},"count_condition":{"arguments":{"accept":null,"reject":true,"value":{"from_parameter":"ignore_nodata"}},"process_id":"if"},"divide":{"arguments":{"x":{"from_node":"sum"},"y":{"from_node":"count"}},"process_id":"divide"},"if":{"arguments":{"accept":{"from_node":"divide"},"value":{"from_node":"neq"}},"process_id":"if","result":true},"neq":{"arguments":{"x":{"from_node":"count"},"y":0},"process_id":"neq"},"sum":{"arguments":{"data":{"from_parameter":"data"},"ignore_nodata":{"from_parameter":"ignore_nodata"}},"process_id":"sum"}},"returns":{"description":"The computed arithmetic mean.","schema":{"type":["number","null"]}},"summary":"Arithmetic mean (average)"},{"categories":["math"],"description":"Remainder after a division of `x` by `y` for both integers and floating-point numbers.\n\nThe result of a modulo operation has the sign of the divisor. The handling regarding the sign of the result [differs between programming languages](https://en.wikipedia.org/wiki/Modulo_operation#In_programming_languages) and needs careful consideration to avoid unexpected results.\n\nThe no-data value `null` is passed through and therefore gets propagated if any of the arguments is `null`. A modulo by zero results in \u00b1infinity if the processing environment supports it. Otherwise, a `DivisionByZero` exception must the thrown.","examples":[{"arguments":{"x":27,"y":5},"returns":2},{"arguments":{"x":-27,"y":5},"returns":3},{"arguments":{"x":3.14,"y":-2},"returns":-0.86},{"arguments":{"x":-27,"y":-5},"returns":-2},{"arguments":{"x":27,"y":null},"returns":null},{"arguments":{"x":null,"y":5},"returns":null}],"exceptions":{"DivisionByZero":{"message":"Division by zero is not supported."}},"id":"mod","links":[{"href":"https://en.wikipedia.org/wiki/Modulo_operation","rel":"about","title":"Modulo explained by Wikipedia"}],"parameters":[{"description":"A number to be used as the dividend.","name":"x","schema":{"type":["number","null"]}},{"description":"A number to be used as the divisor.","name":"y","schema":{"type":["number","null"]}}],"returns":{"description":"The remainder after division.","schema":{"type":["number","null"]}},"summary":"Modulo"},{"categories":["math"],"description":"Multiplies the two numbers `x` and `y` (*`x * y`*) and returns the computed product.\n\nNo-data values are taken into account so that `null` is returned if any element is such a value.\n\nThe computations follow [IEEE Standard 754](https://ieeexplore.ieee.org/document/8766229) whenever the processing environment supports it.","examples":[{"arguments":{"x":5,"y":2.5},"returns":12.5},{"arguments":{"x":-2,"y":-4},"returns":8},{"arguments":{"x":1,"y":null},"returns":null}],"exceptions":{"MultiplicandMissing":{"message":"Multiplication requires at least two numbers."}},"id":"multiply","links":[{"href":"http://mathworld.wolfram.com/Product.html","rel":"about","title":"Product explained by Wolfram MathWorld"},{"href":"https://ieeexplore.ieee.org/document/8766229","rel":"about","title":"IEEE Standard 754-2019 for Floating-Point Arithmetic"}],"parameters":[{"description":"The multiplier.","name":"x","schema":{"type":["number","null"]}},{"description":"The multiplicand.","name":"y","schema":{"type":["number","null"]}}],"process_graph":{"product":{"arguments":{"data":[{"from_parameter":"x"},{"from_parameter":"y"}],"ignore_nodata":false},"process_id":"product","result":true}},"returns":{"description":"The computed product of the two numbers.","schema":{"type":["number","null"]}},"summary":"Multiplication of two numbers"},{"categories":["comparison"],"description":"Compares whether `x` is less than or equal to `y`.\n\n**Remarks:**\n\n* If any operand is `null`, the return value is `null`. Therefore, `lte(null, null)` returns `null` instead of `true`.\n* If any operand is an array or object, the return value is `false`.\n* If the operands are not equal (see process ``eq()``) and any of them is not a `number` or temporal string (`date`, `time` or `date-time`), the process returns `false`.\n* Temporal strings can *not* be compared based on their string representation due to the time zone / time-offset representations.","examples":[{"arguments":{"x":1,"y":null},"returns":null},{"arguments":{"x":0,"y":0},"returns":true},{"arguments":{"x":1,"y":2},"returns":true},{"arguments":{"x":-0.5,"y":-0.6},"returns":false},{"arguments":{"x":"00:00:00+01:00","y":"00:00:00Z"},"returns":true},{"arguments":{"x":"1950-01-01T00:00:00Z","y":"2018-01-01T12:00:00Z"},"returns":true},{"arguments":{"x":"2018-01-01T12:00:00+00:00","y":"2018-01-01T12:00:00Z"},"returns":true},{"arguments":{"x":false,"y":true},"returns":false},{"arguments":{"x":[1,2,3],"y":[1,2,3]},"returns":false}],"id":"lte","parameters":[{"description":"First operand.","name":"x","schema":{"description":"Any data type is allowed."}},{"description":"Second operand.","name":"y","schema":{"description":"Any data type is allowed."}}],"process_graph":{"eq":{"arguments":{"x":{"from_parameter":"x"},"y":{"from_parameter":"y"}},"process_id":"eq"},"lt":{"arguments":{"x":{"from_parameter":"x"},"y":{"from_parameter":"y"}},"process_id":"lt"},"or":{"arguments":{"x":{"from_node":"lt"},"y":{"from_node":"eq"}},"process_id":"or","result":true}},"returns":{"description":"`true` if `x` is less than or equal to `y`, `null` if any operand is `null`, otherwise `false`.","schema":{"type":["boolean","null"]}},"summary":"Less than or equal to comparison"},{"categories":["math > constants","math > trigonometric"],"description":"The real number Pi (\u03c0) is a mathematical constant that is the ratio of the circumference of a circle to its diameter. The numerical value is approximately *3.14159*.","id":"pi","links":[{"href":"http://mathworld.wolfram.com/Pi.html","rel":"about","title":"Mathematical constant Pi explained by Wolfram MathWorld"}],"parameters":[],"returns":{"description":"The numerical value of Pi.","schema":{"type":"number"}},"summary":"Pi (\u03c0)"},{"categories":["math > rounding"],"description":"The least integer greater than or equal to the number `x`.\n\nThe no-data value `null` is passed through and therefore gets propagated.","examples":[{"arguments":{"x":0},"returns":0},{"arguments":{"x":3.5},"returns":4},{"arguments":{"x":-0.4},"returns":0},{"arguments":{"x":-3.5},"returns":-3}],"id":"ceil","links":[{"href":"http://mathworld.wolfram.com/CeilingFunction.html","rel":"about","title":"Ceiling explained by Wolfram MathWorld"}],"parameters":[{"description":"A number to round up.","name":"x","schema":{"type":["number","null"]}}],"returns":{"description":"The number rounded up.","schema":{"type":["integer","null"]}},"summary":"Round fractions up"},{"categories":["math > trigonometric"],"description":"Computes the hyperbolic tangent of `x`. The tangent is defined to be the hyperbolic sine of x divided by the hyperbolic cosine of x.\n\nWorks on radians only.\nThe no-data value `null` is passed through and therefore gets propagated.","examples":[{"arguments":{"x":0},"returns":0}],"id":"tanh","links":[{"href":"http://mathworld.wolfram.com/HyperbolicTangent.html","rel":"about","title":"Hyperbolic tangent explained by Wolfram MathWorld"}],"parameters":[{"description":"An angle in radians.","name":"x","schema":{"type":["number","null"]}}],"returns":{"description":"The computed hyperbolic tangent of `x`.","schema":{"type":["number","null"]}},"summary":"Hyperbolic tangent"},{"categories":["math > trigonometric"],"description":"Computes the arc tangent of `x`. The arc tangent is the inverse function of the tangent so that *`arctan(tan(x)) = x`*.\n\nWorks on radians only.\nThe no-data value `null` is passed through and therefore gets propagated.","examples":[{"arguments":{"x":0},"returns":0}],"id":"arctan","links":[{"href":"http://mathworld.wolfram.com/InverseTangent.html","rel":"about","title":"Inverse tangent explained by Wolfram MathWorld"}],"parameters":[{"description":"A number.","name":"x","schema":{"type":["number","null"]}}],"returns":{"description":"The computed angle in radians.","schema":{"type":["number","null"]}},"summary":"Inverse tangent"},{"categories":["math > rounding"],"description":"The greatest integer less than or equal to the number `x`.\n\nThis process is *not* an alias for the ``int()`` process as defined by some mathematicians, see the examples for negative numbers in both processes for differences.\n\nThe no-data value `null` is passed through and therefore gets propagated.","examples":[{"arguments":{"x":0},"returns":0},{"arguments":{"x":3.5},"returns":3},{"arguments":{"x":-0.4},"returns":-1},{"arguments":{"x":-3.5},"returns":-4}],"id":"floor","links":[{"href":"http://mathworld.wolfram.com/FloorFunction.html","rel":"about","title":"Floor explained by Wolfram MathWorld"}],"parameters":[{"description":"A number to round down.","name":"x","schema":{"type":["number","null"]}}],"returns":{"description":"The number rounded down.","schema":{"type":["integer","null"]}},"summary":"Round fractions down"},{"categories":["arrays","reducer"],"description":"Gives the element with the specified index or label from the array.\n\nEither the parameter `index` or `label` must be specified, otherwise the `ArrayElementParameterMissing` exception is thrown. If both parameters are set the `ArrayElementParameterConflict` exception is thrown.","examples":[{"arguments":{"data":[9,8,7,6,5],"index":2},"returns":7},{"arguments":{"data":["A","B","C"],"index":0},"returns":"A"},{"arguments":{"data":[],"index":0,"return_nodata":true},"returns":null}],"exceptions":{"ArrayElementNotAvailable":{"message":"The array has no element with the specified index or label."},"ArrayElementParameterConflict":{"message":"The process `array_element` only allows that either the `index` or the `labels` parameter is set."},"ArrayElementParameterMissing":{"message":"The process `array_element` requires either the `index` or `labels` parameter to be set."},"ArrayNotLabeled":{"message":"The array is not a labeled array, but the `label` parameter is set. Use the `index` instead."}},"id":"array_element","parameters":[{"description":"An array.","name":"data","schema":{"items":{"description":"Any data type is allowed."},"type":"array"}},{"description":"The zero-based index of the element to retrieve.","name":"index","optional":true,"schema":{"minimum":0,"type":"integer"}},{"description":"The label of the element to retrieve. Throws an `ArrayNotLabeled` exception, if the given array is not a labeled array and this parameter is set.","name":"label","optional":true,"schema":[{"type":"number"},{"type":"string"}]},{"default":false,"description":"By default this process throws an `ArrayElementNotAvailable` exception if the index or label is invalid. If you want to return `null` instead, set this flag to `true`.","name":"return_nodata","optional":true,"schema":{"type":"boolean"}}],"returns":{"description":"The value of the requested element.","schema":{"description":"Any data type is allowed."}},"summary":"Get an element from an array"},{"categories":["math"],"description":"Clips a number between specified minimum and maximum values. A value larger than the maximum value is set to the maximum value, a value lower than the minimum value is set to the minimum value.\n\nThe no-data value `null` is passed through and therefore gets propagated.","examples":[{"arguments":{"max":1,"min":-1,"x":-5},"returns":-1},{"arguments":{"max":10,"min":1,"x":10.001},"returns":10},{"arguments":{"max":0.02,"min":0,"x":1e-06},"returns":1e-06},{"arguments":{"max":1,"min":0,"x":null},"returns":null}],"id":"clip","parameters":[{"description":"A number.","name":"x","schema":{"type":["number","null"]}},{"description":"Minimum value. If the value is lower than this value, the process will return the value of this parameter.","name":"min","schema":{"type":"number"}},{"description":"Maximum value. If the value is greater than this value, the process will return the value of this parameter.","name":"max","schema":{"type":"number"}}],"process_graph":{"max":{"arguments":{"data":[{"from_parameter":"min"},{"from_node":"min"}]},"process_id":"max","result":true},"min":{"arguments":{"data":[{"from_parameter":"max"},{"from_parameter":"x"}]},"process_id":"min"}},"returns":{"description":"The value clipped to the specified range.","schema":{"type":["number","null"]}},"summary":"Clip a value between a minimum and a maximum"},{"categories":["math"],"description":"The signum (also known as *sign*) of `x` is defined as:\n\n* *1* if *x > 0*\n* *0* if *x = 0*\n* *-1* if *x < 0*\n\nThe no-data value `null` is passed through and therefore gets propagated.","examples":[{"arguments":{"x":-2},"returns":-1},{"arguments":{"x":3.5},"returns":1},{"arguments":{"x":0},"returns":0},{"arguments":{"x":null},"returns":null}],"id":"sgn","links":[{"href":"http://mathworld.wolfram.com/Sign.html","rel":"about","title":"Sign explained by Wolfram MathWorld"}],"parameters":[{"description":"A number.","name":"x","schema":{"type":["number","null"]}}],"process_graph":{"gt0":{"arguments":{"x":{"from_parameter":"x"},"y":0},"process_id":"gt"},"if_gt0":{"arguments":{"accept":1,"reject":{"from_parameter":"x"},"value":{"from_node":"gt0"}},"process_id":"if"},"if_lt0":{"arguments":{"accept":-1,"reject":{"from_node":"if_gt0"},"value":{"from_node":"lt0"}},"process_id":"if","result":true},"lt0":{"arguments":{"x":{"from_parameter":"x"},"y":0},"process_id":"lt"}},"returns":{"description":"The computed signum value of `x`.","schema":{"type":["number","null"]}},"summary":"Signum"},{"categories":["math"],"description":"Calculates quantiles, which are cut points dividing the range of a probability distribution into either\n\n* intervals corresponding to the given `probabilities` or\n* (nearly) equal-sized intervals (q-quantiles based on the parameter `q`).\n\nEither the parameter `probabilities` or `q` must be specified, otherwise the `QuantilesParameterMissing` exception is thrown. If both parameters are set the `QuantilesParameterConflict` exception is thrown.","examples":[{"arguments":{"data":[2,4,4,4,5,5,7,9],"probabilities":[0.005,0.01,0.02,0.05,0.1,0.5]},"returns":[2.07,2.14,2.28,2.7,3.4,4.5]},{"arguments":{"data":[2,4,4,4,5,5,7,9],"q":4},"returns":[4,4.5,5.5]},{"arguments":{"data":[-1,-0.5,null,1],"q":2},"returns":[-0.5]},{"arguments":{"data":[-1,-0.5,null,1],"ignore_nodata":false,"q":4},"returns":[null,null,null]},{"arguments":{"data":[],"probabilities":[0.1,0.5]},"returns":[null,null],"title":"Empty array"}],"exceptions":{"QuantilesParameterConflict":{"message":"The process `quantiles` only allows that either the `probabilities` or the `q` parameter is set."},"QuantilesParameterMissing":{"message":"The process `quantiles` requires either the `probabilities` or `q` parameter to be set."}},"id":"quantiles","links":[{"href":"https://en.wikipedia.org/wiki/Quantile","rel":"about","title":"Quantiles explained by Wikipedia"}],"parameters":[{"description":"An array of numbers.","name":"data","schema":{"items":{"type":["number","null"]},"type":"array"}},{"description":"A list of probabilities to calculate quantiles for. The probabilities must be between 0 and 1.","name":"probabilities","optional":true,"schema":{"items":{"maximum":1,"minimum":0,"type":"number"},"type":"array"}},{"description":"Intervals to calculate quantiles for. Calculates q-quantiles with (nearly) equal-sized intervals.","name":"q","optional":true,"schema":{"minimum":2,"type":"integer"}},{"default":true,"description":"Indicates whether no-data values are ignored or not. Ignores them by default. Setting this flag to `false` considers no-data values so that an array with `null` values is returned if any element is such a value.","name":"ignore_nodata","optional":true,"schema":{"type":"boolean"}}],"returns":{"description":"An array with the computed quantiles. The list has either\n\n* as many elements as the given list of `probabilities` had or\n* *`q`-1* elements.\n\nIf the input array is empty the resulting array is filled with as many `null` values as required according to the list above. See the 'Empty array' example for an example.","schema":{"items":{"type":["number","null"]},"type":"array"}},"summary":"Quantiles"},{"categories":["math > trigonometric"],"description":"Computes the arc sine of `x`. The arc sine is the inverse function of the sine so that *`arcsin(sin(x)) = x`*.\n\nWorks on radians only.\nThe no-data value `null` is passed through and therefore gets propagated.","examples":[{"arguments":{"x":0},"returns":0}],"id":"arcsin","links":[{"href":"http://mathworld.wolfram.com/InverseSine.html","rel":"about","title":"Inverse sine explained by Wolfram MathWorld"}],"parameters":[{"description":"A number.","name":"x","schema":{"type":["number","null"]}}],"returns":{"description":"The computed angle in radians.","schema":{"type":["number","null"]}},"summary":"Inverse sine"},{"categories":["comparison"],"description":"Compares whether `x` is strictly greater than `y`.\n\n**Remarks:**\n\n* If any operand is `null`, the return value is `null`.\n* If any operand is an array or object, the return value is `false`.\n* If any operand is not a `number` or temporal string (`date`, `time` or `date-time`), the process returns `false`.\n* Temporal strings can *not* be compared based on their string representation due to the time zone / time-offset representations.","examples":[{"arguments":{"x":1,"y":null},"returns":null},{"arguments":{"x":0,"y":0},"returns":false},{"arguments":{"x":2,"y":1},"returns":true},{"arguments":{"x":-0.5,"y":-0.6},"returns":true},{"arguments":{"x":"00:00:00Z","y":"00:00:00+01:00"},"returns":true},{"arguments":{"x":"1950-01-01T00:00:00Z","y":"2018-01-01T12:00:00Z"},"returns":false},{"arguments":{"x":"2018-01-01T12:00:00+00:00","y":"2018-01-01T12:00:00Z"},"returns":false},{"arguments":{"x":true,"y":0},"returns":false},{"arguments":{"x":true,"y":false},"returns":false}],"id":"gt","parameters":[{"description":"First operand.","name":"x","schema":{"description":"Any data type is allowed."}},{"description":"Second operand.","name":"y","schema":{"description":"Any data type is allowed."}}],"returns":{"description":"`true` if `x` is strictly greater than `y` or `null` if any operand is `null`, otherwise `false`.","schema":{"type":["boolean","null"]}},"summary":"Greater than comparison"},{"categories":["math > exponential & logarithmic"],"description":"The natural logarithm is the logarithm to the base *e* of the number `x`, which equals to using the *log* process with the base set to *e*. The natural logarithm is the inverse function of taking *e* to the power x.\n\nThe no-data value `null` is passed through.\n\nThe computations follow [IEEE Standard 754](https://ieeexplore.ieee.org/document/8766229) whenever the processing environment supports it. Therefore, *`ln(0)`* results in \u00b1infinity if the processing environment supports it or otherwise an exception is thrown.","examples":[{"arguments":{"x":1},"returns":0}],"id":"ln","links":[{"href":"http://mathworld.wolfram.com/NaturalLogarithm.html","rel":"about","title":"Natural logarithm explained by Wolfram MathWorld"},{"href":"https://ieeexplore.ieee.org/document/8766229","rel":"about","title":"IEEE Standard 754-2019 for Floating-Point Arithmetic"}],"parameters":[{"description":"A number to compute the natural logarithm for.","name":"x","schema":{"type":["number","null"]}}],"process_graph":{"e":{"arguments":{},"process_id":"e"},"log":{"arguments":{"base":{"from_node":"e"},"x":{"from_parameter":"x"}},"process_id":"log","result":true}},"returns":{"description":"The computed natural logarithm.","schema":{"type":["number","null"]}},"summary":"Natural logarithm"},{"categories":["math > exponential & logarithmic"],"description":"Logarithm to the base `base` of the number `x` is defined to be the inverse function of taking b to the power of x.\n\nThe no-data value `null` is passed through and therefore gets propagated if any of the arguments is `null`.\n\nThe computations follow [IEEE Standard 754](https://ieeexplore.ieee.org/document/8766229) whenever the processing environment supports it. Therefore, `log(0, 2)` results in \u00b1infinity if the processing environment supports it or otherwise an exception is thrown.","examples":[{"arguments":{"base":10,"x":10},"returns":1},{"arguments":{"base":2,"x":2},"returns":1},{"arguments":{"base":2,"x":4},"returns":2},{"arguments":{"base":16,"x":1},"returns":0}],"id":"log","links":[{"href":"http://mathworld.wolfram.com/Logarithm.html","rel":"about","title":"Logarithm explained by Wolfram MathWorld"},{"href":"https://ieeexplore.ieee.org/document/8766229","rel":"about","title":"IEEE Standard 754-2019 for Floating-Point Arithmetic"}],"parameters":[{"description":"A number to compute the logarithm for.","name":"x","schema":{"type":["number","null"]}},{"description":"The numerical base.","name":"base","schema":{"type":["number","null"]}}],"returns":{"description":"The computed logarithm.","schema":{"type":["number","null"]}},"summary":"Logarithm to a base"},{"categories":["math","reducer"],"description":"Computes the largest value of an array of numbers, which is equal to the first element of a sorted (i.e., ordered) version of the array.\n\nAn array without non-`null` elements resolves always with `null`.","examples":[{"arguments":{"data":[1,0,3,2]},"returns":3},{"arguments":{"data":[5,2.5,null,-0.7]},"returns":5},{"arguments":{"data":[1,0,3,null,2],"ignore_nodata":false},"returns":null},{"arguments":{"data":[]},"description":"The input array is empty: return `null`.","returns":null}],"id":"max","links":[{"href":"http://mathworld.wolfram.com/Maximum.html","rel":"about","title":"Maximum explained by Wolfram MathWorld"}],"parameters":[{"description":"An array of numbers.","name":"data","schema":{"items":{"type":["number","null"]},"type":"array"}},{"default":true,"description":"Indicates whether no-data values are ignored or not. Ignores them by default. Setting this flag to `false` considers no-data values so that `null` is returned if any value is such a value.","name":"ignore_nodata","optional":true,"schema":{"type":"boolean"}}],"returns":{"description":"The maximum value.","schema":{"type":["number","null"]}},"summary":"Maximum value"},{"categories":["comparison"],"description":"Compares whether `x` is strictly less than `y`.\n\n**Remarks:**\n\n* If any operand is `null`, the return value is `null`.\n* If any operand is an array or object, the return value is `false`.\n* If any operand is not a `number` or temporal string (`date`, `time` or `date-time`), the process returns `false`.\n* Temporal strings can *not* be compared based on their string representation due to the time zone / time-offset representations.","examples":[{"arguments":{"x":1,"y":null},"returns":null},{"arguments":{"x":0,"y":0},"returns":false},{"arguments":{"x":1,"y":2},"returns":true},{"arguments":{"x":-0.5,"y":-0.6},"returns":false},{"arguments":{"x":"00:00:00+01:00","y":"00:00:00Z"},"returns":true},{"arguments":{"x":"1950-01-01T00:00:00Z","y":"2018-01-01T12:00:00Z"},"returns":true},{"arguments":{"x":"2018-01-01T12:00:00+00:00","y":"2018-01-01T12:00:00Z"},"returns":false},{"arguments":{"x":0,"y":true},"returns":false},{"arguments":{"x":false,"y":true},"returns":false}],"id":"lt","parameters":[{"description":"First operand.","name":"x","schema":{"description":"Any data type is allowed."}},{"description":"Second operand.","name":"y","schema":{"description":"Any data type is allowed."}}],"returns":{"description":"`true` if `x` is strictly less than `y`, `null` if any operand is `null`, otherwise `false`.","schema":{"type":["boolean","null"]}},"summary":"Less than comparison"},{"categories":["cubes","import"],"description":"Loads a collection from the current back-end by its id and returns it as a processable data cube. The data that is added to the data cube can be restricted with the additional `spatial_extent`, `temporal_extent`, `bands` and `properties`.\n\n**Remarks:**\n\n* The bands (and all dimensions that specify nominal dimension labels) are expected to be ordered as specified in the metadata if the `bands` parameter is set to `null`.\n* If no additional parameter is specified this would imply that the whole data set is expected to be loaded. Due to the large size of many data sets, this is not recommended and may be optimized by back-ends to only load the data that is actually required after evaluating subsequent processes such as filters. This means that the pixel values should be processed only after the data has been limited to the required extent and as a consequence also to a manageable size.","examples":[{"arguments":{"id":"Sentinel-2","properties":{"eo:cloud_cover":{"process_graph":{"cc":{"arguments":{"max":50,"min":0,"x":{"from_parameter":"value"}},"process_id":"between","result":true}}},"platform":{"process_graph":{"pf":{"arguments":{"case_sensitive":false,"x":{"from_parameter":"value"},"y":"Sentinel-2B"},"process_id":"eq","result":true}}}},"spatial_extent":{"east":16.6,"north":48.6,"south":47.2,"west":16.1},"temporal_extent":["2018-01-01","2019-01-01"]},"description":"Loading `Sentinel-2B` data from a `Sentinel-2` collection for 2018, but only with cloud cover between 0 and 50%."}],"id":"load_collection","links":[{"href":"https://openeo.org/documentation/1.0/datacubes.html","rel":"about","title":"Data Cubes explained in the openEO documentation"},{"href":"https://proj.org/usage/projections.html","rel":"about","title":"PROJ parameters for cartographic projections"},{"href":"http://www.epsg-registry.org","rel":"about","title":"Official EPSG code registry"},{"href":"http://www.epsg.io","rel":"about","title":"Unofficial EPSG code database"},{"href":"http://www.opengeospatial.org/standards/sfa","rel":"about","title":"Simple Features standard by the OGC"},{"href":"https://github.com/radiantearth/stac-spec/tree/master/extensions/eo#common-band-names","rel":"about","title":"List of common band names as specified by the STAC specification"}],"parameters":[{"description":"The collection id.","name":"id","schema":{"pattern":"^[\\w\\-\\.~/]+$","subtype":"collection-id","type":"string"}},{"description":"Limits the data to load from the collection to the specified bounding box or polygons.\n\nThe process puts a pixel into the data cube if the point at the pixel center intersects with the bounding box or any of the polygons (as defined in the Simple Features standard by the OGC).\n\nThe GeoJSON can be one of the following feature types:\n\n* A `Polygon` or `MultiPolygon` geometry,\n* a `Feature` with a `Polygon` or `MultiPolygon` geometry,\n* a `FeatureCollection` containing at least one `Feature` with `Polygon` or `MultiPolygon` geometries, or\n* a `GeometryCollection` containing `Polygon` or `MultiPolygon` geometries. To maximize interoperability, `GeometryCollection` should be avoided in favour of one of the alternatives above.\n\nSet this parameter to `null` to set no limit for the spatial extent. Be careful with this when loading large datasets! It is recommended to use this parameter instead of using ``filter_bbox()`` or ``filter_spatial()`` directly after loading unbounded data.","name":"spatial_extent","schema":[{"properties":{"base":{"default":null,"description":"Base (optional, lower left corner, coordinate axis 3).","type":["number","null"]},"crs":{"anyOf":[{"examples":[3857],"minimum":1000,"subtype":"epsg-code","title":"EPSG Code","type":"integer"},{"subtype":"wkt2-definition","title":"WKT2","type":"string"},{"deprecated":true,"subtype":"proj-definition","title":"PROJ definition","type":"string"}],"default":4326,"description":"Coordinate reference system of the extent, specified as as [EPSG code](http://www.epsg-registry.org/), [WKT2 (ISO 19162) string](http://docs.opengeospatial.org/is/18-010r7/18-010r7.html) or [PROJ definition (deprecated)](https://proj.org/usage/quickstart.html). Defaults to `4326` (EPSG code 4326) unless the client explicitly requests a different coordinate reference system."},"east":{"description":"East (upper right corner, coordinate axis 1).","type":"number"},"height":{"default":null,"description":"Height (optional, upper right corner, coordinate axis 3).","type":["number","null"]},"north":{"description":"North (upper right corner, coordinate axis 2).","type":"number"},"south":{"description":"South (lower left corner, coordinate axis 2).","type":"number"},"west":{"description":"West (lower left corner, coordinate axis 1).","type":"number"}},"required":["west","south","east","north"],"subtype":"bounding-box","title":"Bounding Box","type":"object"},{"description":"Limits the data cube to the bounding box of the given geometry. All pixels inside the bounding box that do not intersect with any of the polygons will be set to no data (`null`).","subtype":"geojson","title":"GeoJSON","type":"object"},{"description":"Don't filter spatially. All data is included in the data cube.","title":"No filter","type":"null"}]},{"description":"Limits the data to load from the collection to the specified left-closed temporal interval. Applies to all temporal dimensions. The interval has to be specified as an array with exactly two elements:\n\n1. The first element is the start of the temporal interval. The specified instance in time is **included** in the interval.\n2. The second element is the end of the temporal interval. The specified instance in time is **excluded** from the interval.\n\nThe specified temporal strings follow [RFC 3339](https://www.rfc-editor.org/rfc/rfc3339.html). Also supports open intervals by setting one of the boundaries to `null`, but never both.\n\nSet this parameter to `null` to set no limit for the temporal extent. Be careful with this when loading large datasets! It is recommended to use this parameter instead of using ``filter_temporal()`` directly after loading unbounded data.","name":"temporal_extent","schema":[{"examples":[["2015-01-01T00:00:00Z","2016-01-01T00:00:00Z"],["2015-01-01","2016-01-01"]],"items":{"anyOf":[{"format":"date-time","subtype":"date-time","type":"string"},{"format":"date","subtype":"date","type":"string"},{"maxLength":4,"minLength":4,"pattern":"^\\d{4}$","subtype":"year","type":"string"},{"type":"null"}]},"maxItems":2,"minItems":2,"subtype":"temporal-interval","type":"array"},{"description":"Don't filter temporally. All data is included in the data cube.","title":"No filter","type":"null"}]},{"default":null,"description":"Only adds the specified bands into the data cube so that bands that don't match the list of band names are not available. Applies to all dimensions of type `bands`.\n\nEither the unique band name (metadata field `name` in bands) or one of the common band names (metadata field `common_name` in bands) can be specified. If the unique band name and the common name conflict, the unique band name has a higher priority.\n\nThe order of the specified array defines the order of the bands in the data cube. If multiple bands match a common name, all matched bands are included in the original order.\n\nIt is recommended to use this parameter instead of using ``filter_bands()`` directly after loading unbounded data.","name":"bands","optional":true,"schema":[{"items":{"subtype":"band-name","type":"string"},"type":"array"},{"description":"Don't filter bands. All bands are included in the data cube.","title":"No filter","type":"null"}]},{"default":null,"description":"Limits the data by metadata properties to include only data in the data cube which all given conditions return `true` for (AND operation).\n\nSpecify key-value-pairs with the key being the name of the metadata property, which can be retrieved with the openEO Data Discovery for Collections. The value must a condition (user-defined process) to be evaluated against the collection metadata, see the example.","name":"properties","optional":true,"schema":[{"additionalProperties":{"parameters":[{"description":"The property value to be checked against.","name":"value","schema":{"description":"Any data type."}}],"returns":{"description":"`true` if the data should be loaded into the data cube, otherwise `false`.","schema":{"type":"boolean"}},"subtype":"process-graph","type":"object"},"description":"A list of filters to check against. Specify key-value-pairs with the key being the name of the metadata property name and the value being a process evaluated against the metadata values.","subtype":"metadata-filter","title":"Filters","type":"object"},{"description":"Don't filter by metadata properties.","title":"No filter","type":"null"}]}],"returns":{"description":"A data cube for further processing. The dimensions and dimension properties (name, type, labels, reference system and resolution) correspond to the collection's metadata, but the dimension labels are restricted as specified in the parameters.","schema":{"subtype":"raster-cube","type":"object"}},"summary":"Load a collection"},{"categories":["cubes","export"],"description":"Saves processed data to the server-side user workspace of the authenticated user. This process aims to be compatible with GDAL/OGR formats and options. STAC-compatible metadata should be stored with the processed data.\n\nCalling this process may be rejected by back-ends in the context of secondary web services.","exceptions":{"FormatUnsuitable":{"message":"Data can't be transformed into the requested output format."}},"id":"save_result","links":[{"href":"https://www.gdal.org/formats_list.html","rel":"about","title":"GDAL Raster Formats"},{"href":"https://www.gdal.org/ogr_formats.html","rel":"about","title":"OGR Vector Formats"}],"parameters":[{"description":"The data to save.","name":"data","schema":[{"subtype":"raster-cube","type":"object"},{"subtype":"vector-cube","type":"object"}]},{"description":"The file format to save to. It must be one of the values that the server reports as supported output file formats, which usually correspond to the short GDAL/OGR codes. If the format is not suitable for storing the underlying data structure, a `FormatUnsuitable` exception will be thrown. This parameter is *case insensitive*.","name":"format","schema":{"subtype":"output-format","type":"string"}},{"default":{},"description":"The file format parameters to be used to create the file(s). Must correspond to the parameters that the server reports as supported parameters for the chosen `format`. The parameter names and valid values usually correspond to the GDAL/OGR format options.","name":"options","optional":true,"schema":{"subtype":"output-format-options","type":"object"}}],"returns":{"description":"`false` if saving failed, `true` otherwise.","schema":{"type":"boolean"}},"summary":"Save processed data to storage"},{"categories":["cubes"],"description":"Applies a process to each pixel value in the data cube (i.e. a local operation). In contrast, the process ``apply_dimension()`` applies a process to all pixel values along a particular dimension.","id":"apply","links":[{"href":"https://openeo.org/documentation/1.0/datacubes.html#apply","rel":"about","title":"Apply explained in the openEO documentation"}],"parameters":[{"description":"A data cube.","name":"data","schema":{"subtype":"raster-cube","type":"object"}},{"description":"A process that accepts and returns a single value and is applied on each individual value in the data cube. The process may consist of multiple sub-processes and could, for example, consist of processes such as ``abs()`` or ``linear_scale_range()``.","name":"process","schema":{"parameters":[{"description":"The value to process.","name":"x","schema":{"description":"Any data type."}},{"default":null,"description":"Additional data passed by the user.","name":"context","optional":true,"schema":{"description":"Any data type."}}],"returns":{"description":"The value to be set in the new data cube.","schema":{"description":"Any data type."}},"subtype":"process-graph","type":"object"}},{"default":null,"description":"Additional data to be passed to the process.","name":"context","optional":true,"schema":{"description":"Any data type."}}],"returns":{"description":"A data cube with the newly computed values and the same dimensions. The dimension properties (name, type, labels, reference system and resolution) remain unchanged.","schema":{"subtype":"raster-cube","type":"object"}},"summary":"Apply a process to each pixel"},{"categories":["cubes","reducer"],"description":"Applies a reducer to a data cube dimension by collapsing all the pixel values along the specified dimension into an output value computed by the reducer.\n\nThe dimension is dropped. To avoid this, use ``apply_dimension()`` instead.","exceptions":{"DimensionNotAvailable":{"message":"A dimension with the specified name does not exist."}},"id":"reduce_dimension","links":[{"href":"https://openeo.org/documentation/1.0/datacubes.html#reduce","rel":"about","title":"Reducers explained in the openEO documentation"}],"parameters":[{"description":"A data cube.","name":"data","schema":{"subtype":"raster-cube","type":"object"}},{"description":"A reducer to apply on the specified dimension. A reducer is a single process such as ``mean()`` or a set of processes, which computes a single value for a list of values, see the category 'reducer' for such processes.","name":"reducer","schema":{"parameters":[{"description":"A labeled array with elements of any type.","name":"data","schema":{"items":{"description":"Any data type."},"subtype":"labeled-array","type":"array"}},{"default":null,"description":"Additional data passed by the user.","name":"context","optional":true,"schema":{"description":"Any data type."}}],"returns":{"description":"The value to be set in the new data cube.","schema":{"description":"Any data type."}},"subtype":"process-graph","type":"object"}},{"description":"The name of the dimension over which to reduce. Fails with a `DimensionNotAvailable` exception if the specified dimension does not exist.","name":"dimension","schema":{"type":"string"}},{"default":null,"description":"Additional data to be passed to the reducer.","name":"context","optional":true,"schema":{"description":"Any data type."}}],"returns":{"description":"A data cube with the newly computed values. It is missing the given dimension, the number of dimensions decreases by one. The dimension properties (name, type, labels, reference system and resolution) for all other dimensions remain unchanged.","schema":{"subtype":"raster-cube","type":"object"}},"summary":"Reduce dimensions"},{"categories":["cubes"],"description":"Adds a new named dimension to the data cube.\n\nAfterwards, the dimension can be referred to with the specified `name`. If a dimension with the specified name exists, the process fails with a `DimensionExists` exception. The dimension label of the dimension is set to the specified `label`.","exceptions":{"DimensionExists":{"message":"A dimension with the specified name already exists."}},"id":"add_dimension","parameters":[{"description":"A data cube to add the dimension to.","name":"data","schema":{"subtype":"raster-cube","type":"object"}},{"description":"Name for the dimension.","name":"name","schema":{"type":"string"}},{"description":"A dimension label.","name":"label","schema":[{"type":"number"},{"type":"string"}]},{"default":"other","description":"The type of dimension, defaults to `other`.","name":"type","optional":true,"schema":{"enum":["spatial","temporal","bands","other"],"type":"string"}}],"returns":{"description":"The data cube with a newly added dimension. The new dimension has exactly one dimension label. All other dimensions remain unchanged.","schema":{"subtype":"raster-cube","type":"object"}},"summary":"Add a new dimension"},{"categories":["cubes"],"description":"Renames the labels of the specified dimension in the data cube from `source` to `target`.\n\nIf the array for the source labels is empty (the default), the dimension labels are expected to be enumerated with zero-based numbering (0,1,2,3,...) so that the dimension labels directly map to the indices of the array specified for the parameter `target`. If the dimension labels are not enumerated and the `target` parameter is not specified, the `LabelsNotEnumerated` exception is thrown. The number of the source and target labels must be equal. Otherwise, the exception `LabelMismatch` is thrown.\n\nThis process doesn't change the order of the labels and their corresponding data.","examples":[{"arguments":{"data":{"from_parameter":"data"},"dimension":"bands","source":["B1","B2","B3"],"target":["red","green","blue"]},"description":"Renaming the bands from `B1` to `red`, from `B2` to `green` and from `B3` to `blue`.","title":"Rename named labels"}],"exceptions":{"LabelExists":{"message":"A label with the specified name exists."},"LabelMismatch":{"message":"The number of labels in the parameters `source` and `target` don't match."},"LabelNotAvailable":{"message":"A label with the specified name does not exist."},"LabelsNotEnumerated":{"message":"The dimension labels are not enumerated."}},"id":"rename_labels","links":[{"href":"https://processes.openeo.org/1.1.0/examples/rename-enumerated-labels.json","rel":"example","title":"Rename enumerated labels","type":"application/json"}],"parameters":[{"description":"The data cube.","name":"data","schema":{"subtype":"raster-cube","type":"object"}},{"description":"The name of the dimension to rename the labels for.","name":"dimension","schema":{"type":"string"}},{"description":"The new names for the labels. The dimension labels in the data cube are expected to be enumerated if the parameter `target` is not specified. If a target dimension label already exists in the data cube, a `LabelExists` exception is thrown.","name":"target","schema":{"items":{"type":["number","string"]},"type":"array"}},{"default":[],"description":"The names of the labels as they are currently in the data cube. The array defines an unsorted and potentially incomplete list of labels that should be renamed to the names available in the corresponding array elements in the parameter `target`. If one of the source dimension labels doesn't exist, the `LabelNotAvailable` exception is thrown. By default, the array is empty so that the dimension labels in the data cube are expected to be enumerated.","name":"source","optional":true,"schema":{"items":{"type":["number","string"]},"type":"array"}}],"returns":{"description":"The data cube with the same dimensions. The dimension properties (name, type, labels, reference system and resolution) remain unchanged, except that for the given dimension the labels change. The old labels can not be referred to any longer. The number of labels remains the same.","schema":{"subtype":"raster-cube","type":"object"}},"summary":"Rename dimension labels"},{"categories":["cubes","masks"],"description":"Applies a mask to a raster data cube. To apply a vector mask use ``mask_polygon()``.\n\nA mask is a raster data cube for which corresponding pixels among `data` and `mask` are compared and those pixels in `data` are replaced whose pixels in `mask` are non-zero (for numbers) or `true` (for boolean values). The pixel values are replaced with the value specified for `replacement`, which defaults to `null` (no data).\n\nThe data cubes have to be compatible so that each dimension in the mask must also be available in the raster data cube with the same name, type, reference system, resolution and labels. Dimensions can be missing in the mask with the result that the mask is applied for each label of the missing dimension in the data cube. The process fails if there's an incompatibility found between the raster data cube and the mask.","id":"mask","parameters":[{"description":"A raster data cube.","name":"data","schema":{"subtype":"raster-cube","type":"object"}},{"description":"A mask as a raster data cube. Every pixel in `data` must have a corresponding element in `mask`.","name":"mask","schema":{"subtype":"raster-cube","type":"object"}},{"default":null,"description":"The value used to replace masked values with.","name":"replacement","optional":true,"schema":{"type":["number","boolean","string","null"]}}],"returns":{"description":"A masked raster data cube with the same dimensions. The dimension properties (name, type, labels, reference system and resolution) remain unchanged.","schema":{"subtype":"raster-cube","type":"object"}},"summary":"Apply a raster mask"},{"categories":["cubes","filter"],"description":"Limits the data cube to the specified bounding box.\n\nThe filter retains a pixel in the data cube if the point at the pixel center intersects with the bounding box (as defined in the Simple Features standard by the OGC).","id":"filter_bbox","links":[{"href":"https://openeo.org/documentation/1.0/datacubes.html#filter","rel":"about","title":"Filters explained in the openEO documentation"},{"href":"https://proj.org/usage/projections.html","rel":"about","title":"PROJ parameters for cartographic projections"},{"href":"http://www.epsg-registry.org","rel":"about","title":"Official EPSG code registry"},{"href":"http://www.epsg.io","rel":"about","title":"Unofficial EPSG code database"},{"href":"http://www.opengeospatial.org/standards/sfa","rel":"about","title":"Simple Features standard by the OGC"}],"parameters":[{"description":"A data cube.","name":"data","schema":{"subtype":"raster-cube","type":"object"}},{"description":"A bounding box, which may include a vertical axis (see `base` and `height`).","name":"extent","schema":{"properties":{"base":{"default":null,"description":"Base (optional, lower left corner, coordinate axis 3).","type":["number","null"]},"crs":{"anyOf":[{"examples":[3857],"minimum":1000,"subtype":"epsg-code","title":"EPSG Code","type":"integer"},{"subtype":"wkt2-definition","title":"WKT2","type":"string"},{"deprecated":true,"subtype":"proj-definition","title":"PROJ definition","type":"string"}],"default":4326,"description":"Coordinate reference system of the extent, specified as as [EPSG code](http://www.epsg-registry.org/), [WKT2 (ISO 19162) string](http://docs.opengeospatial.org/is/18-010r7/18-010r7.html) or [PROJ definition (deprecated)](https://proj.org/usage/quickstart.html). Defaults to `4326` (EPSG code 4326) unless the client explicitly requests a different coordinate reference system."},"east":{"description":"East (upper right corner, coordinate axis 1).","type":"number"},"height":{"default":null,"description":"Height (optional, upper right corner, coordinate axis 3).","type":["number","null"]},"north":{"description":"North (upper right corner, coordinate axis 2).","type":"number"},"south":{"description":"South (lower left corner, coordinate axis 2).","type":"number"},"west":{"description":"West (lower left corner, coordinate axis 1).","type":"number"}},"required":["west","south","east","north"],"subtype":"bounding-box","type":"object"}}],"returns":{"description":"A data cube restricted to the bounding box. The dimensions and dimension properties (name, type, labels, reference system and resolution) remain unchanged, except that the spatial dimensions have less (or the same) dimension labels.","schema":{"subtype":"raster-cube","type":"object"}},"summary":"Spatial filter using a bounding box"},{"categories":["cubes","filter"],"description":"Filters the bands in the data cube so that bands that don't match any of the criteria are dropped from the data cube. The data cube is expected to have only one dimension of type `bands`. Fails with a `DimensionMissing` exception if no such dimension exists.\n\nThe following criteria can be used to select bands:\n\n* `bands`: band name or common band name (e.g. `B01`, `B8A`, `red` or `nir`)\n* `wavelengths`: ranges of wavelengths in micrometers (\u03bcm) (e.g. 0.5 - 0.6)\n\nAll these information are exposed in the band metadata of the collection. To keep algorithms interoperable it is recommended to prefer the common band names or the wavelengths over band names that are specific to the collection and/or back-end.\n\nIf multiple criteria are specified, any of them must match and not all of them, i.e. they are combined with an OR-operation. If no criteria are specified, the `BandFilterParameterMissing` exception must be thrown.\n\n**Important:** The order of the specified array defines the order of the bands in the data cube, which can be important for subsequent processes. If multiple bands are matched by a single criterion (e.g. a range of wavelengths), they stay in the original order.","exceptions":{"BandFilterParameterMissing":{"message":"The process `filter_bands` requires any of the parameters `bands`, `common_names` or `wavelengths` to be set."},"DimensionMissing":{"message":"A band dimension is missing."}},"id":"filter_bands","links":[{"href":"https://github.com/radiantearth/stac-spec/tree/master/extensions/eo#common-band-names","rel":"about","title":"List of common band names as specified by the STAC specification"},{"href":"https://openeo.org/documentation/1.0/datacubes.html#filter","rel":"about","title":"Filters explained in the openEO documentation"}],"parameters":[{"description":"A data cube with bands.","name":"data","schema":{"subtype":"raster-cube","type":"object"}},{"default":[],"description":"A list of band names. Either the unique band name (metadata field `name` in bands) or one of the common band names (metadata field `common_name` in bands). If the unique band name and the common name conflict, the unique band name has a higher priority.\n\nThe order of the specified array defines the order of the bands in the data cube. If multiple bands match a common name, all matched bands are included in the original order.","name":"bands","optional":true,"schema":{"items":{"subtype":"band-name","type":"string"},"type":"array"}},{"default":[],"description":"A list of sub-lists with each sub-list consisting of two elements. The first element is the minimum wavelength and the second element is the maximum wavelength. Wavelengths are specified in micrometers (\u03bcm).\n\nThe order of the specified array defines the order of the bands in the data cube. If multiple bands match the wavelengths, all matched bands are included in the original order.","name":"wavelengths","optional":true,"schema":{"items":{"examples":[[[0.45,0.5],[0.6,0.7]]],"items":{"type":"number"},"maxItems":2,"minItems":2,"type":"array"},"type":"array"}}],"returns":{"description":"A data cube limited to a subset of its original bands. The dimensions and dimension properties (name, type, labels, reference system and resolution) remain unchanged, except that the dimension of type `bands` has less (or the same) dimension labels.","schema":{"subtype":"raster-cube","type":"object"}},"summary":"Filter the bands by names"},{"categories":["math > indices","vegetation indices"],"description":"Computes the Normalized Difference Vegetation Index (NDVI). The NDVI is computed as *`(nir - red) / (nir + red)`*.\n\nThe `data` parameter expects a raster data cube with a dimension of type `bands` or a `DimensionAmbiguous` exception is thrown otherwise. By default, the dimension must have at least two bands with the common names `red` and `nir` assigned. Otherwise, the user has to specify the parameters `nir` and `red`. If neither is the case, either the exception `NirBandAmbiguous` or `RedBandAmbiguous` is thrown. The common names for each band are specified in the collection's band metadata and are *not* equal to the band names.\n\nBy default, the dimension of type `bands` is dropped by this process. To keep the dimension specify a new band name in the parameter `target_band`. This adds a new dimension label with the specified name to the dimension, which can be used to access the computed values. If a band with the specified name exists, a `BandExists` is thrown.\n\nThis process is very similar to the process ``normalized_difference()``, but determines the bands automatically based on the common names (`red`/`nir`) specified in the metadata.","exceptions":{"BandExists":{"message":"A band with the specified target name exists."},"DimensionAmbiguous":{"message":"dimension of type `bands` is not available or is ambiguous.."},"NirBandAmbiguous":{"message":"The NIR band can't be resolved, please specify the specific NIR band name."},"RedBandAmbiguous":{"message":"The red band can't be resolved, please specify the specific red band name."}},"id":"ndvi","links":[{"href":"https://en.wikipedia.org/wiki/Normalized_difference_vegetation_index","rel":"about","title":"NDVI explained by Wikipedia"},{"href":"https://earthobservatory.nasa.gov/features/MeasuringVegetation/measuring_vegetation_2.php","rel":"about","title":"NDVI explained by NASA"},{"href":"https://github.com/radiantearth/stac-spec/tree/master/extensions/eo#common-band-names","rel":"about","title":"List of common band names as specified by the STAC specification"}],"parameters":[{"description":"A raster data cube with two bands that have the common names `red` and `nir` assigned.","name":"data","schema":{"subtype":"raster-cube","type":"object"}},{"default":"nir","description":"The name of the NIR band. Defaults to the band that has the common name `nir` assigned.\n\nEither the unique band name (metadata field `name` in bands) or one of the common band names (metadata field `common_name` in bands) can be specified. If the unique band name and the common name conflict, the unique band name has a higher priority.","name":"nir","optional":true,"schema":{"subtype":"band-name","type":"string"}},{"default":"red","description":"The name of the red band. Defaults to the band that has the common name `red` assigned.\n\nEither the unique band name (metadata field `name` in bands) or one of the common band names (metadata field `common_name` in bands) can be specified. If the unique band name and the common name conflict, the unique band name has a higher priority.","name":"red","optional":true,"schema":{"subtype":"band-name","type":"string"}},{"default":null,"description":"By default, the dimension of type `bands` is dropped. To keep the dimension specify a new band name in this parameter so that a new dimension label with the specified name will be added for the computed values.","name":"target_band","optional":true,"schema":[{"pattern":"^\\w+$","type":"string"},{"type":"null"}]}],"returns":{"description":"A raster data cube containing the computed NDVI values. The structure of the data cube differs depending on the value passed to `target_band`:\n\n* `target_band` is `null`: The data cube does not contain the dimension of type `bands`, the number of dimensions decreases by one. The dimension properties (name, type, labels, reference system and resolution) for all other dimensions remain unchanged.\n* `target_band` is a string: The data cube keeps the same dimensions. The dimension properties remain unchanged, but the number of dimension labels for the dimension of type `bands` increases by one. The additional label is named as specified in `target_band`.","schema":{"subtype":"raster-cube","type":"object"}},"summary":"Normalized Difference Vegetation Index"},{"categories":["cubes"],"description":"The data cubes have to be compatible. A merge operation without overlap should be reversible with (a set of) filter operations for each of the two cubes. The process performs the join on overlapping dimensions, with the same name and type.\n\nAn overlapping dimension has the same name, type, reference system and resolution in both dimensions, but can have different labels. One of the dimensions can have different labels, for all other dimensions the labels must be equal. If data overlaps, the parameter `overlap_resolver` must be specified to resolve the overlap.\n\n**Examples for merging two data cubes:**\n\n1. Data cubes with the dimensions (`x`, `y`, `t`, `bands`) have the same dimension labels in `x`, `y` and `t`, but the labels for the dimension `bands` are `B1` and `B2` for the first cube and `B3` and `B4`. An overlap resolver is *not needed*. The merged data cube has the dimensions `x`, `y`, `t` and `bands` and the dimension `bands` has four dimension labels: `B1`, `B2`, `B3`, `B4`.\n2. Data cubes with the dimensions (`x`, `y`, `t`, `bands`) have the same dimension labels in `x`, `y` and `t`, but the labels for the dimension `bands` are `B1` and `B2` for the first data cube and `B2` and `B3` for the second. An overlap resolver is *required* to resolve overlap in band `B2`. The merged data cube has the dimensions `x`, `y`, `t` and `bands` and the dimension `bands` has three dimension labels: `B1`, `B2`, `B3`.\n3. Data cubes with the dimensions (`x`, `y`, `t`) have the same dimension labels in `x`, `y` and `t`. There are two options:\n   1. Keep the overlapping values separately in the merged data cube: An overlap resolver is *not needed*, but for each data cube you need to add a new dimension using ``add_dimension()``. The new dimensions must be equal, except that the labels for the new dimensions must differ by name. The merged data cube has the same dimensions and labels as the original data cubes, plus the dimension added with ``add_dimension()``, which has the two dimension labels after the merge.\n   2. Combine the overlapping values into a single value: An overlap resolver is *required* to resolve the overlap for all pixels. The merged data cube has the same dimensions and labels as the original data cubes, but all pixel values have been processed by the overlap resolver.\n4. A data cube with dimensions (`x`, `y`, `t` / `bands`) or (`x`, `y`, `t`, `bands`) and another data cube with dimensions (`x`, `y`) have the same dimension labels in `x` and `y`. Merging them will join dimensions `x` and `y`, so the lower dimension cube is merged with each time step and band available in the higher dimensional cube. This can for instance be used to apply a digital elevation model to a spatio-temporal data cube. An overlap resolver is *required* to resolve the overlap for all pixels.\n\nAfter the merge, the dimensions with a natural/inherent label order (with a reference system this is each spatial and temporal dimensions) still have all dimension labels sorted. For other dimensions where there is no inherent order, including bands, the dimension labels keep the order in which they are present in the original data cubes and the dimension labels of `cube2` are appended to the dimension labels of `cube1`.","exceptions":{"OverlapResolverMissing":{"message":"Overlapping data cubes, but no overlap resolver has been specified."}},"id":"merge_cubes","links":[{"href":"https://en.wikipedia.org/wiki/Reduction_Operator","rel":"about","title":"Background information on reduction operators (binary reducers) by Wikipedia"}],"parameters":[{"description":"The first data cube.","name":"cube1","schema":{"subtype":"raster-cube","type":"object"}},{"description":"The second data cube.","name":"cube2","schema":{"subtype":"raster-cube","type":"object"}},{"default":null,"description":"A reduction operator that resolves the conflict if the data overlaps. The reducer must return a value of the same data type as the input values are. The reduction operator may be a single process such as ``multiply()`` or consist of multiple sub-processes. `null` (the default) can be specified if no overlap resolver is required.","name":"overlap_resolver","optional":true,"schema":{"parameters":[{"description":"The overlapping value from the first data cube `cube1`.","name":"x","schema":{"description":"Any data type."}},{"description":"The overlapping value from the second data cube `cube2`.","name":"y","schema":{"description":"Any data type."}},{"default":null,"description":"Additional data passed by the user.","name":"context","optional":true,"schema":{"description":"Any data type."}}],"returns":{"description":"The value to be set in the merged data cube.","schema":{"description":"Any data type."}},"subtype":"process-graph","type":"object"}},{"default":null,"description":"Additional data to be passed to the overlap resolver.","name":"context","optional":true,"schema":{"description":"Any data type."}}],"returns":{"description":"The merged data cube. See the process description for details regarding the dimensions and dimension properties (name, type, labels, reference system and resolution).","schema":{"subtype":"raster-cube","type":"object"}},"summary":"Merge two data cubes"},{"categories":["cubes","import","udf"],"description":"Runs a UDF in one of the supported runtime environments.\n\nThe process can either:\n\n1. load and run a UDF stored in a file on the server-side workspace of the authenticated user. The path to the UDF file must be relative to the root directory of the user's workspace.\n2. fetch and run a remotely stored and published UDF by absolute URI.\n3. run the source code specified inline as string.\n\nThe loaded UDF can be executed in several processes such as ``aggregate_spatial()``, ``apply()``, ``apply_dimension()`` and ``reduce_dimension()``. In this case, an array is passed instead of a raster data cube. The user must ensure that the data is properly passed as an array so that the UDF can make sense of it.","exceptions":{"InvalidVersion":{"message":"The specified UDF runtime version is not supported."}},"id":"run_udf","parameters":[{"description":"The data to be passed to the UDF as an array or raster data cube.","name":"data","schema":[{"subtype":"raster-cube","title":"Raster data cube","type":"object"},{"items":{"description":"Any data type."},"minItems":1,"title":"Array","type":"array"},{"description":"A single value of any data type.","title":"Single Value"}]},{"description":"Either source code, an absolute URL or a path to a UDF script.","name":"udf","schema":[{"description":"Absolute URL to a UDF","format":"uri","pattern":"^(http|https)://","subtype":"uri","type":"string"},{"description":"Path to a UDF uploaded to the server.","pattern":"^[^\r\n\\:'\"]+$","subtype":"file-path","type":"string"},{"description":"The multi-line source code of a UDF, must contain a newline/line-break.","pattern":"(\r\n|\r|\n)","subtype":"udf-code","type":"string"}]},{"description":"A UDF runtime identifier available at the back-end.","name":"runtime","schema":{"subtype":"udf-runtime","type":"string"}},{"default":null,"description":"An UDF runtime version. If set to `null`, the default runtime version specified for each runtime is used.","name":"version","optional":true,"schema":[{"subtype":"udf-runtime-version","type":"string"},{"title":"Default runtime version","type":"null"}]},{"default":{},"description":"Additional data such as configuration options to be passed to the UDF.","name":"context","optional":true,"schema":{"type":"object"}}],"returns":{"description":"The data processed by the UDF.\n\n* Returns a raster data cube, if a raster data cube is passed for `data`. Details on the dimensions and dimension properties (name, type, labels, reference system and resolution) depend on the UDF.\n* If an array is passed for `data`, the returned value can be of any data type, but is exactly what the UDF returns.","schema":[{"subtype":"raster-cube","title":"Raster data cube","type":"object"},{"description":"Any data type.","title":"Any"}]},"summary":"Run a UDF"},{"categories":["math"],"description":"Performs a linear transformation between the input and output range.\n\nThe given number in `x` is clipped to the bounds specified in `inputMin` and `inputMax` so that the underlying formula *`((x - inputMin) / (inputMax - inputMin)) * (outputMax - outputMin) + outputMin`* never returns any value lower than `outputMin` or greater than `outputMax`.\n\nPotential use case include\n\n* scaling values to the 8-bit range (0 - 255) often used for numeric representation of values in one of the channels of the [RGB colour model](https://en.wikipedia.org/wiki/RGB_color_model#Numeric_representations) or\n* calculating percentages (0 - 100).\n\nThe no-data value `null` is passed through and therefore gets propagated.","examples":[{"arguments":{"inputMax":1,"inputMin":-1,"outputMax":255,"outputMin":0,"x":0.3},"returns":165.75},{"arguments":{"inputMax":255,"inputMin":0,"x":25.5},"returns":0.1},{"arguments":{"inputMax":100,"inputMin":0,"x":null},"returns":null},{"arguments":{"inputMax":1,"inputMin":0,"outputMax":255,"outputMin":0,"x":1.12},"description":"Shows that the input data is clipped.","returns":255}],"id":"linear_scale_range","parameters":[{"description":"A number to transform. The number gets clipped to the bounds specified in `inputMin` and `inputMax`.","name":"x","schema":{"type":["number","null"]}},{"description":"Minimum value the input can obtain.","name":"inputMin","schema":{"type":"number"}},{"description":"Maximum value the input can obtain.","name":"inputMax","schema":{"type":"number"}},{"default":0,"description":"Minimum value of the desired output range.","name":"outputMin","optional":true,"schema":{"type":"number"}},{"default":1,"description":"Maximum value of the desired output range.","name":"outputMax","optional":true,"schema":{"type":"number"}}],"process_graph":{"add":{"arguments":{"x":{"from_node":"multiply"},"y":{"from_parameter":"outputMin"}},"process_id":"add","result":true},"divide":{"arguments":{"x":{"from_node":"subtract1"},"y":{"from_node":"subtract2"}},"process_id":"divide"},"multiply":{"arguments":{"x":{"from_node":"divide"},"y":{"from_node":"subtract3"}},"process_id":"multiply"},"subtract1":{"arguments":{"x":{"from_parameter":"x"},"y":{"from_parameter":"inputMin"}},"process_id":"subtract"},"subtract2":{"arguments":{"x":{"from_parameter":"inputMax"},"y":{"from_parameter":"inputMin"}},"process_id":"subtract"},"subtract3":{"arguments":{"x":{"from_parameter":"outputMax"},"y":{"from_parameter":"outputMin"}},"process_id":"subtract"}},"returns":{"description":"The transformed number.","schema":{"type":["number","null"]}},"summary":"Linear transformation between two ranges"},{"description":"iCor workflow test","id":"atmospheric_correction","parameters":[{"description":"Data cube containing multi-spectral optical top of atmosphere reflectances to be corrected.","name":"data","optional":false,"schema":{"subtype":"raster-cube","type":"object"}},{"description":"The atmospheric correction method to use. To get reproducible results, you have to set a specific method.\n\nSet to `null` to allow the back-end to choose, which will improve portability, but reduce reproducibility as you *may* get different results if you run the processes multiple times.","name":"method","optional":true,"schema":{"type":"string"}},{"description":"The digital elevation model to use, leave empty to allow the back-end to make a suitable choice.","name":"elevation_model","optional":true,"schema":{"type":"string"}},{"description":"non-standard mission Id, currently defaults to sentinel2","name":"missionId","optional":true,"schema":{"type":"string"}},{"description":"non-standard if set, overrides sun zenith angle values [deg]","name":"sza","optional":true,"schema":{"type":"number"}},{"description":"non-standard if set, overrides sensor zenith angle values [deg]","name":"vza","optional":true,"schema":{"type":"number"}},{"description":"non-standard if set, overrides rel. azimuth angle values [deg]","name":"raa","optional":true,"schema":{"type":"number"}},{"description":"non-standard if set, overrides ground elevation [km]","name":"gnd","optional":true,"schema":{"type":"number"}},{"description":"non-standard if set, overrides aerosol optical thickness [], usually 0.1..0.2","name":"aot","optional":true,"schema":{"type":"number"}},{"description":"non-standard if set, overrides water vapor [], usually 0..7","name":"cwv","optional":true,"schema":{"type":"number"}},{"description":"non-standard if set to 1, saves debug bands","name":"appendDebugBands","optional":true,"schema":{"type":"number"}}],"returns":{"description":"the corrected data as a data cube","schema":{"subtype":"raster-cube","type":"object"}}},{"categories":["cubes","sar"],"description":"Computes backscatter from SAR input.\n\nNote that backscatter computation may require instrument specific metadata that is tightly coupled to the original SAR products. As a result, this process may only work in combination with loading data from specific collections, not with general data cubes.\n\nThis process uses bilinear interpolation, both for resampling the DEM and the backscatter.","exceptions":{"DigitalElevationModelInvalid":{"message":"The digital elevation model specified is either not a DEM or can't be used with the data cube given."}},"experimental":true,"id":"sar_backscatter","links":[{"href":"https://bok.eo4geo.eu/PP2-2-4-3","rel":"about","title":"Gamma nought (0) explained by EO4GEO body of knowledge."},{"href":"https://bok.eo4geo.eu/PP2-2-4-2","rel":"about","title":"Sigma nought (0) explained by EO4GEO body of knowledge."},{"href":"https://www.geo.uzh.ch/microsite/rsl-documents/research/publications/peer-reviewed-articles/201108-TGRS-Small-tcGamma-3809999360/201108-TGRS-Small-tcGamma.pdf","rel":"about","title":"Flattening Gamma: Radiometric Terrain Correction for SAR Imagery"},{"href":"https://doi.org/10.3390/data4030093","rel":"about","title":"Reasoning behind the choice of bilinear resampling"}],"parameters":[{"description":"The source data cube containing SAR input.","name":"data","schema":{"subtype":"raster-cube","type":"object"}},{"default":"gamma0-terrain","description":"Select the radiometric correction coefficient. The following options are available:\n\n* `beta0`: radar brightness\n* `sigma0-ellipsoid`: ground area computed with ellipsoid earth model\n* `sigma0-terrain`: ground area computed with terrain earth model\n* `gamma0-ellipsoid`: ground area computed with ellipsoid earth model in sensor line of sight\n* `gamma0-terrain`: ground area computed with terrain earth model in sensor line of sight (default)\n* `null`: non-normalized backscatter","name":"coefficient","optional":true,"schema":[{"enum":["beta0","sigma0-ellipsoid","sigma0-terrain","gamma0-ellipsoid","gamma0-terrain"],"type":"string"},{"title":"Non-normalized backscatter","type":"null"}]},{"default":null,"description":"The digital elevation model to use. Set to `null` (the default) to allow the back-end to choose, which will improve portability, but reduce reproducibility.","name":"elevation_model","optional":true,"schema":[{"subtype":"collection-id","type":"string"},{"type":"null"}]},{"default":false,"description":"If set to `true`, a data mask is added to the bands with the name `mask`. It indicates which values are valid (1), invalid (0) or contain no-data (null).","name":"mask","optional":true,"schema":{"type":"boolean"}},{"default":false,"description":"If set to `true`, a DEM-based local contributing area band named `contributing_area` is added. The values are given in square meters.","name":"contributing_area","optional":true,"schema":{"type":"boolean"}},{"default":false,"description":"If set to `true`, a DEM-based local incidence angle band named `local_incidence_angle` is added. The values are given in degrees.","name":"local_incidence_angle","optional":true,"schema":{"type":"boolean"}},{"default":false,"description":"If set to `true`, an ellipsoidal incidence angle band named `ellipsoid_incidence_angle` is added. The values are given in degrees.","name":"ellipsoid_incidence_angle","optional":true,"schema":{"type":"boolean"}},{"default":true,"description":"If set to `false`, no noise removal is applied. Defaults to `true`, which removes noise.","name":"noise_removal","optional":true,"schema":{"type":"boolean"}}],"returns":{"description":"Backscatter values corresponding to the chosen parametrization. The values are given in linear scale.","schema":{"subtype":"raster-cube","type":"object"}},"summary":"Computes backscatter from SAR input"},{"categories":["cubes","sar","ard"],"description":"Computes CARD4L compliant backscatter from SAR input. The radiometric correction coefficient is gamma0 (terrain), which is the ground area computed with terrain earth model in sensor line of sight.\n\nNote that backscatter computation may require instrument specific metadata that is tightly coupled to the original SAR products. As a result, this process may only work in combination with loading data from specific collections, not with general data cubes.\n\nThis process uses bilinear interpolation, both for resampling the DEM and the backscatter.","exceptions":{"DigitalElevationModelInvalid":{"message":"The digital elevation model specified is either not a DEM or can't be used with the data cube given."}},"experimental":true,"id":"ard_normalized_radar_backscatter","links":[{"href":"http://ceos.org/ard/files/PFS/NRB/v5.0/CARD4L-PFS_Normalised_Radar_Backscatter-v5.0.pdf","rel":"about","title":"CEOS CARD4L specification"},{"href":"https://bok.eo4geo.eu/PP2-2-4-3","rel":"about","title":"Gamma nought (0) explained by EO4GEO body of knowledge."},{"href":"https://doi.org/10.3390/data4030093","rel":"about","title":"Reasoning behind the choice of bilinear resampling"}],"parameters":[{"description":"The source data cube containing SAR input.","name":"data","schema":{"subtype":"raster-cube","type":"object"}},{"default":null,"description":"The digital elevation model to use. Set to `null` (the default) to allow the back-end to choose, which will improve portability, but reduce reproducibility.","name":"elevation_model","optional":true,"schema":[{"subtype":"collection-id","type":"string"},{"type":"null"}]},{"default":false,"description":"If set to `true`, a DEM-based local contributing area band named `contributing_area` is added. The values are given in square meters.","name":"contributing_area","optional":true,"schema":{"type":"boolean"}},{"default":false,"description":"If set to `true`, an ellipsoidal incidence angle band named `ellipsoid_incidence_angle` is added. The values are given in degrees.","name":"ellipsoid_incidence_angle","optional":true,"schema":{"type":"boolean"}},{"default":true,"description":"If set to `false`, no noise removal is applied. Defaults to `true`, which removes noise.","name":"noise_removal","optional":true,"schema":{"type":"boolean"}}],"process_graph":{"nrb":{"arguments":{"coefficient":"gamma0-terrain","contributing_area":{"from_parameter":"contributing_area"},"data":{"from_parameter":"data"},"elevation_model":{"from_parameter":"elevation_model"},"ellipsoid_incidence_angle":{"from_parameter":"ellipsoid_incidence_angle"},"local_incidence_angle":true,"mask":true,"noise_removal":{"from_parameter":"noise_removal"}},"process_id":"sar_backscatter","result":true}},"returns":{"description":"Backscatter values expressed as gamma0 in linear scale.\n\nIn addition to the bands `contributing_area` and `ellipsoid_incidence_angle` that can optionally be added with corresponding parameters, the following bands are always added to the data cube:\n\n- `mask`: A data mask that indicates which values are valid (1), invalid (0) or contain no-data (null).\n- `local_incidence_angle`: A band with DEM-based local incidence angles in degrees.\n\nThe data returned is CARD4L compliant with corresponding metadata.","schema":{"subtype":"raster-cube","type":"object"}},"summary":"CARD4L compliant SAR NRB generation"},{"categories":["math > indices","vegetation indices"],"description":"Computes the normalized difference for two bands. The normalized difference is computed as *`(x - y) / (x + y)`*.\n\nThis process could be used for a number of remote sensing indices such as:\n\n* [NDVI](https://eos.com/ndvi/): `x` = NIR band, `y` = red band\n* [NDWI](https://eos.com/ndwi/): `x` = NIR band, `y` = SWIR band\n* [NDSI](https://eos.com/ndsi/): `x` = green band, `y` = SWIR band\n\nSome back-ends may have native processes such as ``ndvi()`` available for convenience.","id":"normalized_difference","links":[{"href":"https://eos.com/ndvi/","rel":"related","title":"NDVI explained by EOS"},{"href":"https://eos.com/ndwi/","rel":"related","title":"NDWI explained by EOS"},{"href":"https://eos.com/ndsi/","rel":"related","title":"NDSI explained by EOS"}],"parameters":[{"description":"The value for the first band.","name":"x","schema":{"type":"number"}},{"description":"The value for the second band.","name":"y","schema":{"type":"number"}}],"process_graph":{"add":{"arguments":{"x":{"from_parameter":"x"},"y":{"from_parameter":"y"}},"process_id":"add"},"divide":{"arguments":{"x":{"from_node":"subtract"},"y":{"from_node":"add"}},"process_id":"divide","result":true},"subtract":{"arguments":{"x":{"from_parameter":"x"},"y":{"from_parameter":"y"}},"process_id":"subtract"}},"returns":{"description":"The computed normalized difference.","schema":{"maximum":1,"minimum":-1,"type":"number"}},"summary":"Normalized difference"}]}
